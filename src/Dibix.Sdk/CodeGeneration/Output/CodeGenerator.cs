using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using Dibix.Sdk.CodeGeneration.CSharp;

namespace Dibix.Sdk.CodeGeneration
{
    public abstract class CodeGenerator
    {
        #region Fields
        private const string Header = @"/*------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------*/";
        private static readonly string GeneratorName = typeof(ServerCodeGenerator).Assembly.GetName().Name;
        private static readonly string Version = FileVersionInfo.GetVersionInfo(typeof(CodeGenerator).Assembly.Location).FileVersion;
        private readonly IList<ArtifactWriterBase> _writers;
        private readonly ILogger _logger;
        private readonly ISchemaRegistry _schemaRegistry;
        #endregion

        #region Constructor
        protected CodeGenerator(ILogger logger, ISchemaRegistry schemaRegistry)
        {
            this._logger = logger;
            this._schemaRegistry = schemaRegistry;
            this._writers = new Collection<ArtifactWriterBase>();
            this._writers.AddRange(this.SelectWriters());
        }
        #endregion

        #region Public Methods
        public string Generate(CodeGenerationModel model)
        {
            if (this._logger.HasLoggedErrors)
                return "\"Please fix the errors first\"";
            
            StringWriter writer = new StringWriter();
            writer.WriteLineRaw(Header);
            this.Write(writer, model);
            return writer.ToString();
        }
        #endregion

        #region Protected Methods
        protected virtual void Write(StringWriter writer, CodeGenerationModel model)
        {
            IList<ArtifactWriterBase> writers = this._writers.Where(x => x.HasContent(model)).ToArray();
            //if (!writers.Any())
            //    return;

            CSharpAnnotation generatedCodeAnnotation = new CSharpAnnotation(nameof(GeneratedCodeAttribute), new CSharpStringValue(GeneratorName), new CSharpStringValue(Version));

            // Prepare writer
            bool isArtifactAssembly = model.CompatibilityLevel == CodeGeneratorCompatibilityLevel.Full;
            IEnumerable<CSharpAnnotation> globalAnnotations = this.CollectGlobalAnnotations(isArtifactAssembly).Concat(writers.SelectMany(x => x.GetGlobalAnnotations(model)));
            CSharpWriter output = new CSharpWriter(writer, model.RootNamespace, globalAnnotations);

            CodeGenerationContext context = new CodeGenerationContext(output.Root, generatedCodeAnnotation, model, this._schemaRegistry);
            this.OnContextCreated(context, isArtifactAssembly);

            IList<IGrouping<string, ArtifactWriterBase>> childWriterGroups = writers.GroupBy(x => x.LayerName).ToArray();
            for (int i = 0; i < childWriterGroups.Count; i++)
            {
                IGrouping<string, ArtifactWriterBase> nestedWriterGroup = childWriterGroups[i];

                // Don't enter layer name if project has multiple areas
                if (context.Model.AreaName != null)
                    context.Output = output.Root.BeginScope(nestedWriterGroup.Key);

                IList<ArtifactWriterBase> nestedWriters = nestedWriterGroup.ToArray();
                for (int j = 0; j < nestedWriters.Count; j++)
                {
                    ArtifactWriterBase nestedWriter = nestedWriters[j];
                    using (context.Output.CreateRegion(nestedWriter.RegionName))
                    {
                        nestedWriter.Write(context);
                    }

                    if (j + 1 < nestedWriters.Count)
                        context.Output.AddSeparator();
                }

                if (i + 1 < childWriterGroups.Count)
                    output.Root.AddSeparator();
            }

            output.Generate();
        }

        protected virtual IEnumerable<ArtifactWriterBase> SelectWriters()
        {
            yield break;
        }

        protected virtual IEnumerable<CSharpAnnotation> CollectGlobalAnnotations(bool isArtifactAssembly)
        {
            yield break;
        }

        protected virtual void OnContextCreated(CodeGenerationContext context, bool isArtifactAssembly)
        {
        }
        #endregion
    }
}