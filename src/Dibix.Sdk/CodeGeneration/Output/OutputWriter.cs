using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Dibix.Sdk.CodeGeneration
{
    public abstract class OutputWriter : IWriter
    {
        private const int TabSize = 4;
        private const string Header = @"/*------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------*/";

        public string Write(bool generatePublicArtifacts, string @namespace, string className, CommandTextFormatting formatting, SourceArtifacts artifacts)
        {
            StringWriter writer = new StringWriter();
            writer.WriteLineRaw(Header);
            this.Write(writer, generatePublicArtifacts, @namespace, className, formatting, artifacts);
            return writer.ToString();
        }

        protected abstract void Write(StringWriter writer, bool generatePublicArtifacts, string @namespace, string className, CommandTextFormatting formatting, SourceArtifacts statements);

        protected static string Format(string content, CommandTextFormatting formatting)
        {
            if (content == null)
                return null;

            string formatted = content.Trim();

            formatted = formatted.Replace("\t", new string(' ', TabSize));

            if (formatting.HasFlag(CommandTextFormatting.WhiteStripped))
                formatted = Regex.Replace(formatted, @"\s+", " ");

            if (formatting.HasFlag(CommandTextFormatting.StripDoubleQuotes))
                formatted = formatted.Replace("\"", formatting.HasFlag(CommandTextFormatting.Verbatim) ? "\"\"" : "\\\"");

            if (formatting.HasFlag(CommandTextFormatting.Minified))
                formatted = formatted.Replace("\r\n", @"\r\n");

            return formatted;
        }
    }
}