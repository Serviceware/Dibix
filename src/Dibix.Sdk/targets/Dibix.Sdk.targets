<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    To make sure some global properties are overriden, we have to put them here instead of the .props file.
    This is because NuGet imports the .props file at the beginning of the project and the .targets file at the end.
  -->
  <PropertyGroup>
    <!-- We have our own CA target, which also executes the native SqlStaticCodeAnalysis -->
    <RunSqlCodeAnalysis>false</RunSqlCodeAnalysis>
    <RunSqlCodeAnalysisOnce>false</RunSqlCodeAnalysisOnce>

    <ProducePackage Condition="'$(ProducePackage)' == '' and '$(IsEmbedded)' == 'false'">True</ProducePackage>
    <ProducePackage Condition="'$(ProducePackage)' == '' and '$(IsEmbedded)' == 'true'">False</ProducePackage>
    <!--
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;
      CoreCompile;
      GenerateSerializationAssemblies;
      SqlBuild;
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>
    -->
    <!-- Exclude CoreCompile, because we generate our own assembly -->
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;
      GenerateSerializationAssemblies;
    </BuildDependsOn>

    <!-- Exclude SqlBuild to increase build performance, if no dacpac should be produced -->
    <BuildDependsOn Condition="'$(ProducePackage)' == 'true'">$(BuildDependsOn);SqlBuild;</BuildDependsOn>

    <BuildDependsOn>
      $(BuildDependsOn);
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>

  <!-- 
    Unfortunately the BuildDependsOn property cannot be overriden in the NuGet .targets file, because of the order how these imports happen.
    Currently the order is as follows:
    - Import SSDT targets
      - Import C# targets
        - Import NuGet targets
          - Import Dibix NuGet targets (we can't override properties here)
    - SSDT sets properties we want to override

    Therefore these need to be overriden by adding a custom import after the SSDT targets.
    This can only be done by the caller, not by this NuGet package.
  -->
  <PropertyGroup>
    <DibixBuildDependsOn>$(BuildDependsOn)</DibixBuildDependsOn>
  </PropertyGroup>

  <!-- Utility to dump item including metadata -->
  <UsingTask TaskName="DumpItem" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          StringBuilder sb = new StringBuilder();
          for (int i = 0; i < Source.Length; i++)
          {
              ITaskItem item = Source[i];
              
              sb.Append("  ")
                .Append(item);
              
              foreach (string metadataName in item.MetadataNames)
              {
                  sb.AppendLine()
                    .Append("    ")
                    .Append(metadataName)
                    .Append(' ')
                    .Append(item.GetMetadata(metadataName));
              }
              
              if (i + 1 < Source.Length)
                sb.AppendLine();
          }
          Result = sb.ToString();
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Define inputs and outputs so the targets know when they need to be rebuilt -->
  <Target Name="SetupSqlBuildInputs" DependsOnTargets="_SetupSqlBuildInputs">
    <ItemGroup>
      <!-- Changed inputs that are relevant for all build targets -->

      <!-- Some SSDT entries have to be added manually, since they are incorrect -->
      <!-- For example: -->
      <!--<__SqlBuildInputItem Include="@(MSBuildAllProjects)"/>-->
      <SqlBuildInputItem Include="$(MSBuildAllProjects)"/>
      <SqlBuildInputItem Include="$(MSBuildProjectFullPath)"/>

      <!-- Import some inputs from SSDT -->
      <_SqlTargetInput Include="@(SqlBuildInputItem)" />

      <!-- SDK changes -->
      <_SqlTargetInput Include="$(DibixCliPath)" />
      <_SqlTargetInput Include="$(DibixSdkPath)" />
      <_SqlTargetInput Include="$(DibixRuntimePath)" />
      <_SqlTargetInput Include="$(DibixRuntimeXplatPath)" />


      <!-- Target specific inputs -->
      <!-- SqlCodeAnalysis -->
      <SqlCodeAnalysisInput Include="@(_SqlTargetInput)" />

      <!-- CompileArtifacts -->
      <CompileArtifactsInput Include="@(_SqlTargetInput)" />
      <CompileArtifactsInput Include="@(Contract)" />
      <CompileArtifactsInput Include="@(Endpoint)" />

      <!-- SqlCore -->
      <SqlCoreInput Include="@(_SqlTargetInput)" />
      <SqlCoreInput Include="@(Contract)" />
      <SqlCoreInput Include="@(Endpoint)" />
    </ItemGroup>
  </Target>
  <Target Name="SetupSqlBuildOutputs" BeforeTargets="_SetupSqlBuildOutputs">
    <PropertyGroup>
      <_ClientAssemblyTargetPath Condition="'$(ClientOutputName)' != ''">$(TargetDir)$(ClientOutputName).dll</_ClientAssemblyTargetPath>
      <_ClientSymbolsTargetPath Condition="'$(ClientOutputName)' != ''">$(TargetDir)$(ClientOutputName).pdb</_ClientSymbolsTargetPath>
    </PropertyGroup>
    <ItemGroup>
      <!--
        Since the SqlCodeAnalysis target does not produce any output, 
        we use the DLL produced in CompileArtifacts target to detect if it needs to be rebuilt.
        TODO: Remove the dependency to an output produced by another target
              by writing a separate marker file to determine whether analysis was already executed.
      -->
      <SqlCodeAnalysisOutput Include="$(TargetPath)" /> <!-- .dll -->

      <!-- CompileArtifacts -->
      <CompileArtifactsOutput Include="$(TargetPath)" /> <!-- .dll -->
      <FileWrites Include="$(_ClientAssemblyTargetPath);$(_ClientSymbolsTargetPath)" /> <!-- This is important so these files don't get removed in IncrementalClean -->

      <!-- SqlCore -->
      <SqlCoreOutput Include="$(TargetPath)" /> <!-- .dll -->
    </ItemGroup>
  </Target>


  <!-- Run our own sql code analysis rules -->
  <Target Name="SqlCodeAnalysis"
          BeforeTargets="CompileArtifacts"
          DependsOnTargets="SetupSqlBuildInputs;SetupSqlBuildOutputs;ResolveArtifactReferences"
          Inputs="@(SqlCodeAnalysisInput)"
          Outputs="@(SqlCodeAnalysisOutput)">
    <!-- Configuration -->
    <PropertyGroup>
      <SqlNamingConventionPrefix Condition="'$(SqlNamingConventionPrefix)' == ''">dbx</SqlNamingConventionPrefix>
    </PropertyGroup>

    <ItemGroup>
      <SqlCodeAnalysisScriptItem Include="@(PreDeploy)" />
      <SqlCodeAnalysisScriptItem Include="@(PostDeploy)" />
    </ItemGroup>

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SqlCodeAnalysisInputFile>$(IntermediateOutputPath)analyze.input</_SqlCodeAnalysisInputFile>
    </PropertyGroup>

    <DumpItem Source="@(Build)">
      <Output TaskParameter="Result" PropertyName="_Build"/>
    </DumpItem>
    <DumpItem Source="@(SqlCodeAnalysisScriptItem)">
      <Output TaskParameter="Result" PropertyName="_SqlCodeAnalysisScriptItem"/>
    </DumpItem>
    <DumpItem Source="@(SqlReferencePath)">
      <Output TaskParameter="Result" PropertyName="_SqlReferencePath"/>
    </DumpItem>

    <ItemGroup>
      <_SqlCodeAnalysisInputItem Include="ProjectName
  $(MSBuildProjectName)" />
      <_SqlCodeAnalysisInputItem Include="DatabaseSchemaProviderName
  $(DSP)" />
      <_SqlCodeAnalysisInputItem Include="ModelCollation
  $(ModelCollation)" />
      <_SqlCodeAnalysisInputItem Include="NamingConventionPrefix
  $(SqlNamingConventionPrefix)" />
      <_SqlCodeAnalysisInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_SqlCodeAnalysisInputItem Include="StaticCodeAnalysisSucceededFile
  $(StaticCodeAnalysisSucceededFile)" />
      <_SqlCodeAnalysisInputItem Include="BuildingInsideVisualStudio
  $(BuildingInsideVisualStudio)" />
      <_SqlCodeAnalysisInputItem Include="ResultsFile
  $(ResultsFile)" />
      <_SqlCodeAnalysisInputItem Include="Source
$(_Build)" />
      <_SqlCodeAnalysisInputItem Include="ScriptSource
$(_SqlCodeAnalysisScriptItem)" />
      <_SqlCodeAnalysisInputItem Include="SqlReferencePath
$(_SqlReferencePath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SqlCodeAnalysisInputFile)" Lines="@(_SqlCodeAnalysisInputItem)" Overwrite="True" />

    <PropertyGroup>
      <_SqlCodeAnalysisCommand>$(DibixCliPath) analyze "$(_SqlCodeAnalysisInputFile)"</_SqlCodeAnalysisCommand>
      <_SqlCodeAnalysisCommand Condition="'$(ResetSuppressions)' != ''">$(_SqlCodeAnalysisCommand) -s $(ResetSuppressions)</_SqlCodeAnalysisCommand>
    </PropertyGroup>

    <Exec Command="$(_SqlCodeAnalysisCommand)" />
  </Target>

  <!-- Compile database accessors for stored procedures including their contracts and an API endpoint configuration -->
  <Target Name="SetupCompilationArtifacts" BeforeTargets="SetupSqlBuildInputs">
    <ItemGroup>
      <Contract Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Contracts\\')) and %(Extension) == '.json'" />
      <Endpoint Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Endpoints\\')) and %(Extension) == '.json'" />
    </ItemGroup>
  </Target>
  <Target Name="CompileArtifacts"
          DependsOnTargets="SetupSqlBuildInputs;SetupSqlBuildOutputs;ResolveArtifactReferences"
          Inputs="@(CompileArtifactsInput)"
          Outputs="@(CompileArtifactsOutput)"> <!-- BeforeTargets="CoreCompile" -->
    <!-- Configuration -->
    <PropertyGroup>
      <ProductName Condition="'$(ProductName)' == ''">$(RootNamespace.Split('.')[0])</ProductName>
      <AreaName Condition="$(AreaName) == '' and $(RootNamespace.Split('.').Length) > 1">$(RootNamespace.Split('.')[1])</AreaName>
      <Title Condition="$(Title) == ''">$(AreaName)</Title>
      <Description Condition="$(Description) == '' and $(Build_Repository_Uri) != '' and $(Build_SourceVersion) != '' and $(Build_SourceBranch) != ''">__Build version:__ $([System.DateTime]::Now.ToString(G))\r\n\r\n__Source version:__ [$(Build_SourceVersion)]($(Build_Repository_Uri)/commit/$(Build_SourceVersion)?refName=$(Build_SourceBranch))</Description>
      <LangVersion>latest</LangVersion>
      <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
      <CopyOutputSymbolsToOutputDirectory>true</CopyOutputSymbolsToOutputDirectory>

      <_ServerOutputName>$(AssemblyName)</_ServerOutputName>
      <_ServerIntermediateFilePathNoExt>$(IntermediateOutputPath)$(_ServerOutputName)</_ServerIntermediateFilePathNoExt>
      <_ServerIntermediateFilePath>$(_ServerIntermediateFilePathNoExt).cs</_ServerIntermediateFilePath>
      <_ClientIntermediateFilePathNoExt Condition="'$(ClientOutputName)' != ''">$(IntermediateOutputPath)$(ClientOutputName)</_ClientIntermediateFilePathNoExt>
      <_ClientIntermediateFilePath Condition="'$(ClientOutputName)' != ''">$(_ClientIntermediateFilePathNoExt).cs</_ClientIntermediateFilePath>
    </PropertyGroup>

    <ItemGroup>
      <ServerCompilationReference Include="@(ArtifactReference->'%(RelativeDir)%(Filename).dll')"
                                  Condition="Exists('%(RelativeDir)%(Filename).dll') AND !$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)%(Extension)', '^master|msdb(\.dacpac)$'))" />
    </ItemGroup>

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_CodeGenerationInputFile>$(IntermediateOutputPath)compile.input</_CodeGenerationInputFile>
    </PropertyGroup>

    <DumpItem Source="@(Build)">
      <Output TaskParameter="Result" PropertyName="_Build"/>
    </DumpItem>
    <DumpItem Source="@(Contract)">
      <Output TaskParameter="Result" PropertyName="_Contract"/>
    </DumpItem>
    <DumpItem Source="@(Endpoint)">
      <Output TaskParameter="Result" PropertyName="_Endpoint"/>
    </DumpItem>
    <DumpItem Source="@(ServerCompilationReference)">
      <Output TaskParameter="Result" PropertyName="_ServerCompilationReference"/>
    </DumpItem>
    <DumpItem Source="@(SqlReferencePath)">
      <Output TaskParameter="Result" PropertyName="_SqlReferencePath"/>
    </DumpItem>

    <ItemGroup>
      <_CodeGenerationInputItem Include="ProjectName
  $(MSBuildProjectName)" />
      <_CodeGenerationInputItem Include="ProjectDirectory
  $(MSBuildProjectDirectory)" />
      <_CodeGenerationInputItem Include="ProductName
  $(ProductName)" />
      <_CodeGenerationInputItem Include="AreaName
  $(AreaName)" />
      <_CodeGenerationInputItem Include="Title
  $(Title)" />
      <_CodeGenerationInputItem Include="Version
  $(FileVersion)" />
      <_CodeGenerationInputItem Include="Description
  $(Description)" />
      <_CodeGenerationInputItem Include="BaseUrl
  $(BaseUrl)" />
      <_CodeGenerationInputItem Include="DefaultOutputFilePath
  $(_ServerIntermediateFilePath)" />
      <_CodeGenerationInputItem Include="ClientOutputFilePath
  $(_ClientIntermediateFilePath)" />
      <_CodeGenerationInputItem Include="ExternalAssemblyReferenceDir
  $(ExternalAssemblyReferenceDir)" />
      <_CodeGenerationInputItem Include="BuildingInsideVisualStudio
  $(BuildingInsideVisualStudio)" />
      <_CodeGenerationInputItem Include="Source
$(_Build)" />
      <_CodeGenerationInputItem Include="Contracts
$(_Contract)" />
      <_CodeGenerationInputItem Include="Endpoints
$(_Endpoint)" />
      <_CodeGenerationInputItem Include="References
$(_ServerCompilationReference)" />
      <_CodeGenerationInputItem Include="DatabaseSchemaProviderName
  $(DSP)" />
      <_CodeGenerationInputItem Include="ModelCollation
  $(ModelCollation)" />
      <_CodeGenerationInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_CodeGenerationInputItem Include="SqlReferencePath
$(_SqlReferencePath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_CodeGenerationInputFile)" Lines="@(_CodeGenerationInputItem)" Overwrite="True" />

    <Exec Command="$(DibixCliPath) compile &quot;$(_CodeGenerationInputFile)&quot;" />

    <!-- Shared assembly info -->
    <PropertyGroup>
      <Product Condition="'$(Product)' == ''">$(ProductName)</Product>
    </PropertyGroup>

    <ItemGroup>
      <AssemblyAttribute Include="AssemblyCompany" Condition="'$(Company)' != ''">
        <_Parameter1>$(Company)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyProduct" Condition="'$(Product)' != ''">
        <_Parameter1>$(Product)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyCopyright" Condition="'$(Copyright)' != ''">
        <_Parameter1>$(Copyright)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyInformationalVersion" Condition="'$(InformationalVersion)' != ''">
        <_Parameter1>$(InformationalVersion)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>

    <!-- Server assembly info & DLL generation -->
    <PropertyGroup>
      <_ServerAssemblyInfoFile>$(_ServerIntermediateFilePathNoExt)_AssemblyInfo.cs</_ServerAssemblyInfoFile>
      <_ServerFileVersion>$(FileVersion)</_ServerFileVersion>
    </PropertyGroup>

    <ItemGroup>
      <ServerCompilationSource Include="$(_ServerIntermediateFilePath)" />
      <ServerCompilationSource Include="$(_ServerAssemblyInfoFile)" />
      <ServerCompilationReference Include="$(DibixRuntimePath)" />
      <ServerCompilationReference Include="System.ComponentModel.DataAnnotations.dll" />
      <ServerCompilationReference Include="$(DibixToolsDirectory)Newtonsoft.Json.dll" />

      <ServerAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ServerAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(_ServerOutputName)</_Parameter1>
      </ServerAssemblyAttribute>
      <ServerAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(_ServerFileVersion)' != ''">
        <_Parameter1>$(_ServerFileVersion)</_Parameter1>
      </ServerAssemblyAttribute>
    </ItemGroup>

    <WriteCodeFragment Condition="'$(CompileArtifactsNetStandard)' == ''"
                       AssemblyAttributes="@(ServerAssemblyAttribute)"
                       Language="C#"
                       OutputFile="$(_ServerAssemblyInfoFile)" />

    <Csc Condition="'$(CompileArtifactsNetStandard)' == ''"
         DebugType="$(DebugType)"
         DefineConstants="$(DefineConstants)"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="$(IntermediateTargetFullFileName)"
         References="@(ServerCompilationReference)"
         Sources="@(ServerCompilationSource)"
         TargetType="$(OutputType)" />

    <PropertyGroup Condition="'$(CompileArtifactsNetStandard)' == 'true'">
      <_ServerIntermediateProjectFilePath>$(_ServerIntermediateFilePathNoExt).csproj</_ServerIntermediateProjectFilePath>
      <_ServerIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0</TargetFrameworks>
    
    <OutDir>.</OutDir>
    <EnableDefaultItems>false</EnableDefaultItems>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(SignAssembly)</SignAssembly>
    
    <Product>$(Product)</Product>
    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <FileVersion>$(_ServerFileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_ServerOutputName).cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Reflection" Version="4.1.0" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Dibix" HintPath="$(DibixRuntimeXplatPath)" Private="false" />
  </ItemGroup>

</Project>
]]>
      </_ServerIntermediateProjectFileContent>
    </PropertyGroup>

    <WriteLinesToFile Condition="'$(CompileArtifactsNetStandard)' == 'true'"
                      File="$(_ServerIntermediateProjectFilePath)"
                      Lines="$(_ServerIntermediateProjectFileContent)"
                      Overwrite="True" />

    <Exec Condition="'$(CompileArtifactsNetStandard)' == 'true'" Command="dotnet build $(_ServerIntermediateProjectFilePath) -c $(Configuration)" />

    <CallTarget Targets="CopyFilesToOutputDirectory" />


    <!-- Client assembly info & DLL generation -->
    <PropertyGroup Condition="'$(ClientOutputName)' != ''">
      <_ClientIntermediateAssemblyPath>$(IntermediateOutputPath)$(ClientOutputName).dll</_ClientIntermediateAssemblyPath>
      <_ClientIntermediateSymbolsPath>$(IntermediateOutputPath)$(ClientOutputName).pdb</_ClientIntermediateSymbolsPath>
      <_ClientAssemblyInfoFile>$(_ClientIntermediateFilePathNoExt)_AssemblyInfo.cs</_ClientAssemblyInfoFile>
      <_ClientFileVersion Condition="'$(ClientFileVersion)' != ''">$(ClientFileVersion)</_ClientFileVersion>
      <_ClientFileVersion Condition="'$(ClientFileVersion)' == ''" >$(FileVersion)</_ClientFileVersion>
    </PropertyGroup>

    <ItemGroup Condition="'$(ClientOutputName)' != ''">
      <ClientCompilationSource Include="$(_ClientIntermediateFilePath)" />
      <ClientCompilationSource Include="$(_ClientAssemblyInfoFile)" />

      <ClientAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ClientAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(ClientOutputName)</_Parameter1>
      </ClientAssemblyAttribute>
      <ClientAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(_ClientFileVersion)' != ''">
        <_Parameter1>$(_ClientFileVersion)</_Parameter1>
      </ClientAssemblyAttribute>
    </ItemGroup>

    <WriteCodeFragment AssemblyAttributes="@(ClientAssemblyAttribute)" Language="C#" OutputFile="$(_ClientAssemblyInfoFile)" Condition="'$(ClientOutputName)' != ''" />

    <Csc Condition="'$(ClientOutputName)' != ''"
         DebugType="$(DebugType)"
         DefineConstants="$(DefineConstants)"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="$(_ClientIntermediateAssemblyPath)"
         Sources="@(ClientCompilationSource)"
         TargetType="$(OutputType)" />

    <Copy SourceFiles="$(_ClientIntermediateAssemblyPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(ClientOutputName)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
    <Copy SourceFiles="$(_ClientIntermediateSymbolsPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(ClientOutputName)' != '' and '$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>


    <!-- Publish docs -->
    <ItemGroup>
      <_DocsFiles Include="$(AreaName).yml" />
      <_DocsFiles Include="$(AreaName).json" />

      <_DocsFiles>
        <SourcePath>$(IntermediateOutputPath)%(Filename)%(Extension)</SourcePath>
        <TargetPath Condition="$(DocsDir) != ''">$(DocsDir)$([System.String]::Copy('%(Extension)').TrimStart('.'))\%(Filename)%(Extension)</TargetPath>
      </_DocsFiles>

      <_DocsSources Include="@(_DocsFiles->'%(SourcePath)')" Condition="$(DocsDir) != '' AND Exists('%(SourcePath)')" />
      <_DocsTargets Include="@(_DocsSources->'%(TargetPath)')" />
    </ItemGroup>
    <Copy SourceFiles="@(_DocsSources)"
          DestinationFiles="@(_DocsTargets)" />
  </Target>

  <!-- Run SQL code analysis and compile database access artifacts -->
  <Target Name="SqlCore"
          BeforeTargets="GenerateSqlTargetFrameworkMoniker"
          DependsOnTargets="SetupSqlBuildInputs;SetupSqlBuildOutputs;ResolveArtifactReferences"
          Inputs="@(SqlCoreInput)"
          Outputs="@(SqlCoreOutput)">
    <!-- Configuration -->
    <PropertyGroup>
      <SqlNamingConventionPrefix Condition="'$(SqlNamingConventionPrefix)' == ''">dbx</SqlNamingConventionPrefix>

      <ProductName Condition="'$(ProductName)' == ''">$(RootNamespace.Split('.')[0])</ProductName>
      <AreaName Condition="$(AreaName) == '' and $(RootNamespace.Split('.').Length) > 1">$(RootNamespace.Split('.')[1])</AreaName>
      <Title Condition="$(Title) == ''">$(AreaName)</Title>
      <Description Condition="$(Description) == '' and $(Build_Repository_Uri) != '' and $(Build_SourceVersion) != '' and $(Build_SourceBranch) != ''">__Build version:__ $([System.DateTime]::Now.ToString(G))\r\n\r\n__Source version:__ [$(Build_SourceVersion)]($(Build_Repository_Uri)/commit/$(Build_SourceVersion)?refName=$(Build_SourceBranch))</Description>
      <LangVersion>latest</LangVersion>
      <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
      <CopyOutputSymbolsToOutputDirectory>true</CopyOutputSymbolsToOutputDirectory>

      <_ServerOutputName>$(AssemblyName)</_ServerOutputName>
      <_ServerIntermediateFilePathNoExt>$(IntermediateOutputPath)$(_ServerOutputName)</_ServerIntermediateFilePathNoExt>
      <_ServerIntermediateFilePath>$(_ServerIntermediateFilePathNoExt).cs</_ServerIntermediateFilePath>
      <_ClientIntermediateFilePathNoExt Condition="'$(ClientOutputName)' != ''">$(IntermediateOutputPath)$(ClientOutputName)</_ClientIntermediateFilePathNoExt>
      <_ClientIntermediateFilePath Condition="'$(ClientOutputName)' != ''">$(_ClientIntermediateFilePathNoExt).cs</_ClientIntermediateFilePath>
    </PropertyGroup>

    <ItemGroup>
      <SqlCodeAnalysisScriptItem Include="@(PreDeploy)" />
      <SqlCodeAnalysisScriptItem Include="@(PostDeploy)" />

      <ServerCompilationReference Include="@(ArtifactReference->'%(RelativeDir)%(Filename).dll')"
                                  Condition="Exists('%(RelativeDir)%(Filename).dll') AND !$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)%(Extension)', '^master|msdb(\.dacpac)$'))" />
    </ItemGroup>

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SqlCoreInputFile>$(IntermediateOutputPath)core.input</_SqlCoreInputFile>
    </PropertyGroup>

    <DumpItem Source="@(SqlCodeAnalysisScriptItem)">
      <Output TaskParameter="Result" PropertyName="_SqlCodeAnalysisScriptItem"/>
    </DumpItem>
    <DumpItem Source="@(Build)">
      <Output TaskParameter="Result" PropertyName="_Build"/>
    </DumpItem>
    <DumpItem Source="@(Contract)">
      <Output TaskParameter="Result" PropertyName="_Contract"/>
    </DumpItem>
    <DumpItem Source="@(Endpoint)">
      <Output TaskParameter="Result" PropertyName="_Endpoint"/>
    </DumpItem>
    <DumpItem Source="@(ServerCompilationReference)">
      <Output TaskParameter="Result" PropertyName="_ServerCompilationReference"/>
    </DumpItem>
    <DumpItem Source="@(SqlReferencePath)">
      <Output TaskParameter="Result" PropertyName="_SqlReferencePath"/>
    </DumpItem>

    <ItemGroup>
      <_SqlCoreInputItem Include="ProjectName
  $(MSBuildProjectName)" />
      <_SqlCoreInputItem Include="ProjectDirectory
  $(MSBuildProjectDirectory)" />
      <_SqlCoreInputItem Include="NamingConventionPrefix
  $(SqlNamingConventionPrefix)" />
      <_SqlCoreInputItem Include="StaticCodeAnalysisSucceededFile
  $(StaticCodeAnalysisSucceededFile)" />
      <_SqlCoreInputItem Include="ResultsFile
  $(ResultsFile)" />
      <_SqlCoreInputItem Include="ProductName
  $(ProductName)" />
      <_SqlCoreInputItem Include="AreaName
  $(AreaName)" />
      <_SqlCoreInputItem Include="Title
  $(Title)" />
      <_SqlCoreInputItem Include="Version
  $(FileVersion)" />
      <_SqlCoreInputItem Include="Description
  $(Description)" />
      <_SqlCoreInputItem Include="BaseUrl
  $(BaseUrl)" />
      <_SqlCoreInputItem Include="DefaultOutputFilePath
  $(_ServerIntermediateFilePath)" />
      <_SqlCoreInputItem Include="ClientOutputFilePath
  $(_ClientIntermediateFilePath)" />
      <_SqlCoreInputItem Include="ExternalAssemblyReferenceDir
  $(ExternalAssemblyReferenceDir)" />
      <_SqlCoreInputItem Include="BuildingInsideVisualStudio
  $(BuildingInsideVisualStudio)" />
      <_SqlCoreInputItem Include="Source
$(_Build)" />
      <_SqlCoreInputItem Include="ScriptSource
$(_SqlCodeAnalysisScriptItem)" />
      <_SqlCoreInputItem Include="Contracts
$(_Contract)" />
      <_SqlCoreInputItem Include="Endpoints
$(_Endpoint)" />
      <_SqlCoreInputItem Include="References
$(_ServerCompilationReference)" />
      <_SqlCoreInputItem Include="DatabaseSchemaProviderName
  $(DSP)" />
      <_SqlCoreInputItem Include="ModelCollation
  $(ModelCollation)" />
      <_SqlCoreInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_SqlCoreInputItem Include="SqlReferencePath
$(_SqlReferencePath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SqlCoreInputFile)" Lines="@(_SqlCoreInputItem)" Overwrite="True" />

    <PropertyGroup>
      <_SqlCoreCommand>$(DibixCliPath) core "$(_SqlCoreInputFile)"</_SqlCoreCommand>
      <_SqlCoreCommand Condition="'$(ResetSuppressions)' != ''">$(_SqlCoreCommand) -s $(ResetSuppressions)</_SqlCoreCommand>
    </PropertyGroup>

    <Exec Command="$(_SqlCoreCommand)" />

    <!-- Shared assembly info -->
    <PropertyGroup>
      <Product Condition="'$(Product)' == ''">$(ProductName)</Product>
    </PropertyGroup>

    <ItemGroup>
      <AssemblyAttribute Include="AssemblyCompany" Condition="'$(Company)' != ''">
        <_Parameter1>$(Company)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyProduct" Condition="'$(Product)' != ''">
        <_Parameter1>$(Product)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyCopyright" Condition="'$(Copyright)' != ''">
        <_Parameter1>$(Copyright)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyInformationalVersion" Condition="'$(InformationalVersion)' != ''">
        <_Parameter1>$(InformationalVersion)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>

    <!-- Server assembly info & DLL generation -->
    <PropertyGroup>
      <_ServerAssemblyInfoFile>$(_ServerIntermediateFilePathNoExt)_AssemblyInfo.cs</_ServerAssemblyInfoFile>
      <_ServerFileVersion>$(FileVersion)</_ServerFileVersion>
    </PropertyGroup>

    <ItemGroup>
      <ServerCompilationSource Include="$(_ServerIntermediateFilePath)" />
      <ServerCompilationSource Include="$(_ServerAssemblyInfoFile)" />
      <ServerCompilationReference Include="$(DibixRuntimePath)" />
      <ServerCompilationReference Include="System.ComponentModel.DataAnnotations.dll" />
      <ServerCompilationReference Include="$(DibixToolsDirectory)Newtonsoft.Json.dll" />

      <ServerAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ServerAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(_ServerOutputName)</_Parameter1>
      </ServerAssemblyAttribute>
      <ServerAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(_ServerFileVersion)' != ''">
        <_Parameter1>$(_ServerFileVersion)</_Parameter1>
      </ServerAssemblyAttribute>
    </ItemGroup>

    <WriteCodeFragment Condition="'$(CompileArtifactsNetStandard)' == ''"
                       AssemblyAttributes="@(ServerAssemblyAttribute)"
                       Language="C#"
                       OutputFile="$(_ServerAssemblyInfoFile)" />

    <Csc Condition="'$(CompileArtifactsNetStandard)' == ''"
         DebugType="$(DebugType)"
         DefineConstants="$(DefineConstants)"
         DisabledWarnings="nullable"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="$(IntermediateTargetFullFileName)"
         References="@(ServerCompilationReference)"
         Sources="@(ServerCompilationSource)"
         TargetType="$(OutputType)" />

    <PropertyGroup Condition="'$(CompileArtifactsNetStandard)' == 'true'">
      <_ServerIntermediateProjectFilePath>$(_ServerIntermediateFilePathNoExt).csproj</_ServerIntermediateProjectFilePath>
      <_ServerIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0</TargetFrameworks>
    
    <OutDir>.</OutDir>
    <EnableDefaultItems>false</EnableDefaultItems>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(SignAssembly)</SignAssembly>
    
    <Product>$(Product)</Product>
    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <FileVersion>$(_ServerFileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_ServerOutputName).cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Reflection" Version="4.1.0" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Dibix" HintPath="$(DibixRuntimeXplatPath)" Private="false" />
  </ItemGroup>

</Project>
]]>
      </_ServerIntermediateProjectFileContent>
    </PropertyGroup>

    <WriteLinesToFile Condition="'$(CompileArtifactsNetStandard)' == 'true'"
                      File="$(_ServerIntermediateProjectFilePath)"
                      Lines="$(_ServerIntermediateProjectFileContent)"
                      Overwrite="True" />

    <Exec Condition="'$(CompileArtifactsNetStandard)' == 'true'" Command="dotnet build $(_ServerIntermediateProjectFilePath) -c $(Configuration)" />

    <CallTarget Targets="CopyFilesToOutputDirectory" />


    <!-- Client assembly info & DLL generation -->
    <PropertyGroup Condition="'$(ClientOutputName)' != ''">
      <_ClientIntermediateAssemblyPath>$(IntermediateOutputPath)$(ClientOutputName).dll</_ClientIntermediateAssemblyPath>
      <_ClientIntermediateSymbolsPath>$(IntermediateOutputPath)$(ClientOutputName).pdb</_ClientIntermediateSymbolsPath>
      <_ClientAssemblyInfoFile>$(_ClientIntermediateFilePathNoExt)_AssemblyInfo.cs</_ClientAssemblyInfoFile>
      <_ClientFileVersion Condition="'$(ClientFileVersion)' != ''">$(ClientFileVersion)</_ClientFileVersion>
      <_ClientFileVersion Condition="'$(ClientFileVersion)' == ''" >$(FileVersion)</_ClientFileVersion>
    </PropertyGroup>

    <ItemGroup Condition="'$(ClientOutputName)' != ''">
      <ClientCompilationSource Include="$(_ClientIntermediateFilePath)" />
      <ClientCompilationSource Include="$(_ClientAssemblyInfoFile)" />

      <ClientAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ClientAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(ClientOutputName)</_Parameter1>
      </ClientAssemblyAttribute>
      <ClientAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(_ClientFileVersion)' != ''">
        <_Parameter1>$(_ClientFileVersion)</_Parameter1>
      </ClientAssemblyAttribute>
    </ItemGroup>

    <WriteCodeFragment AssemblyAttributes="@(ClientAssemblyAttribute)" Language="C#" OutputFile="$(_ClientAssemblyInfoFile)" Condition="'$(ClientOutputName)' != ''" />

    <Csc Condition="'$(ClientOutputName)' != ''"
         DebugType="$(DebugType)"
         DefineConstants="$(DefineConstants)"
         DisabledWarnings="nullable"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="$(_ClientIntermediateAssemblyPath)"
         Sources="@(ClientCompilationSource)"
         TargetType="$(OutputType)" />

    <Copy SourceFiles="$(_ClientIntermediateAssemblyPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(ClientOutputName)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
    <Copy SourceFiles="$(_ClientIntermediateSymbolsPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(ClientOutputName)' != '' and '$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>


    <!-- Publish docs -->
    <ItemGroup>
      <_DocsFiles Include="$(AreaName).yml" />
      <_DocsFiles Include="$(AreaName).json" />

      <_DocsFiles>
        <SourcePath>$(IntermediateOutputPath)%(Filename)%(Extension)</SourcePath>
        <TargetPath Condition="$(DocsDir) != ''">$(DocsDir)$([System.String]::Copy('%(Extension)').TrimStart('.'))\%(Filename)%(Extension)</TargetPath>
      </_DocsFiles>

      <_DocsSources Include="@(_DocsFiles->'%(SourcePath)')" Condition="$(DocsDir) != '' AND Exists('%(SourcePath)')" />
      <_DocsTargets Include="@(_DocsSources->'%(TargetPath)')" />
    </ItemGroup>
    <Copy SourceFiles="@(_DocsSources)"
          DestinationFiles="@(_DocsTargets)" />
  </Target>

  <!-- Append our own metadata to the produced dacpac file -->
  <Target Name="SignDacFile"
          AfterTargets="SqlBuild"
          DependsOnTargets="SetupSqlBuildInputs;SetupSqlBuildOutputs">

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SignDacInputFile>$(IntermediateOutputPath)sign.input</_SignDacInputFile>
    </PropertyGroup>

    <ItemGroup>
      <_SignDacFileInputItem Include="DacFilePath
  $(SqlTargetPath)" />
      <_SignDacFileInputItem Include="IsEmbedded
  $(IsEmbedded)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SignDacInputFile)" Lines="@(_SignDacFileInputItem)" Overwrite="True" />

    <Exec Command="$(DibixCliPath) sign &quot;$(_SignDacInputFile)&quot;" />
  </Target>

</Project>