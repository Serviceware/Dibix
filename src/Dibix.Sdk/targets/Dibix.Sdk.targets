<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    To make sure some global properties are overriden, we have to put them here instead of the .props file.
    This is because NuGet imports the .props file at the beginning of the project and the .targets file at the end.
  -->
  <PropertyGroup>
    <_DibixName>Dibix</_DibixName>
    <_DibixHttpClientName>Dibix.Http.Client</_DibixHttpClientName>
    <_DibixHttpServerName>Dibix.Http.Server</_DibixHttpServerName>

    <DibixAssemblyPath>$(DibixRuntimeDirectory)$(_DibixName).dll</DibixAssemblyPath>
    <DibixHttpClientAssemblyPath>$(DibixRuntimeDirectory)$(_DibixHttpClientName).dll</DibixHttpClientAssemblyPath>
    <DibixHttpServerAssemblyPath>$(DibixRuntimeDirectory)$(_DibixHttpServerName).dll</DibixHttpServerAssemblyPath>

    <AreaName Condition="$(AreaName) == '' and $(RootNamespace.Split('.').Length) > 1">$(RootNamespace.Split('.')[1])</AreaName>

    <!-- We have our own CA target, which also executes the native SqlStaticCodeAnalysis -->
    <RunSqlCodeAnalysis>false</RunSqlCodeAnalysis>
    <RunSqlCodeAnalysisOnce>false</RunSqlCodeAnalysisOnce>

    <ProducePackage Condition="'$(ProducePackage)' == '' and '$(IsEmbedded)' == 'false'">True</ProducePackage>
    <ProducePackage Condition="'$(ProducePackage)' == '' and '$(IsEmbedded)' == 'true'">False</ProducePackage>
    <!--
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;
      CoreCompile;
      GenerateSerializationAssemblies;
      SqlBuild;
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>
    -->
    <!-- Exclude CoreCompile, because we generate our own assembly -->
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;
      GenerateSerializationAssemblies;
    </BuildDependsOn>

    <!-- Add our own compilation target here -->
    <BuildDependsOn>$(BuildDependsOn);SqlCore</BuildDependsOn>

    <!-- Exclude SqlBuild to increase build performance, if no dacpac should be produced -->
    <BuildDependsOn Condition="'$(ProducePackage)' == 'true'">$(BuildDependsOn);SqlBuild;</BuildDependsOn>

    <BuildDependsOn>
      $(BuildDependsOn);
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>

  <!-- 
    Unfortunately the BuildDependsOn property cannot be overriden in the NuGet .targets file, because of the order how these imports happen.
    Currently the order is as follows:
    - Import SSDT targets
      - Import C# targets
        - Import NuGet targets
          - Import Dibix NuGet targets (we can't override properties here)
    - SSDT sets properties we want to override

    Therefore these need to be overriden by adding a custom import after the SSDT targets.
    This can only be done by the caller, not by this NuGet package.
  -->
  <PropertyGroup>
    <DibixBuildDependsOn>$(BuildDependsOn)</DibixBuildDependsOn>
  </PropertyGroup>

  <!-- Utility to dump item including metadata -->
  <UsingTask TaskName="DumpItem" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          StringBuilder sb = new StringBuilder();
          for (int i = 0; i < Source.Length; i++)
          {
              ITaskItem item = Source[i];
              
              sb.Append("  ")
                .Append(item);
              
              foreach (string metadataName in item.MetadataNames)
              {
                  sb.AppendLine()
                    .Append("    ")
                    .Append(metadataName)
                    .Append(' ')
                    .Append(item.GetMetadata(metadataName));
              }
              
              if (i + 1 < Source.Length)
                sb.AppendLine();
          }
          Result = sb.ToString();
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Define inputs and outputs so the targets know when they need to be rebuilt -->
  <Target Name="SetupSqlBuildInputs" DependsOnTargets="_SetupSqlBuildInputs">
    <PropertyGroup>
      <_DibixConfigurationPath>$(DibixConfigurationDirectory)\dibix.json</_DibixConfigurationPath>
      <_ServerOutputName>$(AssemblyName)</_ServerOutputName>
      <_ServerIntermediatePathNoExt>$(IntermediateOutputPath)$(_ServerOutputName)</_ServerIntermediatePathNoExt>
      <_ServerIntermediateBinaryPath>$(_ServerIntermediatePathNoExt).dll</_ServerIntermediateBinaryPath>
    </PropertyGroup>

    <ItemGroup>
      <!-- Changed inputs that are relevant for all build targets -->

      <!-- Some SSDT entries have to be added manually, since they are incorrect -->
      <!-- For example: -->
      <!--<__SqlBuildInputItem Include="@(MSBuildAllProjects)" />-->
      <SqlBuildInputItem Include="$(MSBuildAllProjects)" />
      <SqlBuildInputItem Include="$(MSBuildProjectFullPath)" />

      <!-- Import some inputs from SSDT -->
      <_SqlTargetInput Include="@(SqlBuildInputItem)" />

      <!-- SDK changes -->
      <_SqlTargetInput Include="$(DibixCliPath)" />
      <_SqlTargetInput Include="$(DibixSdkPath)" />
      <!--
      <_SqlTargetInput Include="$(DibixAssemblyPath)" />
      <_SqlTargetInput Include="$(DibixHttpServerAssemblyPath)" />
      <_SqlTargetInput Include="$(DibixHttpClientAssemblyPath)" />
      -->

      <!-- Target specific inputs -->
      <!-- SqlCodeAnalysis -->
      <SqlCodeAnalysisInput Include="@(_SqlTargetInput)" />

      <!-- CompileArtifacts -->
      <CompileArtifactsInput Include="@(_SqlTargetInput)" />
      <CompileArtifactsInput Include="@(Contract)" />
      <CompileArtifactsInput Include="@(Endpoint)" />

      <!-- SqlCore -->
      <SqlCoreInput Include="@(_SqlTargetInput)" />
      <SqlCoreInput Include="@(Contract)" />
      <SqlCoreInput Include="@(Endpoint)" />
      <SqlCoreInput Include="$(_DibixConfigurationPath)" />

      <!-- CreatePackageInput -->
      <CreatePackageInput Include="$(_ServerIntermediateBinaryPath)" />
    </ItemGroup>
  </Target>
  <Target Name="SetupSqlBuildOutputs" BeforeTargets="_SetupSqlBuildOutputs">
    <PropertyGroup>
      <_HasEndpoints Condition="@(Endpoint->Count()) > 0">True</_HasEndpoints>
      <ClientOutputName Condition="'$(ClientOutputName)' == '' and '$(AreaName)' != '' and '$(_HasEndpoints)' == 'true'">$(AreaName).Client</ClientOutputName>
      <_GenerateClient Condition="'$(ClientOutputName)' != ''">True</_GenerateClient>
      <_ClientIntermediatePathNoExt Condition="'$(_GenerateClient)' == 'true'">$(IntermediateOutputPath)$(ClientOutputName)</_ClientIntermediatePathNoExt>
      <_ClientIntermediateBinaryPath Condition="'$(_GenerateClient)' == 'true'">$(_ClientIntermediatePathNoExt).dll</_ClientIntermediateBinaryPath>

      <_ProductArtifactPackage Condition="'$(_HasEndpoints)' == 'true'">True</_ProductArtifactPackage>
      <_ArtifactPackageName Condition="'$(_ProductArtifactPackage)' == 'true'">$(AreaName).dbx</_ArtifactPackageName>
      <_IntermediateArtifactPackagePath Condition="'$(_ProductArtifactPackage)' == 'true'">$(IntermediateOutputPath)$(_ArtifactPackageName)</_IntermediateArtifactPackagePath>
    </PropertyGroup>

    <ItemGroup>
      <!-- SqlCore -->
      <SqlCoreOutput Include="$(_ServerIntermediateBinaryPath)" /> <!-- .dll -->
      <SqlCoreOutput Include="$(_ClientIntermediateBinaryPath)" /> <!-- .dll -->

      <!-- CreatePackage -->
      <CreatePackageOutput Include="$(_IntermediateArtifactPackagePath)" /> <!-- .dbx -->
    </ItemGroup>
  </Target>

  <Target Name="SetupCompilationArtifacts" BeforeTargets="SetupSqlBuildInputs">
    <ItemGroup>
      <Contract Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Contracts\\')) and %(Extension) == '.json'" />
      <Endpoint Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Endpoints\\')) and %(Extension) == '.json'" />
    </ItemGroup>
  </Target>

  <!-- Run SQL code analysis and compile database access artifacts -->
  <Target Name="SqlCore"
          DependsOnTargets="SetupSqlBuildInputs;SetupSqlBuildOutputs;ResolveArtifactReferences"
          Inputs="@(SqlCoreInput)"
          Outputs="@(SqlCoreOutput)">
    <!-- Configuration -->
    <PropertyGroup>
      <ProductName Condition="'$(ProductName)' == ''">$(RootNamespace.Split('.')[0])</ProductName>
      <Title Condition="$(Title) == ''">$(AreaName)</Title>
      <Description Condition="$(Description) == '' and $(Build_Repository_Uri) != '' and $(Build_SourceVersion) != '' and $(Build_SourceBranch) != ''">__Build version:__ $([System.DateTime]::Now.ToString(G))\r\n\r\n__Source version:__ [$(Build_SourceVersion)]($(Build_Repository_Uri)/commit/$(Build_SourceVersion)?refName=$(Build_SourceBranch))</Description>
      <LangVersion>latest</LangVersion>
      <!--<ExternalAssemblyReferenceDir Condition="'$(ExternalAssemblyReferenceDir)' == ''">$(TargetDir)</ExternalAssemblyReferenceDir>-->

      <_MSBuildBinPath>$(MSBuildToolsPath)\msbuild.exe</_MSBuildBinPath>
      <_SignAssembly>$(SignAssembly)</_SignAssembly>
      <_SignAssembly Condition="'$(_SignAssembly)' == '' and '$(AssemblyOriginatorKeyFile)' != ''">true</_SignAssembly>
      <_ServerIntermediateCodePath>$(_ServerIntermediatePathNoExt).cs</_ServerIntermediateCodePath>
      <_ClientIntermediateCodePath Condition="'$(_GenerateClient)' == 'true'">$(_ClientIntermediatePathNoExt).cs</_ClientIntermediateCodePath>
    </PropertyGroup>

    <ItemGroup>
      <SqlCodeAnalysisScriptItem Include="@(PreDeploy)" />
      <SqlCodeAnalysisScriptItem Include="@(PostDeploy)" />

      <ServerCompilationArtifactReference Include="@(ArtifactReference->'%(RelativeDir)%(Filename).dll')"
                                          Condition="Exists('%(RelativeDir)%(Filename).dll') AND !$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)%(Extension)', '^master|msdb(\.dacpac)$'))" />
    </ItemGroup>

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SqlCoreInputFile>$(IntermediateOutputPath)core.input</_SqlCoreInputFile>
    </PropertyGroup>

    <DumpItem Source="@(SqlCodeAnalysisScriptItem)">
      <Output TaskParameter="Result" PropertyName="_SqlCodeAnalysisScriptItem" />
    </DumpItem>
    <DumpItem Source="@(Build)">
      <Output TaskParameter="Result" PropertyName="_Build" />
    </DumpItem>
    <DumpItem Source="@(Contract)">
      <Output TaskParameter="Result" PropertyName="_Contract" />
    </DumpItem>
    <DumpItem Source="@(Endpoint)">
      <Output TaskParameter="Result" PropertyName="_Endpoint" />
    </DumpItem>
    <DumpItem Source="@(ServerCompilationArtifactReference)">
      <Output TaskParameter="Result" PropertyName="_ServerCompilationArtifactReference" />
    </DumpItem>
    <DumpItem Source="@(SqlReferencePath)">
      <Output TaskParameter="Result" PropertyName="_SqlReferencePath" />
    </DumpItem>
    <DumpItem Source="@(DefaultSecurityScheme)">
      <Output TaskParameter="Result" PropertyName="_DefaultSecurityScheme" />
    </DumpItem>

    <ItemGroup>
      <_SqlCoreInputItem Include="ProjectName
  $(MSBuildProjectName)" />
      <_SqlCoreInputItem Include="ProjectDirectory
  $(MSBuildProjectDirectory)" />
      <_SqlCoreInputItem Include="ConfigurationFilePath
  $(_DibixConfigurationPath)" />
      <_SqlCoreInputItem Include="StaticCodeAnalysisSucceededFile
  $(StaticCodeAnalysisSucceededFile)" />
      <_SqlCoreInputItem Include="ResultsFile
  $(ResultsFile)" />
      <_SqlCoreInputItem Include="ProductName
  $(ProductName)" />
      <_SqlCoreInputItem Include="AreaName
  $(AreaName)" />
      <_SqlCoreInputItem Include="Title
  $(Title)" />
      <_SqlCoreInputItem Include="Version
  $(FileVersion)" />
      <_SqlCoreInputItem Include="Description
  $(Description)" />
      <_SqlCoreInputItem Include="DefaultOutputFilePath
  $(_ServerIntermediateCodePath)" />
      <_SqlCoreInputItem Include="ClientOutputFilePath
  $(_ClientIntermediateCodePath)" />
      <_SqlCoreInputItem Include="ExternalAssemblyReferenceDir
  $(ExternalAssemblyReferenceDir)" />
      <_SqlCoreInputItem Include="BuildingInsideVisualStudio
  $(BuildingInsideVisualStudio)" />
      <_SqlCoreInputItem Include="Source
$(_Build)" />
      <_SqlCoreInputItem Include="ScriptSource
$(_SqlCodeAnalysisScriptItem)" />
      <_SqlCoreInputItem Include="Contracts
$(_Contract)" />
      <_SqlCoreInputItem Include="Endpoints
$(_Endpoint)" />
      <_SqlCoreInputItem Include="References
$(_ServerCompilationArtifactReference)" />
      <_SqlCoreInputItem Include="DefaultSecuritySchemes
$(_DefaultSecurityScheme)" />
      <_SqlCoreInputItem Include="DatabaseSchemaProviderName
  $(DSP)" />
      <_SqlCoreInputItem Include="ModelCollation
  $(ModelCollation)" />
      <_SqlCoreInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_SqlCoreInputItem Include="SqlReferencePath
$(_SqlReferencePath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SqlCoreInputFile)" Lines="@(_SqlCoreInputItem)" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_SqlCoreInputFile)" />
    </ItemGroup>

    <PropertyGroup>
      <_SqlCoreCommand>$(DibixCliPath) core "$(_SqlCoreInputFile)"</_SqlCoreCommand>
      <_SqlCoreCommand Condition="'$(ResetSuppressions)' != ''">$(_SqlCoreCommand) -s $(ResetSuppressions)</_SqlCoreCommand>
    </PropertyGroup>

    <Exec Command="$(_SqlCoreCommand)" />

    <ItemGroup Condition="'$(_HasEndpoints)' == 'true'">
      <_DocsFiles Include="$(AreaName).yml" />
      <_DocsFiles Include="$(AreaName).json" />
    </ItemGroup>

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)nuget.output" />
      <FileWrites Include="$(_ServerIntermediateCodePath)" />
      <FileWrites Include="$(_ClientIntermediateCodePath)" />
      <FileWrites Include="@(_DocsFiles->'$(IntermediateOutputPath)%(Identity)')" />
    </ItemGroup>

    <!-- Shared assembly info -->
    <PropertyGroup>
      <Product Condition="'$(Product)' == ''">$(ProductName)</Product>
    </PropertyGroup>

    <ItemGroup>
      <AssemblyAttribute Include="AssemblyCompany" Condition="'$(Company)' != ''">
        <_Parameter1>$(Company)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyProduct" Condition="'$(Product)' != ''">
        <_Parameter1>$(Product)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyCopyright" Condition="'$(Copyright)' != ''">
        <_Parameter1>$(Copyright)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyInformationalVersion" Condition="'$(InformationalVersion)' != ''">
        <_Parameter1>$(InformationalVersion)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyConfiguration">
        <_Parameter1>$(Configuration)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>

    <!-- Server assembly info & DLL generation -->
    <PropertyGroup>
      <_ServerAssemblyInfoFile>$(_ServerIntermediatePathNoExt)_AssemblyInfo.cs</_ServerAssemblyInfoFile>
      <_ServerFileVersion>$(FileVersion)</_ServerFileVersion>
      <_ServerTargetFrameworkNetFx>net451</_ServerTargetFrameworkNetFx>
      <_ServerTargetFrameworkNetStandard>netstandard2.0</_ServerTargetFrameworkNetStandard>
      <_ServerTargetFramework>$(_ServerTargetFrameworkNetFx)</_ServerTargetFramework>
      <_ServerTargetFramework Condition="'$(CompileArtifactsNetStandard)' == 'true'">$(_ServerTargetFrameworkNetStandard)</_ServerTargetFramework>
    </PropertyGroup>

    <ItemGroup>
      <ServerCompilationSource Include="$(_ServerIntermediateCodePath)" />
      <ServerCompilationSource Include="$(_ServerAssemblyInfoFile)" />
      <ServerCompilationReference Include="@(ServerCompilationArtifactReference)" />
      <!--
      <ServerCompilationReference Condition="'$(CompileArtifactsNetStandard)' != 'true'" Include="$(DibixAssemblyPath)" />
      <ServerCompilationReference Condition="'$(CompileArtifactsNetStandard)' != 'true'" Include="$(DibixHttpServerAssemblyPath)" />
      <ServerCompilationReference Condition="'$(CompileArtifactsNetStandard)' != 'true'" Include="System.ComponentModel.DataAnnotations.dll" />
      <ServerCompilationReference Condition="'$(CompileArtifactsNetStandard)' != 'true'" Include="$(DibixToolsDirectory)Newtonsoft.Json.dll" />
      -->

      <ServerAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ServerAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(_ServerOutputName)</_Parameter1>
      </ServerAssemblyAttribute>
      <ServerAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(_ServerFileVersion)' != ''">
        <_Parameter1>$(_ServerFileVersion)</_Parameter1>
      </ServerAssemblyAttribute>
    </ItemGroup>

    <!--
    <WriteCodeFragment Condition="'$(CompileArtifactsNetStandard)' != 'true'"
                       AssemblyAttributes="@(ServerAssemblyAttribute)"
                       Language="C#"
                       OutputFile="$(_ServerAssemblyInfoFile)" />

    <Csc Condition="'$(CompileArtifactsNetStandard)' != 'true'"
         DebugType="$(DebugType)"
         DefineConstants="$(DefineConstants)"
         DisabledWarnings="nullable"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="$(IntermediateTargetFullFileName)"
         References="@(ServerCompilationReference)"
         Sources="@(ServerCompilationSource)"
         TargetType="$(OutputType)" />
    -->

    <!--<ItemGroup Condition="'$(CompileArtifactsNetStandard)' == 'true'">-->
    <ItemGroup>
      <_ServerCompilationReferenceItem Include="@(ServerCompilationReference->'&lt;Reference Include=&quot;%(Filename)&quot; HintPath=&quot;%(FullPath)&quot; Private=&quot;False&quot; /&gt;')" />
    </ItemGroup>

    <!--<PropertyGroup Condition="'$(CompileArtifactsNetStandard)' == 'true'">-->
    <PropertyGroup>
      <_ServerIntermediateProjectFilePath>$(_ServerIntermediatePathNoExt).csproj</_ServerIntermediateProjectFilePath>
      <_ServerIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(_ServerTargetFramework)</TargetFramework>

    <OutDir>.</OutDir>
    <EnableDefaultItems>false</EnableDefaultItems>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(_SignAssembly)</SignAssembly>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <NoWarn>nullable</NoWarn>
    <EmbedAllSources>true</EmbedAllSources>
    <DebugType>embedded</DebugType>

    <Product>$(Product)</Product>
    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <FileVersion>$(_ServerFileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_ServerOutputName).cs" />
  </ItemGroup>

  <ItemGroup>
@(_ServerCompilationReferenceItem)
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="$(_DibixName)" Version="$(DibixSdkVersion)" ExcludeAssets="runtime" />
    <PackageReference Include="$(_DibixHttpServerName)" Version="$(DibixSdkVersion)" ExcludeAssets="runtime" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" ExcludeAssets="runtime" />
    <!--
    <PackageReference Include="System.Reflection" Version="4.3.0" ExcludeAssets="runtime" />
    -->
  </ItemGroup>

  <ItemGroup Condition="'%24(TargetFramework)' == '$(_ServerTargetFrameworkNetStandard)'">
    <PackageReference Include="System.ComponentModel.Annotations" Version="5.0.0" ExcludeAssets="runtime" />
  </ItemGroup>

  <ItemGroup Condition="'%24(TargetFramework)' == '$(_ServerTargetFrameworkNetFx)'">
    <Reference Include="System.ComponentModel.DataAnnotations" />
  </ItemGroup>

  <Target Name="DumpResolvedDibixReferencePaths" AfterTargets="ResolvePackageAssets">
    <ItemGroup>
      <_DibixReferencePath Include="%40(ResolvedCompileFileDefinitions)" Condition="'%25(NuGetPackageId)' == 'Dibix'" />
      <_DibixReferencePath Include="%40(ResolvedCompileFileDefinitions)" Condition="'%25(NuGetPackageId)' == 'Dibix.Http.Server'" />
    </ItemGroup>

    <WriteLinesToFile File="%24(MSBuildThisFileDirectory)nuget.output" Lines="%40(_DibixReferencePath)" Overwrite="True" />
  </Target>

</Project>
]]>
      </_ServerIntermediateProjectFileContent>
    </PropertyGroup>

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)nuget.output" />
    </ItemGroup>

    <!--<WriteLinesToFile Condition="'$(CompileArtifactsNetStandard)' == 'true'"-->
    <WriteLinesToFile File="$(_ServerIntermediateProjectFilePath)"
                      Lines="$(_ServerIntermediateProjectFileContent)"
                      Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_ServerIntermediateProjectFilePath)" />
    </ItemGroup>

    <!-- Override Directory.Build props/targets to ensure the project configuration is isolated -->
    <!-- For example, a central package reference of Dibix runtime might interfere here -->
    <!--<WriteLinesToFile Condition="'$(CompileArtifactsNetStandard)' == 'true'"-->
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.props" Lines="&lt;Project /&gt;" Overwrite="True" />
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.targets" Lines="&lt;Project /&gt;" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.props" />
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.targets" />
    </ItemGroup>

    <!--<Exec Condition="'$(CompileArtifactsNetStandard)' == 'true'"-->
    <!--<Exec Command="dotnet build $(_ServerIntermediateProjectFilePath) -c $(Configuration)" />-->
    <Exec Command="&quot;$(_MSBuildBinPath)&quot; &quot;$(_ServerIntermediateProjectFilePath)&quot; -restore -p:Configuration=$(Configuration) -verbosity:minimal" />
    <!--
    <MSBuild Projects="$(_ServerIntermediateProjectFilePath)" Targets="Restore" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="$(_ServerIntermediateProjectFilePath)" Targets="Build"   Properties="Configuration=$(Configuration)" />
    -->


    <!-- Client assembly info & DLL generation -->
    <PropertyGroup Condition="'$(_GenerateClient)' == 'true'">
      <_ClientIntermediateAssemblyPath>$(IntermediateOutputPath)$(ClientOutputName).dll</_ClientIntermediateAssemblyPath>
      <_ClientIntermediateSymbolsPath>$(IntermediateOutputPath)$(ClientOutputName).pdb</_ClientIntermediateSymbolsPath>
      <_ClientAssemblyInfoFile>$(_ClientIntermediatePathNoExt)_AssemblyInfo.cs</_ClientAssemblyInfoFile>
      <_ClientFileVersion Condition="'$(ClientFileVersion)' != ''">$(ClientFileVersion)</_ClientFileVersion>
      <_ClientFileVersion Condition="'$(ClientFileVersion)' == ''" >$(FileVersion)</_ClientFileVersion>
      <_ClientTargetFrameworkNetFx>net46</_ClientTargetFrameworkNetFx>
      <_ClientTargetFrameworkNetStandard>netstandard2.0</_ClientTargetFrameworkNetStandard>
      <_ClientTargetFramework>$(_ClientTargetFrameworkNetFx)</_ClientTargetFramework>
      <_ClientTargetFramework Condition="'$(CompileArtifactsNetStandard)' == 'true'">$(_ClientTargetFrameworkNetStandard)</_ClientTargetFramework>
    </PropertyGroup>

    <ItemGroup Condition="'$(_GenerateClient)' == 'true'">
      <ClientCompilationSource Include="$(_ClientIntermediateCodePath)" />
      <ClientCompilationSource Include="$(_ClientAssemblyInfoFile)" />
      <!--
      <ClientCompilationReference Include="$(DibixHttpClientAssemblyPath)" />
      <ClientCompilationReference Include="System.Net.Http.dll" />
      <ClientCompilationReference Include="$(DibixToolsDirectory)System.Net.Http.Formatting.dll" />
      -->
      <ClientAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ClientAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(ClientOutputName)</_Parameter1>
      </ClientAssemblyAttribute>
      <ClientAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(_ClientFileVersion)' != ''">
        <_Parameter1>$(_ClientFileVersion)</_Parameter1>
      </ClientAssemblyAttribute>
    </ItemGroup>

    <!--
    <WriteCodeFragment AssemblyAttributes="@(ClientAssemblyAttribute)" Language="C#" OutputFile="$(_ClientAssemblyInfoFile)" Condition="'$(_GenerateClient)' == 'true'" />

    <Csc Condition="'$(_GenerateClient)' == 'true'"
         DebugType="$(DebugType)"
         DefineConstants="$(DefineConstants)"
         DisabledWarnings="nullable"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="$(_ClientIntermediateAssemblyPath)"
         References="@(ClientCompilationReference)"
         Sources="@(ClientCompilationSource)"
         TargetType="$(OutputType)" />
    -->

    <!--<ItemGroup Condition="'$(CompileArtifactsNetStandard)' == 'true'">-->
    <ItemGroup Condition="'$(_GenerateClient)' == 'true'">
      <_ClientCompilationReferenceItem Include="@(ClientCompilationReference->'&lt;Reference Include=&quot;%(Filename)&quot; HintPath=&quot;%(FullPath)&quot; Private=&quot;False&quot; /&gt;')" />
    </ItemGroup>

    <!--<PropertyGroup Condition="'$(CompileArtifactsNetStandard)' == 'true'">-->
    <PropertyGroup Condition="'$(_GenerateClient)' == 'true'">
      <_ClientIntermediateProjectFilePath>$(_ClientIntermediatePathNoExt).csproj</_ClientIntermediateProjectFilePath>
      <_ClientIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(_ClientTargetFramework)</TargetFramework>
    
    <OutDir>.</OutDir>
    <EnableDefaultItems>false</EnableDefaultItems>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(_SignAssembly)</SignAssembly>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <NoWarn>nullable</NoWarn>
    
    <Product>$(Product)</Product>
    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <FileVersion>$(_ClientFileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(ClientOutputName).cs" />
  </ItemGroup>

  <ItemGroup>
@(_ClientCompilationReferenceItem)
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="$(_DibixHttpClientName)" Version="$(DibixSdkVersion)" ExcludeAssets="runtime" />
    <PackageReference Include="Microsoft.AspNet.WebApi.Client" Version="5.2.3" ExcludeAssets="runtime" />
  </ItemGroup>

  <ItemGroup Condition="'%24(TargetFramework)' == '$(_ClientTargetFrameworkNetFx)'">
    <Reference Include="System.Net.Http" />
  </ItemGroup>

</Project>
]]>
      </_ClientIntermediateProjectFileContent>
    </PropertyGroup>

    <!--<WriteLinesToFile Condition="'$(CompileArtifactsNetStandard)' == 'true'"-->
    <WriteLinesToFile Condition="'$(_GenerateClient)' == 'true'"
                      File="$(_ClientIntermediateProjectFilePath)"
                      Lines="$(_ClientIntermediateProjectFileContent)"
                      Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_ClientIntermediateProjectFilePath)" />
    </ItemGroup>

    <!-- Override Directory.Build props/targets to ensure the project configuration is isolated -->
    <!-- For example, a central package reference of Dibix runtime might interfere here -->
    <!--<WriteLinesToFile Condition="'$(CompileArtifactsNetStandard)' == 'true'"-->
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.props" Lines="&lt;Project /&gt;" Overwrite="True" Condition="'$(_GenerateClient)' == 'true'" />
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.targets" Lines="&lt;Project /&gt;" Overwrite="True" Condition="'$(_GenerateClient)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.props" />
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.targets" />
    </ItemGroup>

    <!--<Exec Condition="'$(CompileArtifactsNetStandard)' == 'true'"-->
    <!--
    <Exec Condition="'$(_GenerateClient)' == 'true'"
          Command="dotnet build $(_ClientIntermediateProjectFilePath) -c $(Configuration)" />
    -->
    <Exec Condition="'$(_GenerateClient)' == 'true'"
          Command="&quot;$(_MSBuildBinPath)&quot; &quot;$(_ClientIntermediateProjectFilePath)&quot; -restore -p:Configuration=$(Configuration) -verbosity:minimal" />
    <!--
    <MSBuild Projects="$(_ClientIntermediateProjectFilePath)" Targets="Restore" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="$(_ClientIntermediateProjectFilePath)" Targets="Build"   Properties="Configuration=$(Configuration)" />
    -->

    <ItemGroup>
      <FileWrites Include="$(_ClientIntermediateAssemblyPath)" />
      <FileWrites Include="$(_ClientIntermediateSymbolsPath)" />
    </ItemGroup>


    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)obj\**" />
    </ItemGroup>
  </Target>


  <!-- 
    It is important to have this as a separate target that will always be executed.
    Previously this was done within the SqlCore target, but if that is skipped,
    the necessary FileWrites are not added, and the IncrementalClean target 
    will delete the outputs after the first build.
  -->
  <Target Name="CopyArtifactsToOuputDirectory"
          AfterTargets="CopyFilesToOutputDirectory"
          DependsOnTargets="SqlCore;CreatePackage;CopyFilesToOutputDirectory">

    <PropertyGroup Condition="'$(_GenerateClient)' == 'true'">
      <_ClientPathNoExt>$(TargetDir)$(ClientOutputName)</_ClientPathNoExt>
      <ClientTargetPath>$(_ClientPathNoExt).dll</ClientTargetPath>
      <ClientOutputSymbolsPath>$(_ClientPathNoExt).pdb</ClientOutputSymbolsPath>
    </PropertyGroup>

    <PropertyGroup>
      <ArtifactPackagePath Condition="'$(_ProductArtifactPackage)' == 'true'">$(TargetDir)$(_ArtifactPackageName)</ArtifactPackagePath>
    </PropertyGroup>

    <ItemGroup>
      <Docs Include="@(_DocsFiles->'$(OutDir)\%(Identity)')" />
    </ItemGroup>

    <!-- Copy generated client assembly (.dll) -->
    <Copy SourceFiles="$(_ClientIntermediateAssemblyPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_GenerateClient)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Copy the debug information file (.pdb) of the generated client assembly -->
    <Copy SourceFiles="$(_ClientIntermediateSymbolsPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_GenerateClient)' == 'true' and '$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Copy the artifact package (.dbx) -->
    <Copy SourceFiles="$(_IntermediateArtifactPackagePath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Publish docs -->
    <Copy SourceFiles="@(_DocsFiles->'$(IntermediateOutputPath)\%(Identity)')"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>
  </Target>


  <!-- Create artifacts package -->
  <Target Name="CreatePackage"
          DependsOnTargets="SetupSqlBuildInputs;SetupSqlBuildOutputs;SqlCore"
          Inputs="@(CreatePackageInput)"
          Outputs="@(CreatePackageOutput)"
          Condition="'$(_ProductArtifactPackage)' == 'true'">

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_CreatePackageInputFile>$(IntermediateOutputPath)package.input</_CreatePackageInputFile>
    </PropertyGroup>

    <ItemGroup>
      <_CreatePackageInputItem Include="ArtifactName
  $(AreaName)" />
      <_CreatePackageInputItem Include="OutputDirectory
  $(IntermediateOutputPath)" />
      <_CreatePackageInputItem Include="CompiledArtifactPath
  $(_ServerIntermediateBinaryPath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_CreatePackageInputFile)" Lines="@(_CreatePackageInputItem)" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_CreatePackageInputFile)" />
    </ItemGroup>

    <Exec Command="$(DibixCliPath) pack &quot;$(_CreatePackageInputFile)&quot;" />

    <ItemGroup>
      <FileWrites Include="$(_IntermediateArtifactPackagePath)" />
    </ItemGroup>
  </Target>


  <!-- Append our own metadata to the produced dacpac file -->
  <Target Name="SignDacFile"
          AfterTargets="SqlBuild"
          DependsOnTargets="ResolveArtifactReferences;SqlBuild">

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SignDacInputFile>$(IntermediateOutputPath)sign.input</_SignDacInputFile>
      <LockRetryCount Condition="'$(LockRetryCount)' == ''">10</LockRetryCount>
    </PropertyGroup>

    <ItemGroup>
      <_SignDacFileInputItem Include="DacFilePath
  $(SqlTargetPath)" />
      <_SignDacFileInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_SignDacFileInputItem Include="LockRetryCount
  $(LockRetryCount)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SignDacInputFile)" Lines="@(_SignDacFileInputItem)" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_SignDacInputFile)" />
    </ItemGroup>

    <Exec Command="$(DibixCliPath) sign &quot;$(_SignDacInputFile)&quot;" />
  </Target>


  <!-- Make resolved Dibix NuGet reference paths available for other targets -->
  <Target Name="PublishDibixReferenceAssemblies">
    <ReadLinesFromFile File="$(IntermediateOutputPath)nuget.output">
      <Output TaskParameter="Lines" ItemName="DibixReferenceAssemblyPath" />
    </ReadLinesFromFile>
  </Target>

</Project>