<!--EXTERNAL_PROPERTIES: IsEmbedded;DibixConfigurationDirectory;IntermediateTargetFullFileName;IntermediateSymbolsFullFileName;DibixCliPath;DibixSdkPath;DibixRuntimeDirectory;Build_Repository_Uri;Build_SourceVersion;Build_SourceBranch;SignAssembly;AssemblyOriginatorKeyFile;ResetLockFile;StaticCodeAnalysisSucceededFile;ResultsFile;FileVersion;ExternalAssemblyReferenceDirectory;BuildingInsideVisualStudio;DSP;ModelCollation;LimitDdlStatements;PreventDmlReferences;SupportOpenApiNullableReferenceTypes;Company;Copyright;InformationalVersion;DibixTargetFramework;CompileArtifactsNetStandard;DibixSdkVersion;ClientFileVersion;CopyRetryCount;CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible;CopyRetryDelayMilliseconds;SkipCopyBuildProduct;SkipCopyingSymbolsToOutputDirectory;SqlTargetPath-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    To make sure some global properties are overriden, we have to put them here instead of the .props file.
    This is because NuGet imports the .props file at the beginning of the project and the .targets file at the end.
  -->
  <PropertyGroup>
    <_DibixName>Dibix</_DibixName>
    <_DibixHttpClientName>Dibix.Http.Client</_DibixHttpClientName>
    <_DibixHttpServerName>Dibix.Http.Server</_DibixHttpServerName>

    <DibixAssemblyPath>$(DibixRuntimeDirectory)$(_DibixName).dll</DibixAssemblyPath>
    <DibixHttpClientAssemblyPath>$(DibixRuntimeDirectory)$(_DibixHttpClientName).dll</DibixHttpClientAssemblyPath>
    <DibixHttpServerAssemblyPath>$(DibixRuntimeDirectory)$(_DibixHttpServerName).dll</DibixHttpServerAssemblyPath>

    <AreaName Condition="$(AreaName) == '' and $(RootNamespace.Split('.').Length) > 1">$(RootNamespace.Split('.')[1])</AreaName>

    <!-- We have our own CA target, which also executes the native SqlStaticCodeAnalysis -->
    <RunSqlCodeAnalysis>false</RunSqlCodeAnalysis>
    <RunSqlCodeAnalysisOnce>false</RunSqlCodeAnalysisOnce>

    <ProducePackage Condition="'$(ProducePackage)' == '' and '$(IsEmbedded)' == 'false'">True</ProducePackage>
    <ProducePackage Condition="'$(ProducePackage)' == '' and '$(IsEmbedded)' == 'true'">False</ProducePackage>
    <!--
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;
      CoreCompile;
      GenerateSerializationAssemblies;
      SqlBuild;
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>
    -->
    <!-- Exclude CoreCompile, because we generate our own assembly -->
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;
      GenerateSerializationAssemblies;
    </BuildDependsOn>

    <!-- Add our own compilation target here -->
    <BuildDependsOn>$(BuildDependsOn);SqlCore</BuildDependsOn>

    <!-- Exclude SqlBuild to increase build performance, if no dacpac should be produced -->
    <BuildDependsOn Condition="'$(ProducePackage)' == 'true'">$(BuildDependsOn);SqlBuild;</BuildDependsOn>

    <BuildDependsOn>
      $(BuildDependsOn);
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>

  <!-- 
    Unfortunately the BuildDependsOn property cannot be overriden in the NuGet .targets file, because of the order how these imports happen.
    Currently the order is as follows:
    - Import SSDT targets
      - Import C# targets
        - Import NuGet targets
          - Import Dibix NuGet targets (we can't override properties here)
    - SSDT sets properties we want to override

    Therefore these need to be overriden by adding a custom import after the SSDT targets.
    This can only be done by the caller, not by this NuGet package.
  -->
  <PropertyGroup>
    <DibixBuildDependsOn>$(BuildDependsOn)</DibixBuildDependsOn>
  </PropertyGroup>

  <!-- Utility to dump item including metadata -->
  <UsingTask TaskName="DumpItem" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          StringBuilder sb = new StringBuilder();
          for (int i = 0; i < Source.Length; i++)
          {
              ITaskItem item = Source[i];
              
              sb.Append("  ")
                .Append(item);
              
              foreach (string metadataName in item.MetadataNames)
              {
                  sb.AppendLine()
                    .Append("    ")
                    .Append(metadataName)
                    .Append(' ')
                    .Append(item.GetMetadata(metadataName));
              }
              
              if (i + 1 < Source.Length)
                sb.AppendLine();
          }
          Result = sb.ToString();
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Define inputs and outputs so the targets know when they need to be rebuilt -->
  <Target Name="SetupSqlCoreInputs" DependsOnTargets="_SetupSqlBuildInputs">
    <PropertyGroup>
      <_DibixConfigurationPath>$(DibixConfigurationDirectory)dibix.json</_DibixConfigurationPath>
    </PropertyGroup>

    <ItemGroup>
      <!-- Changed inputs that are relevant for all build targets -->

      <!-- Reuse inputs from SqlBuild target -->
      <!-- Some entries have to be added manually, since they are incorrect -->
      <!-- For example: -->
      <!--<__SqlBuildInputItem Include="@(MSBuildAllProjects)" />-->
      <SqlBuildInputItem Include="$(MSBuildAllProjects)" />
      <SqlBuildInputItem Include="$(MSBuildProjectFullPath)" />
      <_SqlTargetInput Include="@(SqlBuildInputItem)" />

      <!-- 
        These inputs were relevant for .dacpac creation in SqlBuild,
        but it doesn't make sense to outputs as inputs.
       -->
      <_SqlTargetInput Remove="$(IntermediateTargetFullFileName)" />
      <_SqlTargetInput Remove="$(IntermediateSymbolsFullFileName)" />

      <!-- SDK changes -->
      <_SqlTargetInput Include="$(DibixCliPath)" />
      <_SqlTargetInput Include="$(DibixSdkPath)" />

      <!-- Target specific inputs -->
      <!-- SqlCodeAnalysis -->
      <SqlCodeAnalysisInput Include="@(_SqlTargetInput)" />

      <!-- CompileArtifacts -->
      <CompileArtifactsInput Include="@(_SqlTargetInput)" />
      <CompileArtifactsInput Include="@(Contract)" />
      <CompileArtifactsInput Include="@(Endpoint)" />

      <!-- SqlCore -->
      <_SqlCoreInput Include="$(_DibixConfigurationPath)" />
      <SqlCoreInput Include="@(_SqlCoreInput)" Condition="Exists(%(FullPath))" />
      <SqlCoreInput Include="@(_SqlTargetInput)" />
      <SqlCoreInput Include="@(Contract)" />
      <SqlCoreInput Include="@(Endpoint)" />
    </ItemGroup>
  </Target>
  <Target Name="SetupSqlCoreOutputs" BeforeTargets="_SetupSqlBuildOutputs">
    <PropertyGroup>
      <_HasEndpoints Condition="@(Endpoint->Count()) > 0">True</_HasEndpoints>
      <_ProduceEndpoints Condition="'$(AreaName)' != '' and '$(_HasEndpoints)' == 'true'">True</_ProduceEndpoints>
      <_ProduceClient Condition="'$(AreaName)' != '' and '$(_HasEndpoints)' == 'true'">True</_ProduceClient>
      <AccessorOutputName>$(AssemblyName)</AccessorOutputName>
      <_AccessorIntermediateAssemblyPath>$(IntermediateOutputPath)$(AccessorOutputName).dll</_AccessorIntermediateAssemblyPath>
      <_AccessorSourceName>$(AccessorOutputName)</_AccessorSourceName>
      <_AccessorSourceFileName>$(_AccessorSourceName).cs</_AccessorSourceFileName>
      <_ModelFileName Condition="'$(_HasEndpoints)' != 'true'">$(AccessorOutputName).model.json</_ModelFileName> <!-- Only for non-leaf projects -->
    </PropertyGroup>
    <PropertyGroup Condition="'$(_ProduceClient)' == 'true'">
      <ClientOutputName>$(AreaName).Client</ClientOutputName>
      <_ClientIntermediatePathNoExt>$(IntermediateOutputPath)$(ClientOutputName)</_ClientIntermediatePathNoExt>
      <_ClientIntermediateAssemblyPath>$(_ClientIntermediatePathNoExt).dll</_ClientIntermediateAssemblyPath>
      <_ClientSourceName>$(ClientOutputName)</_ClientSourceName>
      <_ClientSourceFileName>$(_ClientSourceName).cs</_ClientSourceFileName>
    </PropertyGroup>
    <PropertyGroup Condition="'$(_ProduceEndpoints)' == 'true'">
      <EndpointOutputName>$(AreaName)</EndpointOutputName>
      <_EndpointTargetFileName>$(EndpointOutputName).dbx</_EndpointTargetFileName>
      <_EndpointIntermediatePackagePath>$(IntermediateOutputPath)$(_EndpointTargetFileName)</_EndpointIntermediatePackagePath>
      <_EndpointSourceName>$(EndpointOutputName).Endpoints</_EndpointSourceName>
      <_EndpointSourceFileName>$(_EndpointSourceName).cs</_EndpointSourceFileName>
      <_DocumentationSourceName>$(AreaName)</_DocumentationSourceName>
    </PropertyGroup>
    <ItemGroup Condition="'$(_ProduceEndpoints)' == 'true'">
      <_DocsFiles Include="$(AreaName).yml" />
      <_DocsFiles Include="$(AreaName).json" />
    </ItemGroup>

    <ItemGroup>
      <!-- SqlCore -->
      <SqlCoreOutput Include="$(_AccessorIntermediateAssemblyPath)" /> <!-- .dll -->
      <SqlCoreOutput Include="$(_ClientIntermediateAssemblyPath)" /> <!-- .dll -->
      <SqlCoreOutput Include="$(_EndpointIntermediatePackagePath)" /> <!-- .dbx -->
    </ItemGroup>
  </Target>

  <Target Name="SetupCompilationArtifacts" BeforeTargets="SetupSqlCoreInputs">
    <ItemGroup>
      <Contract Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Contracts\\')) and %(Extension) == '.json'" />
      <Endpoint Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Endpoints\\')) and %(Extension) == '.json'" />
    </ItemGroup>
  </Target>

  <!-- Run SQL code analysis and compile database access artifacts -->
  <Target Name="SqlCore"
          DependsOnTargets="SetupSqlCoreInputs;SetupSqlCoreOutputs;ResolveArtifactReferences"
          Inputs="@(SqlCoreInput)"
          Outputs="@(SqlCoreOutput)">
    <!-- Configuration -->
    <PropertyGroup>
      <ProductName Condition="'$(ProductName)' == ''">$(RootNamespace.Split('.')[0])</ProductName>
      <Title Condition="$(Title) == ''">$(AreaName)</Title>
      <Description Condition="$(Description) == '' and $(Build_Repository_Uri) != '' and $(Build_SourceVersion) != '' and $(Build_SourceBranch) != ''">__Build version:__ $([System.DateTime]::Now.ToString(G))\r\n\r\n__Source version:__ [$(Build_SourceVersion)]($(Build_Repository_Uri)/commit/$(Build_SourceVersion)?refName=$(Build_SourceBranch))</Description>
      <LangVersion>latest</LangVersion>
      <!--<ExternalAssemblyReferenceDirectory Condition="'$(ExternalAssemblyReferenceDirectory)' == ''">$(TargetDir)</ExternalAssemblyReferenceDirectory>-->

      <_MSBuildBinPath>$(MSBuildToolsPath)\msbuild.exe</_MSBuildBinPath>
      <_LockFile>$(DibixConfigurationDirectory)dibix.lock</_LockFile>
      <_SignAssembly>$(SignAssembly)</_SignAssembly>
      <_SignAssembly Condition="'$(_SignAssembly)' == '' and '$(AssemblyOriginatorKeyFile)' != ''">true</_SignAssembly>
    </PropertyGroup>

    <ItemGroup>
      <SqlCodeAnalysisScriptItem Include="@(PreDeploy)" />
      <SqlCodeAnalysisScriptItem Include="@(PostDeploy)" />

      <AccessorCompilationArtifactReference Include="@(ArtifactReference->'%(RelativeDir)%(Filename).dll')"
                                            Condition="Exists('%(RelativeDir)%(Filename).dll') AND !$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)%(Extension)', '^master|msdb(\.dacpac)$'))" />
    </ItemGroup>

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SqlCoreInputFile>$(IntermediateOutputPath)core.input</_SqlCoreInputFile>
    </PropertyGroup>

    <DumpItem Source="@(SqlCodeAnalysisScriptItem)">
      <Output TaskParameter="Result" PropertyName="_SqlCodeAnalysisScriptItem" />
    </DumpItem>
    <DumpItem Source="@(Build)">
      <Output TaskParameter="Result" PropertyName="_Build" />
    </DumpItem>
    <DumpItem Source="@(Contract)">
      <Output TaskParameter="Result" PropertyName="_Contract" />
    </DumpItem>
    <DumpItem Source="@(Endpoint)">
      <Output TaskParameter="Result" PropertyName="_Endpoint" />
    </DumpItem>
    <DumpItem Source="@(AccessorCompilationArtifactReference)">
      <Output TaskParameter="Result" PropertyName="_AccessorCompilationArtifactReference" />
    </DumpItem>
    <DumpItem Source="@(SqlReferencePath)">
      <Output TaskParameter="Result" PropertyName="_SqlReferencePath" />
    </DumpItem>

    <ItemGroup>
      <_SqlCoreInputItem Include="ProjectName
  $(MSBuildProjectName)" />
      <_SqlCoreInputItem Include="ProjectDirectory
  $(MSBuildProjectDirectory)" />
      <_SqlCoreInputItem Include="ConfigurationFilePath
  $(_DibixConfigurationPath)" />
      <_SqlCoreInputItem Include="LockFile
  $(_LockFile)" />
      <_SqlCoreInputItem Include="ResetLockFile
  $(ResetLockFile)" />
      <_SqlCoreInputItem Include="StaticCodeAnalysisSucceededFile
  $(StaticCodeAnalysisSucceededFile)" />
      <_SqlCoreInputItem Include="ResultsFile
  $(ResultsFile)" />
      <_SqlCoreInputItem Include="ProductName
  $(ProductName)" />
      <_SqlCoreInputItem Include="AreaName
  $(AreaName)" />
      <_SqlCoreInputItem Include="Title
  $(Title)" />
      <_SqlCoreInputItem Include="Version
  $(FileVersion)" />
      <_SqlCoreInputItem Include="Description
  $(Description)" />
      <_SqlCoreInputItem Include="OutputDirectory
  $(IntermediateOutputPath)" />
      <_SqlCoreInputItem Include="AccessorTargetName
  $(AccessorOutputName)" />
      <_SqlCoreInputItem Include="AccessorTargetFileName
  $(_AccessorSourceFileName)" />
      <_SqlCoreInputItem Include="EndpointTargetFileName
  $(_EndpointSourceFileName)" />
      <_SqlCoreInputItem Include="ClientTargetFileName
  $(_ClientSourceFileName)" />
      <_SqlCoreInputItem Include="ModelTargetFileName
  $(_ModelFileName)" />
      <_SqlCoreInputItem Include="DocumentationTargetName
  $(_DocumentationSourceName)" />
      <_SqlCoreInputItem Include="ExternalAssemblyReferenceDirectory
  $(ExternalAssemblyReferenceDirectory)" />
      <_SqlCoreInputItem Include="BuildingInsideVisualStudio
  $(BuildingInsideVisualStudio)" />
      <_SqlCoreInputItem Include="Source
$(_Build)" />
      <_SqlCoreInputItem Include="ScriptSource
$(_SqlCodeAnalysisScriptItem)" />
      <_SqlCoreInputItem Include="Contracts
$(_Contract)" />
      <_SqlCoreInputItem Include="Endpoints
$(_Endpoint)" />
      <_SqlCoreInputItem Include="References
$(_AccessorCompilationArtifactReference)" />
      <_SqlCoreInputItem Include="DatabaseSchemaProviderName
  $(DSP)" />
      <_SqlCoreInputItem Include="ModelCollation
  $(ModelCollation)" />
      <_SqlCoreInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_SqlCoreInputItem Include="LimitDdlStatements
  $(LimitDdlStatements)" />
      <_SqlCoreInputItem Include="PreventDmlReferences
  $(PreventDmlReferences)" />
      <_SqlCoreInputItem Include="SupportOpenApiNullableReferenceTypes
  $(SupportOpenApiNullableReferenceTypes)" />
      <_SqlCoreInputItem Include="SqlReferencePath
$(_SqlReferencePath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SqlCoreInputFile)" Lines="@(_SqlCoreInputItem)" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_SqlCoreInputFile)" />
    </ItemGroup>

    <PropertyGroup>
      <_SqlCoreCommand>$(DibixCliPath) core "$(_SqlCoreInputFile)"</_SqlCoreCommand>
    </PropertyGroup>

    <Exec Command="$(_SqlCoreCommand)" />

    <ItemGroup>
      <_FileWrites Include="nuget.output" />
      <_FileWrites Include="$(_AccessorSourceFileName)" />
      <_FileWrites Include="$(_EndpointSourceFileName)" />
      <_FileWrites Include="$(_ClientSourceFileName)" />
      <_FileWrites Include="$(_ModelFileName)" />
      <_FileWrites Include="@(_DocsFiles)" />

      <FileWrites Include="@(_FileWrites->'$(IntermediateOutputPath)%(Identity)')" />
    </ItemGroup>

    <!-- Shared assembly info -->
    <PropertyGroup>
      <Product Condition="'$(Product)' == ''">$(ProductName)</Product>
    </PropertyGroup>

    <ItemGroup>
      <AssemblyAttribute Include="AssemblyCompany" Condition="'$(Company)' != ''">
        <_Parameter1>$(Company)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyProduct" Condition="'$(Product)' != ''">
        <_Parameter1>$(Product)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyCopyright" Condition="'$(Copyright)' != ''">
        <_Parameter1>$(Copyright)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyInformationalVersion" Condition="'$(InformationalVersion)' != ''">
        <_Parameter1>$(InformationalVersion)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyConfiguration">
        <_Parameter1>$(Configuration)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>


    <!-- Accessor assembly info & DLL generation -->
    <PropertyGroup>
      <_AccessorIntermediatePathNoExt>$(IntermediateOutputPath)$(AccessorOutputName)</_AccessorIntermediatePathNoExt>
      <_AccessorFileVersion>$(FileVersion)</_AccessorFileVersion>
      <_AccessorTargetFrameworkNetFx>$(DibixTargetFramework)</_AccessorTargetFrameworkNetFx>
      <_AccessorTargetFrameworkNetStandard>netstandard2.0</_AccessorTargetFrameworkNetStandard>
      <_AccessorTargetFramework>$(_AccessorTargetFrameworkNetFx)</_AccessorTargetFramework>
      <_AccessorTargetFramework Condition="'$(CompileArtifactsNetStandard)' == 'true'">$(_AccessorTargetFrameworkNetStandard)</_AccessorTargetFramework>
    </PropertyGroup>

    <ItemGroup>
      <AccessorCompilationReference Include="@(AccessorCompilationArtifactReference)" />
    </ItemGroup>

    <ItemGroup>
      <_AccessorCompilationEmbeddedResource Include="&lt;EmbeddedResource Include=&quot;$(_ModelFileName)&quot; LogicalName=&quot;Model&quot; /&gt;"
                                            Condition="'$(_HasEndpoints)' != 'true'" />
      <_AccessorCompilationReferenceItem Include="@(AccessorCompilationReference->'&lt;Reference Include=&quot;%(Filename)&quot; HintPath=&quot;%(FullPath)&quot; Private=&quot;False&quot; /&gt;')" />
      <_AccessorCompilationReferenceItem Include="&lt;PackageReference Include=&quot;$(_DibixHttpServerName)&quot; Version=&quot;$(DibixSdkVersion)&quot; ExcludeAssets=&quot;runtime&quot; /&gt;" />
    </ItemGroup>

    <PropertyGroup>
      <_AccessorIntermediateProjectFilePath>$(_AccessorIntermediatePathNoExt).csproj</_AccessorIntermediateProjectFilePath>
      <_AccessorIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(_AccessorTargetFramework)</TargetFramework>

    <OutDir>.</OutDir>
    <TargetName>$(AccessorOutputName)</TargetName>
    <EnableDefaultItems>false</EnableDefaultItems>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(_SignAssembly)</SignAssembly>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <NoWarn>nullable</NoWarn>

    <Product>$(Product)</Product>
    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <FileVersion>$(_AccessorFileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_AccessorSourceFileName)" />
    @(_AccessorCompilationEmbeddedResource)
  </ItemGroup>

  <ItemGroup>
@(_AccessorCompilationReferenceItem)
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="$(_DibixName)" Version="$(DibixSdkVersion)" ExcludeAssets="runtime" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" ExcludeAssets="runtime" />
    <!--
    <PackageReference Include="System.Reflection" Version="4.3.0" ExcludeAssets="runtime" />
    -->
  </ItemGroup>

  <ItemGroup Condition="'%24(TargetFramework)' == '$(_AccessorTargetFrameworkNetStandard)'">
    <PackageReference Include="System.ComponentModel.Annotations" Version="5.0.0" ExcludeAssets="runtime" />
  </ItemGroup>

  <ItemGroup Condition="'%24(TargetFramework)' == '$(_AccessorTargetFrameworkNetFx)'">
    <Reference Include="System.ComponentModel.DataAnnotations" />
  </ItemGroup>

  <Target Name="DumpResolvedDibixReferencePaths" AfterTargets="ResolvePackageAssets">
    <ItemGroup>
      <_DibixReferencePath Include="%40(ResolvedCompileFileDefinitions)" Condition="'%25(NuGetPackageId)' == '$(_DibixName)'" />
      <_DibixReferencePath Include="%40(ResolvedCompileFileDefinitions)" Condition="'%25(NuGetPackageId)' == '$(_DibixHttpServerName)'" />
    </ItemGroup>

    <WriteLinesToFile File="%24(MSBuildThisFileDirectory)nuget.output" Lines="%40(_DibixReferencePath)" Overwrite="True" />
  </Target>

</Project>
]]>
      </_AccessorIntermediateProjectFileContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(_AccessorIntermediateProjectFilePath)"
                      Lines="$(_AccessorIntermediateProjectFileContent)"
                      Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_AccessorIntermediateProjectFilePath)" />
    </ItemGroup>

    <!-- Override Directory.Build props/targets to ensure the project configuration is isolated -->
    <!-- For example, a central package reference of Dibix runtime might interfere here -->
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.props" Lines="&lt;Project /&gt;" Overwrite="True" />
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.targets" Lines="&lt;Project /&gt;" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.props" />
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.targets" />
    </ItemGroup>

    <Exec Command="&quot;$(_MSBuildBinPath)&quot; &quot;$(_AccessorIntermediateProjectFilePath)&quot; -restore -p:Configuration=$(Configuration) -verbosity:minimal" />

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)nuget.output" />
      <FileWrites Include="$(IntermediateOutputPath)obj\**" />
    </ItemGroup>


    <!-- Endpoint assembly & package generation -->
    <PropertyGroup Condition="'$(_ProduceEndpoints)' == 'true'">
      <_EndpointBinaryExt>.dbxc</_EndpointBinaryExt>
      <_EndpointIntermediateBinaryPath>$(IntermediateOutputPath)$(_EndpointSourceName)$(_EndpointBinaryExt)</_EndpointIntermediateBinaryPath>
      <_EndpointTargetFrameworkNetFx>net6.0</_EndpointTargetFrameworkNetFx>
      <_EndpointIntermediateProjectFilePath>$(IntermediateOutputPath)$(_EndpointSourceName).csproj</_EndpointIntermediateProjectFilePath>
      <_EndpointIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(_EndpointTargetFrameworkNetFx)</TargetFramework>

    <OutDir>.</OutDir>
    <TargetExt>$(_EndpointBinaryExt)</TargetExt>
    <EnableDefaultItems>false</EnableDefaultItems>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(_SignAssembly)</SignAssembly>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <NoWarn>nullable</NoWarn>
    <EmbedAllSources>true</EmbedAllSources>
    <DebugType>embedded</DebugType>
    
    <Product>$(Product)</Product>
    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <FileVersion>$(_AccessorFileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_EndpointSourceFileName)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="$(_DibixName)" Version="$(DibixSdkVersion)" ExcludeAssets="runtime" />
    <PackageReference Include="$(_DibixHttpServerName)" Version="$(DibixSdkVersion)" ExcludeAssets="runtime" />
  </ItemGroup>

</Project>
]]>
      </_EndpointIntermediateProjectFileContent>
    </PropertyGroup>

    <WriteLinesToFile Condition="'$(_ProduceEndpoints)' == 'true'"
                      File="$(_EndpointIntermediateProjectFilePath)"
                      Lines="$(_EndpointIntermediateProjectFileContent)"
                      Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_EndpointIntermediateProjectFilePath)" />
    </ItemGroup>

    <!-- Override Directory.Build props/targets to ensure the project configuration is isolated -->
    <!-- For example, a central package reference of Dibix runtime might interfere here -->
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.props" Lines="&lt;Project /&gt;" Overwrite="True" Condition="'$(_ProduceEndpoints)' == 'true'" />
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.targets" Lines="&lt;Project /&gt;" Overwrite="True" Condition="'$(_ProduceEndpoints)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.props" />
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.targets" />
    </ItemGroup>

    <Exec Command="&quot;$(_MSBuildBinPath)&quot; &quot;$(_EndpointIntermediateProjectFilePath)&quot; -restore -p:Configuration=$(Configuration) -verbosity:minimal"
          Condition="'$(_ProduceEndpoints)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(_EndpointIntermediateBinaryPath)" />
      <FileWrites Include="$(IntermediateOutputPath)obj\**" />
    </ItemGroup>

    <!-- Create artifact package (.dbx) -->
    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_CreatePackageInputFile>$(IntermediateOutputPath)package.input</_CreatePackageInputFile>
    </PropertyGroup>

    <ItemGroup>
      <_CreatePackageInputItem Include="ProductName
  $(ProductName)" />
      <_CreatePackageInputItem Include="AreaName
  $(AreaName)" />
      <_CreatePackageInputItem Include="ArtifactTargetFileName
  $(_EndpointTargetFileName)" />
      <_CreatePackageInputItem Include="OutputDirectory
  $(IntermediateOutputPath)" />
      <_CreatePackageInputItem Include="CompiledArtifactPath
  $(_EndpointIntermediateBinaryPath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_CreatePackageInputFile)"
                      Lines="@(_CreatePackageInputItem)"
                      Overwrite="True"
                      Condition="'$(_ProduceEndpoints)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(_CreatePackageInputFile)" />
    </ItemGroup>

    <Exec Command="$(DibixCliPath) pack &quot;$(_CreatePackageInputFile)&quot;"
          Condition="'$(_ProduceEndpoints)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(_EndpointIntermediatePackagePath)" />
    </ItemGroup>


    <!-- Client assembly info & DLL generation -->
    <PropertyGroup Condition="'$(_ProduceClient)' == 'true'">
      <_ClientIntermediateSymbolsPath>$(IntermediateOutputPath)$(ClientOutputName).pdb</_ClientIntermediateSymbolsPath>
      <_ClientFileVersion Condition="'$(ClientFileVersion)' != ''">$(ClientFileVersion)</_ClientFileVersion>
      <_ClientFileVersion Condition="'$(ClientFileVersion)' == ''" >$(FileVersion)</_ClientFileVersion>
      <_ClientTargetFrameworkNetFx>$(DibixTargetFramework)</_ClientTargetFrameworkNetFx>
      <_ClientTargetFrameworkNetStandard>netstandard2.0</_ClientTargetFrameworkNetStandard>
      <_ClientTargetFramework>$(_ClientTargetFrameworkNetFx)</_ClientTargetFramework>
      <_ClientTargetFramework Condition="'$(CompileArtifactsNetStandard)' == 'true'">$(_ClientTargetFrameworkNetStandard)</_ClientTargetFramework>
    </PropertyGroup>

    <ItemGroup Condition="'$(_ProduceClient)' == 'true'">
      <ClientAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ClientAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(ClientOutputName)</_Parameter1>
      </ClientAssemblyAttribute>
      <ClientAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(_ClientFileVersion)' != ''">
        <_Parameter1>$(_ClientFileVersion)</_Parameter1>
      </ClientAssemblyAttribute>
    </ItemGroup>

    <ItemGroup Condition="'$(_ProduceClient)' == 'true'">
      <_ClientCompilationReferenceItem Include="@(ClientCompilationReference->'&lt;Reference Include=&quot;%(Filename)&quot; HintPath=&quot;%(FullPath)&quot; Private=&quot;False&quot; /&gt;')" />
    </ItemGroup>

    <PropertyGroup Condition="'$(_ProduceClient)' == 'true'">
      <_ClientIntermediateProjectFilePath>$(_ClientIntermediatePathNoExt).csproj</_ClientIntermediateProjectFilePath>
      <_ClientIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(_ClientTargetFramework)</TargetFramework>
    
    <OutDir>.</OutDir>
    <EnableDefaultItems>false</EnableDefaultItems>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(_SignAssembly)</SignAssembly>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <NoWarn>nullable</NoWarn>
    
    <Product>$(Product)</Product>
    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <FileVersion>$(_ClientFileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_ClientSourceFileName)" />
  </ItemGroup>

  <ItemGroup>
@(_ClientCompilationReferenceItem)
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="$(_DibixHttpClientName)" Version="$(DibixSdkVersion)" ExcludeAssets="runtime" />
    <PackageReference Include="Microsoft.AspNet.WebApi.Client" Version="5.2.9" ExcludeAssets="runtime" />
    <PackageReference Include="Microsoft.Extensions.Http" Version="6.0.0" ExcludeAssets="runtime" />
  </ItemGroup>

  <ItemGroup Condition="'%24(TargetFramework)' == '$(_ClientTargetFrameworkNetFx)'">
    <Reference Include="System.Net.Http" />
  </ItemGroup>

</Project>
]]>
      </_ClientIntermediateProjectFileContent>
    </PropertyGroup>

    <WriteLinesToFile Condition="'$(_ProduceClient)' == 'true'"
                      File="$(_ClientIntermediateProjectFilePath)"
                      Lines="$(_ClientIntermediateProjectFileContent)"
                      Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_ClientIntermediateProjectFilePath)" />
    </ItemGroup>

    <!-- Override Directory.Build props/targets to ensure the project configuration is isolated -->
    <!-- For example, a central package reference of Dibix runtime might interfere here -->
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.props" Lines="&lt;Project /&gt;" Overwrite="True" Condition="'$(_ProduceClient)' == 'true'" />
    <WriteLinesToFile File="$(IntermediateOutputPath)Directory.Build.targets" Lines="&lt;Project /&gt;" Overwrite="True" Condition="'$(_ProduceClient)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.props" />
      <FileWrites Include="$(IntermediateOutputPath)Directory.Build.targets" />
    </ItemGroup>

    <Exec Condition="'$(_ProduceClient)' == 'true'"
          Command="&quot;$(_MSBuildBinPath)&quot; &quot;$(_ClientIntermediateProjectFilePath)&quot; -restore -p:Configuration=$(Configuration) -verbosity:minimal" />

    <ItemGroup>
      <FileWrites Include="$(_ClientIntermediateAssemblyPath)" />
      <FileWrites Include="$(_ClientIntermediateSymbolsPath)" />
      <FileWrites Include="$(IntermediateOutputPath)obj\**" />
    </ItemGroup>
  </Target>


  <!-- 
    It is important to have this as a separate target that will always be executed.
    Previously this was done within the SqlCore target, but if that is skipped,
    the necessary FileWrites are not added, and the IncrementalClean target 
    will delete the outputs after the first build.
  -->
  <Target Name="CopyArtifactsToOuputDirectory"
          AfterTargets="CopyFilesToOutputDirectory"
          DependsOnTargets="SqlCore;CopyFilesToOutputDirectory">

    <PropertyGroup Condition="'$(_ProduceClient)' == 'true'">
      <_ClientPathNoExt>$(TargetDir)$(ClientOutputName)</_ClientPathNoExt>
      <ClientTargetPath>$(_ClientPathNoExt).dll</ClientTargetPath>
      <ClientOutputSymbolsPath>$(_ClientPathNoExt).pdb</ClientOutputSymbolsPath>
    </PropertyGroup>

    <PropertyGroup>
      <ArtifactPackagePath Condition="'$(_ProduceEndpoints)' == 'true'">$(TargetDir)$(_EndpointTargetFileName)</ArtifactPackagePath>
    </PropertyGroup>

    <ItemGroup>
      <Docs Include="@(_DocsFiles->'$(OutDir)\%(Identity)')" />
    </ItemGroup>

    <!-- Copy generated client assembly (.dll) -->
    <Copy SourceFiles="$(_ClientIntermediateAssemblyPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_ProduceClient)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Copy the debug information file (.pdb) of the generated client assembly -->
    <Copy SourceFiles="$(_ClientIntermediateSymbolsPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_ProduceClient)' == 'true' and '$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Copy the artifact package (.dbx) -->
    <Copy SourceFiles="$(_EndpointIntermediatePackagePath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Publish docs -->
    <Copy SourceFiles="@(_DocsFiles->'$(IntermediateOutputPath)\%(Identity)')"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>
  </Target>


  <!-- Append our own metadata to the produced dacpac file -->
  <Target Name="SignDacFile"
          AfterTargets="SqlBuild"
          DependsOnTargets="ResolveArtifactReferences;SqlBuild">

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SignDacInputFile>$(IntermediateOutputPath)sign.input</_SignDacInputFile>
      <LockRetryCount Condition="'$(LockRetryCount)' == ''">10</LockRetryCount>
    </PropertyGroup>

    <ItemGroup>
      <_SignDacFileInputItem Include="DacFilePath
  $(SqlTargetPath)" />
      <_SignDacFileInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_SignDacFileInputItem Include="LockRetryCount
  $(LockRetryCount)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SignDacInputFile)" Lines="@(_SignDacFileInputItem)" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_SignDacInputFile)" />
    </ItemGroup>

    <Exec Command="$(DibixCliPath) sign &quot;$(_SignDacInputFile)&quot;" />
  </Target>


  <!-- Make resolved Dibix NuGet reference paths available for other targets -->
  <Target Name="PublishDibixReferenceAssemblies">
    <ReadLinesFromFile File="$(IntermediateOutputPath)nuget.output">
      <Output TaskParameter="Lines" ItemName="DibixReferenceAssemblyPath" />
    </ReadLinesFromFile>
  </Target>

</Project>