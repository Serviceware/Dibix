<Project>

  <!-- 
    To make sure some global properties are overriden, we have to put them here instead of the .props file.
    This is because NuGet imports the .props file at the beginning of the project and the .targets file at the end.
  -->
  <PropertyGroup>
    <_DibixName>Dibix</_DibixName>
    <_DibixHttpClientName>Dibix.Http.Client</_DibixHttpClientName>
    <_DibixHttpServerName>Dibix.Http.Server</_DibixHttpServerName>

    <DibixAssemblyPath>$(DibixRuntimeDirectory)$(_DibixName).dll</DibixAssemblyPath>
    <DibixHttpClientAssemblyPath>$(DibixRuntimeDirectory)$(_DibixHttpClientName).dll</DibixHttpClientAssemblyPath>
    <DibixHttpServerAssemblyPath>$(DibixRuntimeDirectory)$(_DibixHttpServerName).dll</DibixHttpServerAssemblyPath>

    <AreaName Condition="$(AreaName) == '' and $(RootNamespace.Split('.').Length) > 1">$(RootNamespace.Split('.')[1])</AreaName>

    <!-- We have our own CA target, which also executes the native SqlStaticCodeAnalysis -->
    <RunSqlCodeAnalysis>false</RunSqlCodeAnalysis>
    <RunSqlCodeAnalysisOnce>false</RunSqlCodeAnalysisOnce>

    <ProducePackage Condition="'$(ProducePackage)' == '' and '$(IsEmbedded)' == 'false'">True</ProducePackage>
    <ProducePackage Condition="'$(ProducePackage)' == '' and '$(IsEmbedded)' == 'true'">False</ProducePackage>
    <!--
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;
      CoreCompile;
      GenerateSerializationAssemblies;
      SqlBuild;
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>
    -->
    <!-- Exclude CoreCompile, because we generate our own assembly -->
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;
      GenerateSerializationAssemblies;
    </BuildDependsOn>

    <!-- Add our own compilation target here -->
    <BuildDependsOn>$(BuildDependsOn);SqlCore</BuildDependsOn>

    <!-- Exclude SqlBuild to increase build performance, if no dacpac should be produced -->
    <BuildDependsOn Condition="'$(ProducePackage)' == 'true'">$(BuildDependsOn);SqlBuild;</BuildDependsOn>

    <BuildDependsOn>
      $(BuildDependsOn);
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>

  <!-- 
    Unfortunately the BuildDependsOn property cannot be overriden in the NuGet .targets file, because of the order how these imports happen.
    Currently the order is as follows:
    - Import SSDT targets
      - Import C# targets
        - Import NuGet targets
          - Import Dibix NuGet targets (we can't override properties here)
    - SSDT sets properties we want to override

    Therefore these need to be overriden by adding a custom import after the SSDT targets.
    This can only be done by the caller, not by this NuGet package.
    
    TODO: Remove this once SSDT fully supports SDKs in Visual Studio
  -->
  <PropertyGroup>
    <DibixBuildDependsOn>$(BuildDependsOn)</DibixBuildDependsOn>
  </PropertyGroup>

  <!-- Utility to dump item including metadata -->
  <UsingTask TaskName="DumpItem" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)/Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          StringBuilder sb = new StringBuilder();
          for (int i = 0; i < Source.Length; i++)
          {
              ITaskItem item = Source[i];
              
              sb.Append("  ")
                .Append(item);
              
              foreach (string metadataName in item.MetadataNames)
              {
                  sb.AppendLine()
                    .Append("    ")
                    .Append(metadataName)
                    .Append(' ')
                    .Append(item.GetMetadata(metadataName));
              }
              
              if (i + 1 < Source.Length)
                sb.AppendLine();
          }
          Result = sb.ToString();
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Define inputs and outputs so the targets know when they need to be rebuilt -->
  <Target Name="SetupSqlCoreInputs" DependsOnTargets="_SetupSqlBuildInputs">
    <PropertyGroup>
      <_DibixConfigurationPath>$(DibixConfigurationDirectory)dibix.json</_DibixConfigurationPath>
    </PropertyGroup>

    <ItemGroup>
      <!-- Changed inputs that are relevant for all build targets -->

      <!-- Reuse inputs from SqlBuild target -->
      <!-- Some entries have to be added manually, since they are incorrect -->
      <!-- For example: -->
      <!--<__SqlBuildInputItem Include="@(MSBuildAllProjects)" />-->
      <SqlBuildInputItem Include="$(MSBuildAllProjects)" />
      <SqlBuildInputItem Include="$(MSBuildProjectFullPath)" />
      <_SqlTargetInput Include="@(SqlBuildInputItem)" />

      <!-- 
        These inputs were relevant for .dacpac creation in SqlBuild,
        but it doesn't make sense to outputs as inputs.
       -->
      <_SqlTargetInput Remove="$(IntermediateTargetFullFileName)" />
      <_SqlTargetInput Remove="$(IntermediateSymbolsFullFileName)" />

      <!-- SDK changes -->
      <_SqlTargetInput Include="$(DibixCliPath)" />
      <_SqlTargetInput Include="$(DibixSdkPath)" />

      <!-- Target specific inputs -->
      <!-- SqlCodeAnalysis -->
      <SqlCodeAnalysisInput Include="@(_SqlTargetInput)" />

      <!-- CompileArtifacts -->
      <CompileArtifactsInput Include="@(_SqlTargetInput)" />
      <CompileArtifactsInput Include="@(Contract)" />
      <CompileArtifactsInput Include="@(Endpoint)" />

      <!-- SqlCore -->
      <_SqlCoreInput Include="$(_DibixConfigurationPath)" />
      <SqlCoreInput Include="@(_SqlCoreInput)" Condition="Exists(%(FullPath))" />
      <SqlCoreInput Include="@(_SqlTargetInput)" />
      <SqlCoreInput Include="@(Contract)" />
      <SqlCoreInput Include="@(Endpoint)" />
    </ItemGroup>
  </Target>
  <Target Name="SetupSqlCoreOutputs" BeforeTargets="_SetupSqlBuildOutputs">
    <PropertyGroup>
      <_HasEndpoints Condition="@(Endpoint->Count()) > 0">True</_HasEndpoints>
      <_ProduceEndpoints Condition="'$(AreaName)' != '' and '$(_HasEndpoints)' == 'true'">True</_ProduceEndpoints>
      <_ProduceClient>$(_ProduceEndpoints)</_ProduceClient>
      <ProduceAccessor Condition="'$(ProduceAccessor)' == '' and '$(_ProduceEndpoints)' != 'true'">True</ProduceAccessor>
      <ProduceAccessor Condition="'$(ProduceAccessor)' == '' and '$(_ProduceEndpoints)' == 'true'">False</ProduceAccessor>
      <AccessorOutputName>$(AssemblyName)</AccessorOutputName>
      <_ModelFileName Condition="'$(_HasEndpoints)' != 'true'">$(AccessorOutputName).model.json</_ModelFileName> <!-- Only for non-leaf projects -->
    </PropertyGroup>
    <PropertyGroup Condition="'$(ProduceAccessor)' == 'true'">
      <_AccessorIntermediateAssemblyPath>$(IntermediateOutputPath)$(AccessorOutputName).dll</_AccessorIntermediateAssemblyPath>
      <_AccessorSourceName>$(AccessorOutputName)</_AccessorSourceName>
      <_AccessorSourceFileName>$(_AccessorSourceName).cs</_AccessorSourceFileName>
    </PropertyGroup>
    <ItemGroup Condition="'$(ProduceAccessor)' == 'False'">
      <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    </ItemGroup>
    <PropertyGroup Condition="'$(_ProduceClient)' == 'true'">
      <ClientOutputName>$(AreaName).Client</ClientOutputName>
      <_ClientIntermediatePathNoExt>$(IntermediateOutputPath)$(ClientOutputName)</_ClientIntermediatePathNoExt>
      <_ClientIntermediateAssemblyPath>$(_ClientIntermediatePathNoExt).dll</_ClientIntermediateAssemblyPath>
      <_ClientSourceName>$(ClientOutputName)</_ClientSourceName>
      <_ClientSourceFileName>$(_ClientSourceName).cs</_ClientSourceFileName>
    </PropertyGroup>
    <PropertyGroup Condition="'$(_ProduceEndpoints)' == 'true'">
      <EndpointOutputName>$(AreaName)</EndpointOutputName>
      <_EndpointTargetFileName>$(EndpointOutputName).dbx</_EndpointTargetFileName>
      <_PackageMetadataFileName>$(EndpointOutputName).PackageMetadata.json</_PackageMetadataFileName>
      <_EndpointIntermediatePackagePath>$(IntermediateOutputPath)$(_EndpointTargetFileName)</_EndpointIntermediatePackagePath>
      <_EndpointSourceName>$(EndpointOutputName).Endpoints</_EndpointSourceName>
      <_EndpointSourceFileName>$(_EndpointSourceName).cs</_EndpointSourceFileName>
      <_DocumentationSourceName>$(AreaName)</_DocumentationSourceName>
    </PropertyGroup>
    <ItemGroup Condition="'$(_ProduceEndpoints)' == 'true'">
      <_DocsFiles Include="$(AreaName).yml" />
      <_DocsFiles Include="$(AreaName).json" />
    </ItemGroup>

    <ItemGroup>
      <!-- SqlCore -->
      <SqlCoreOutput Include="$(_AccessorIntermediateAssemblyPath)" /> <!-- .dll -->
      <SqlCoreOutput Include="$(_ClientIntermediateAssemblyPath)" /> <!-- .dll -->
      <SqlCoreOutput Include="$(_EndpointIntermediatePackagePath)" /> <!-- .dbx -->
    </ItemGroup>
  </Target>

  <Target Name="SetupCompilationArtifacts" BeforeTargets="SetupSqlCoreInputs">
    <ItemGroup>
      <Contract Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Contracts[/\\]+')) and %(Extension) == '.json'" />
      <Endpoint Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Endpoints[/\\]+')) and %(Extension) == '.json'" />
    </ItemGroup>
  </Target>

  <!-- Run SQL code analysis and compile database access artifacts -->
  <Target Name="SqlCore"
          DependsOnTargets="SetupSqlCoreInputs;SetupSqlCoreOutputs;ResolveArtifactReferences"
          Inputs="@(SqlCoreInput)"
          Outputs="@(SqlCoreOutput)">
    <!-- Configuration -->
    <PropertyGroup>
      <ProductName Condition="'$(ProductName)' == ''">$(RootNamespace.Split('.')[0])</ProductName>
      <Title Condition="$(Title) == ''">$(AreaName)</Title>
      <Description Condition="$(Description) == '' and $(Build_Repository_Uri) != '' and $(Build_SourceVersion) != '' and $(Build_SourceBranch) != ''">__Build version:__ $([System.DateTime]::Now.ToString(G))&lt;br/&gt;__Source version:__ [$(Build_SourceVersion)]($(Build_Repository_Uri)/commit/$(Build_SourceVersion)?refName=$(Build_SourceBranch))</Description>
      <LangVersion>latest</LangVersion>
      <!--<ExternalAssemblyReferenceDirectory Condition="'$(ExternalAssemblyReferenceDirectory)' == ''">$(TargetDir)</ExternalAssemblyReferenceDirectory>-->

      <_BuildCommand Condition="'$(MSBuildRuntimeType)' == 'Core'">dotnet build --configuration $(Configuration)</_BuildCommand>
      <_BuildCommand Condition="'$(MSBuildRuntimeType)' != 'Core'">&quot;$(MSBuildToolsPath)/msbuild.exe&quot; -restore -p:Configuration=$(Configuration) -verbosity:minimal</_BuildCommand>
      <_LockFile>$(DibixConfigurationDirectory)dibix.lock</_LockFile>
      <_SignAssembly>$(SignAssembly)</_SignAssembly>
      <_SignAssembly Condition="'$(_SignAssembly)' == '' and '$(AssemblyOriginatorKeyFile)' != ''">true</_SignAssembly>
    </PropertyGroup>

    <ItemGroup>
      <SqlCodeAnalysisScriptItem Include="@(PreDeploy)" />
      <SqlCodeAnalysisScriptItem Include="@(PostDeploy)" />

      <AccessorCompilationArtifactReference Include="@(ArtifactReference->'%(RelativeDir)%(Filename).dll')"
                                            Condition="Exists('%(RelativeDir)%(Filename).dll') AND !$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)%(Extension)', '^master|msdb(\.dacpac)$'))" />
    </ItemGroup>

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SqlCoreInputFile>$(IntermediateOutputPath)core.input</_SqlCoreInputFile>
    </PropertyGroup>

    <DumpItem Source="@(SqlCodeAnalysisScriptItem)">
      <Output TaskParameter="Result" PropertyName="_SqlCodeAnalysisScriptItem" />
    </DumpItem>
    <DumpItem Source="@(Build)">
      <Output TaskParameter="Result" PropertyName="_Build" />
    </DumpItem>
    <DumpItem Source="@(Contract)">
      <Output TaskParameter="Result" PropertyName="_Contract" />
    </DumpItem>
    <DumpItem Source="@(Endpoint)">
      <Output TaskParameter="Result" PropertyName="_Endpoint" />
    </DumpItem>
    <DumpItem Source="@(AccessorCompilationArtifactReference)">
      <Output TaskParameter="Result" PropertyName="_AccessorCompilationArtifactReference" />
    </DumpItem>
    <DumpItem Source="@(SqlReferencePath)">
      <Output TaskParameter="Result" PropertyName="_SqlReferencePath" />
    </DumpItem>

    <ItemGroup>
      <_SqlCoreInputItem Include="ProjectName
  $(MSBuildProjectName)" />
      <_SqlCoreInputItem Include="ProjectDirectory
  $(MSBuildProjectDirectory)" />
      <_SqlCoreInputItem Include="ConfigurationFilePath
  $(_DibixConfigurationPath)" />
      <_SqlCoreInputItem Include="LockFile
  $(_LockFile)" />
      <_SqlCoreInputItem Include="ResetLockFile
  $(ResetLockFile)" />
      <_SqlCoreInputItem Include="StaticCodeAnalysisSucceededFile
  $(StaticCodeAnalysisSucceededFile)" />
      <_SqlCoreInputItem Include="ResultsFile
  $(ResultsFile)" />
      <_SqlCoreInputItem Include="ProductName
  $(ProductName)" />
      <_SqlCoreInputItem Include="AreaName
  $(AreaName)" />
      <_SqlCoreInputItem Include="Title
  $(Title)" />
      <_SqlCoreInputItem Include="Version
  $(FileVersion)" />
      <_SqlCoreInputItem Include="Description
  $(Description)" />
      <_SqlCoreInputItem Include="OutputDirectory
  $(IntermediateOutputPath)" />
      <_SqlCoreInputItem Include="AccessorTargetName
  $(AccessorOutputName)" />
      <_SqlCoreInputItem Include="AccessorTargetFileName
  $(_AccessorSourceFileName)" />
      <_SqlCoreInputItem Include="EndpointTargetFileName
  $(_EndpointSourceFileName)" />
      <_SqlCoreInputItem Include="PackageMetadataTargetFileName
  $(_PackageMetadataFileName)" />
      <_SqlCoreInputItem Include="ClientTargetFileName
  $(_ClientSourceFileName)" />
      <_SqlCoreInputItem Include="ModelTargetFileName
  $(_ModelFileName)" />
      <_SqlCoreInputItem Include="DocumentationTargetName
  $(_DocumentationSourceName)" />
      <_SqlCoreInputItem Include="ExternalAssemblyReferenceDirectory
  $(ExternalAssemblyReferenceDirectory)" />
      <_SqlCoreInputItem Include="BuildingInsideVisualStudio
  $(BuildingInsideVisualStudio)" />
      <_SqlCoreInputItem Include="Source
$(_Build)" />
      <_SqlCoreInputItem Include="ScriptSource
$(_SqlCodeAnalysisScriptItem)" />
      <_SqlCoreInputItem Include="Contracts
$(_Contract)" />
      <_SqlCoreInputItem Include="Endpoints
$(_Endpoint)" />
      <_SqlCoreInputItem Include="References
$(_AccessorCompilationArtifactReference)" />
      <_SqlCoreInputItem Include="DatabaseSchemaProviderName
  $(DSP)" />
      <_SqlCoreInputItem Include="ModelCollation
  $(ModelCollation)" />
      <_SqlCoreInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_SqlCoreInputItem Include="LimitDdlStatements
  $(LimitDdlStatements)" />
      <_SqlCoreInputItem Include="PreventDmlReferences
  $(PreventDmlReferences)" />
      <_SqlCoreInputItem Include="SupportOpenApiNullableReferenceTypes
  $(SupportOpenApiNullableReferenceTypes)" />
      <_SqlCoreInputItem Include="SqlReferencePath
$(_SqlReferencePath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SqlCoreInputFile)" Lines="@(_SqlCoreInputItem)" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_SqlCoreInputFile)" />
    </ItemGroup>

    <PropertyGroup>
      <_SqlCoreCommand>$(DibixCliPath) core "$(_SqlCoreInputFile)"</_SqlCoreCommand>
    </PropertyGroup>

    <Exec Command="$(_SqlCoreCommand)" />

    <ItemGroup>
      <_FileWrites Include="nuget.output" />
      <_FileWrites Include="$(_AccessorSourceFileName)" />
      <_FileWrites Include="$(_EndpointSourceFileName)" />
      <_FileWrites Include="$(_ClientSourceFileName)" />
      <_FileWrites Include="$(_ModelFileName)" />
      <_FileWrites Include="$(_PackageMetadataFileName)" />
      <_FileWrites Include="@(_DocsFiles)" />

      <FileWrites Include="@(_FileWrites->'$(IntermediateOutputPath)%(Identity)')" />
    </ItemGroup>

    <!-- Shared assembly info -->
    <PropertyGroup>
      <Product Condition="'$(Product)' == ''">$(ProductName)</Product>
    </PropertyGroup>


    <!-- Accessor assembly info & DLL generation -->
    <PropertyGroup Condition="'$(ProduceAccessor)' == 'true'">
      <_AccessorIntermediatePathNoExt>$(IntermediateOutputPath)$(AccessorOutputName)</_AccessorIntermediatePathNoExt>
      <_AccessorTargetFramework>$(DibixTargetFramework)</_AccessorTargetFramework>
    </PropertyGroup>

    <ItemGroup Condition="'$(ProduceAccessor)' == 'true'">
      <AccessorCompilationReference Include="@(AccessorCompilationArtifactReference)" />

      <_AccessorCompilationSourceItem Include="&lt;Compile Include=&quot;$(_AccessorSourceFileName)&quot; /&gt;" />
      <_AccessorCompilationSourceItem Include="&lt;EmbeddedResource Include=&quot;$(_ModelFileName)&quot; LogicalName=&quot;Model&quot; /&gt;"
                                      Condition="'$(_HasEndpoints)' != 'true'" />
      <_AccessorCompilationReferenceItem Include="@(AccessorCompilationReference->'&lt;Reference Include=&quot;%(Filename)&quot; HintPath=&quot;%(FullPath)&quot; Private=&quot;False&quot; /&gt;')" />
      <_AccessorCompilationPackageReferenceItemSource Include="$(_DibixName)" Version="$(DibixSdkVersion)" />
      <_AccessorCompilationPackageReferenceItemSource Include="$(_DibixHttpServerName)" Version="$(DibixSdkVersion)" />
      <_AccessorCompilationPackageReferenceItemSource Include="$(_DibixHttpServerName).AspNet" Version="$(DibixSdkVersion)" />
      <_AccessorCompilationPackageReferenceItemSource Include="Newtonsoft.Json" Version="$(PackageVersion_Newtonsoft_Json)" />
      <_AccessorCompilationPackageReferenceItem Include="@(_AccessorCompilationPackageReferenceItemSource->'&lt;PackageReference Include=&quot;%(Identity)&quot; Version=&quot;%(Version)&quot; /&gt;')"
                                                Condition="'$(ManagePackageVersionsCentrally)' != 'true'" />
      <_AccessorCompilationPackageReferenceItem Include="@(_AccessorCompilationPackageReferenceItemSource->'&lt;PackageReference Include=&quot;%(Identity)&quot; /&gt;')"
                                                Condition="'$(ManagePackageVersionsCentrally)' == 'true'" />
    </ItemGroup>

    <PropertyGroup Condition="'$(ProduceAccessor)' == 'true'">
      <_AccessorIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(_AccessorTargetFramework)</TargetFramework>

    <OutDir>.</OutDir>
    <TargetName>$(AccessorOutputName)</TargetName>
    <EnableDefaultItems>false</EnableDefaultItems>
    <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(_SignAssembly)</SignAssembly>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <NoWarn>nullable</NoWarn>

    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <Description>$(Description)</Description>
    <FileVersion>$(FileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
    <Product>$(Product)</Product>
    <Trademark>$(Trademark)</Trademark>
    <AssemblyTitle>$(AssemblyTitle)</AssemblyTitle>
    <AssemblyVersion>$(AssemblyVersion)</AssemblyVersion>
  </PropertyGroup>

  <ItemGroup>
    @(_AccessorCompilationSourceItem->'%(Identity)', '%0a    ')
  </ItemGroup>

  <ItemGroup>
    @(_AccessorCompilationPackageReferenceItem->'%(Identity)', '%0a    ')
  </ItemGroup>

  <ItemGroup>
    @(_AccessorCompilationReferenceItem->'%(Identity)', '%0a    ')
  </ItemGroup>

  <Target Name="DumpResolvedDibixReferencePaths" AfterTargets="ResolvePackageAssets">
    <ItemGroup>
      <_DibixReferencePath Include="%40(ResolvedCompileFileDefinitions)" />
    </ItemGroup>

    <WriteLinesToFile File="%24(MSBuildThisFileDirectory)nuget.output" Lines="%40(_DibixReferencePath)" Overwrite="True" />
  </Target>

</Project>
]]>
      </_AccessorIntermediateProjectFileContent>
      <_AccessorIntermediateProjectFilePath>$(_AccessorIntermediatePathNoExt).csproj</_AccessorIntermediateProjectFilePath>
    </PropertyGroup>

    <WriteLinesToFile File="$(_AccessorIntermediateProjectFilePath)"
                      Lines="$(_AccessorIntermediateProjectFileContent)"
                      Overwrite="True"
                      Condition="'$(ProduceAccessor)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(_AccessorIntermediateProjectFilePath)" />
    </ItemGroup>

    <Exec Command="$(_BuildCommand) &quot;$(_AccessorIntermediateProjectFilePath)&quot;"
          Condition="'$(ProduceAccessor)' == 'true'"/>

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)nuget.output" />
      <FileWrites Include="$(IntermediateOutputPath)obj/**" />
    </ItemGroup>


    <!-- Endpoint assembly & package generation -->
    <ItemGroup Condition="'$(_ProduceEndpoints)' == 'true'">
      <_EndpointCompilationPackageReferenceItemSource Include="$(_DibixName)" Version="$(DibixSdkVersion)" />
      <_EndpointCompilationPackageReferenceItemSource Include="$(_DibixHttpServerName)" Version="$(DibixSdkVersion)" />
      <_EndpointCompilationPackageReferenceItemSource Include="$(_DibixHttpServerName).AspNetCore" Version="$(DibixSdkVersion)" />
      <_EndpointCompilationPackageReferenceItem Include="@(_EndpointCompilationPackageReferenceItemSource->'&lt;PackageReference Include=&quot;%(Identity)&quot; Version=&quot;%(Version)&quot; /&gt;')"
                                                Condition="'$(ManagePackageVersionsCentrally)' != 'true'" />
      <_EndpointCompilationPackageReferenceItem Include="@(_EndpointCompilationPackageReferenceItemSource->'&lt;PackageReference Include=&quot;%(Identity)&quot; /&gt;')"
                                                Condition="'$(ManagePackageVersionsCentrally)' == 'true'" />
    </ItemGroup>

    <PropertyGroup Condition="'$(_ProduceEndpoints)' == 'true'">
      <_EndpointBinaryExt>.dbxc</_EndpointBinaryExt>
      <_EndpointBinaryFileName>$(_EndpointSourceName)$(_EndpointBinaryExt)</_EndpointBinaryFileName>
      <_EndpointIntermediateBinaryPath>$(IntermediateOutputPath)$(_EndpointBinaryFileName)</_EndpointIntermediateBinaryPath>
      <_EndpointTargetFramework>net8.0</_EndpointTargetFramework>
      <_EndpointIntermediateProjectFilePath>$(IntermediateOutputPath)$(_EndpointSourceName).csproj</_EndpointIntermediateProjectFilePath>
      <_EndpointIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(_EndpointTargetFramework)</TargetFramework>

    <OutDir>.</OutDir>
    <TargetExt>$(_EndpointBinaryExt)</TargetExt>
    <EnableDefaultItems>false</EnableDefaultItems>
    <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(_SignAssembly)</SignAssembly>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <NoWarn>nullable</NoWarn>
    <EmbedAllSources>true</EmbedAllSources>
    <DebugType>embedded</DebugType>

    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <Description>$(Description)</Description>
    <FileVersion>$(FileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
    <Product>$(Product)</Product>
    <Trademark>$(Trademark)</Trademark>
    <AssemblyTitle>$(AssemblyTitle)</AssemblyTitle>
    <AssemblyVersion>$(AssemblyVersion)</AssemblyVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_EndpointSourceFileName)" />
  </ItemGroup>

  <ItemGroup>
    @(_EndpointCompilationPackageReferenceItem->'%(Identity)', '%0a    ')
  </ItemGroup>

</Project>
]]>
      </_EndpointIntermediateProjectFileContent>
    </PropertyGroup>

    <WriteLinesToFile Condition="'$(_ProduceEndpoints)' == 'true'"
                      File="$(_EndpointIntermediateProjectFilePath)"
                      Lines="$(_EndpointIntermediateProjectFileContent)"
                      Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_EndpointIntermediateProjectFilePath)" />
    </ItemGroup>

    <Exec Command="$(_BuildCommand) &quot;$(_EndpointIntermediateProjectFilePath)&quot;"
          Condition="'$(_ProduceEndpoints)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(_EndpointIntermediateBinaryPath)" />
      <FileWrites Include="$(IntermediateOutputPath)obj/**" />
    </ItemGroup>

    <!-- Create artifact package (.dbx) -->
    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_CreatePackageInputFile>$(IntermediateOutputPath)package.input</_CreatePackageInputFile>
    </PropertyGroup>

    <ItemGroup>
      <_CreatePackageInputItem Include="ProductName
  $(ProductName)" />
      <_CreatePackageInputItem Include="AreaName
  $(AreaName)" />
      <_CreatePackageInputItem Include="ArtifactTargetFileName
  $(_EndpointTargetFileName)" />
      <_CreatePackageInputItem Include="PackageMetadataFileName
  $(_PackageMetadataFileName)" />
      <_CreatePackageInputItem Include="CompiledArtifactFileName
  $(_EndpointBinaryFileName)" />
      <_CreatePackageInputItem Include="OutputDirectory
  $(IntermediateOutputPath)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_CreatePackageInputFile)"
                      Lines="@(_CreatePackageInputItem)"
                      Overwrite="True"
                      Condition="'$(_ProduceEndpoints)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(_CreatePackageInputFile)" />
    </ItemGroup>

    <Exec Command="$(DibixCliPath) pack &quot;$(_CreatePackageInputFile)&quot;"
          Condition="'$(_ProduceEndpoints)' == 'true'" />

    <ItemGroup>
      <FileWrites Include="$(_EndpointIntermediatePackagePath)" />
    </ItemGroup>


    <!-- Client assembly info & DLL generation -->
    <PropertyGroup Condition="'$(_ProduceClient)' == 'true'">
      <_ClientIntermediateSymbolsPath>$(IntermediateOutputPath)$(ClientOutputName).pdb</_ClientIntermediateSymbolsPath>
      <_ClientTargetFramework>$(DibixTargetFramework)</_ClientTargetFramework>
    </PropertyGroup>

    <ItemGroup Condition="'$(_ProduceClient)' == 'true'">
      <_ClientCompilationPackageReferenceItemSource Include="$(_DibixHttpClientName)" Version="$(DibixSdkVersion)" />
      <_ClientCompilationPackageReferenceItemSource Include="Microsoft.AspNet.WebApi.Client" Version="$(PackageVersion_Microsoft_AspNet_WebApi_Client)" />
      <_ClientCompilationPackageReferenceItemSource Include="Microsoft.Extensions.Http" Version="$(PackageVersion_Microsoft_Extensions_Http)" />
      <_ClientCompilationPackageReferenceItem Include="@(_ClientCompilationPackageReferenceItemSource->'&lt;PackageReference Include=&quot;%(Identity)&quot; Version=&quot;%(Version)&quot; /&gt;')"
                                              Condition="'$(ManagePackageVersionsCentrally)' != 'true'"/>
      <_ClientCompilationPackageReferenceItem Include="@(_ClientCompilationPackageReferenceItemSource->'&lt;PackageReference Include=&quot;%(Identity)&quot; /&gt;')"
                                              Condition="'$(ManagePackageVersionsCentrally)' == 'true'"/>
    </ItemGroup>

    <PropertyGroup Condition="'$(_ProduceClient)' == 'true'">
      <_ClientIntermediateProjectFilePath>$(_ClientIntermediatePathNoExt).csproj</_ClientIntermediateProjectFilePath>
      <_ClientIntermediateProjectFileContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(_ClientTargetFramework)</TargetFramework>
    
    <OutDir>.</OutDir>
    <EnableDefaultItems>false</EnableDefaultItems>
    <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
    <AssemblyOriginatorKeyFile>$(AssemblyOriginatorKeyFile)</AssemblyOriginatorKeyFile>
    <SignAssembly>$(_SignAssembly)</SignAssembly>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <NoWarn>nullable</NoWarn>

    <Company>$(Company)</Company>
    <Copyright>$(Copyright)</Copyright>
    <Description>$(Description)</Description>
    <FileVersion>$(FileVersion)</FileVersion>
    <InformationalVersion>$(InformationalVersion)</InformationalVersion>
    <Product>$(Product)</Product>
    <Trademark>$(Trademark)</Trademark>
    <AssemblyTitle>$(AssemblyTitle)</AssemblyTitle>
    <AssemblyVersion>$(AssemblyVersion)</AssemblyVersion>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(_ClientSourceFileName)" />
  </ItemGroup>

  <ItemGroup>
    @(_ClientCompilationPackageReferenceItem->'%(Identity)', '%0a    ')
  </ItemGroup>

  <ItemGroup Condition="'$(DibixTargetFrameworkRuntime)' != 'Core'">
    <Reference Include="System.Net.Http" />
  </ItemGroup>

</Project>
]]>
      </_ClientIntermediateProjectFileContent>
    </PropertyGroup>

    <WriteLinesToFile Condition="'$(_ProduceClient)' == 'true'"
                      File="$(_ClientIntermediateProjectFilePath)"
                      Lines="$(_ClientIntermediateProjectFileContent)"
                      Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_ClientIntermediateProjectFilePath)" />
    </ItemGroup>

    <Exec Condition="'$(_ProduceClient)' == 'true'"
          Command="$(_BuildCommand) &quot;$(_ClientIntermediateProjectFilePath)&quot;" />

    <ItemGroup>
      <FileWrites Include="$(_ClientIntermediateAssemblyPath)" />
      <FileWrites Include="$(_ClientIntermediateSymbolsPath)" />
      <FileWrites Include="$(IntermediateOutputPath)obj/**" />
    </ItemGroup>
  </Target>


  <!-- 
    It is important to have this as a separate target that will always be executed.
    Previously this was done within the SqlCore target, but if that is skipped,
    the necessary FileWrites are not added, and the IncrementalClean target 
    will delete the outputs after the first build.
  -->
  <Target Name="CopyArtifactsToOuputDirectory"
          AfterTargets="CopyFilesToOutputDirectory"
          DependsOnTargets="SqlCore;CopyFilesToOutputDirectory">

    <PropertyGroup Condition="'$(_ProduceClient)' == 'true'">
      <_ClientPathNoExt>$(TargetDir)$(ClientOutputName)</_ClientPathNoExt>
      <ClientTargetPath>$(_ClientPathNoExt).dll</ClientTargetPath>
      <ClientOutputSymbolsPath>$(_ClientPathNoExt).pdb</ClientOutputSymbolsPath>
    </PropertyGroup>

    <PropertyGroup>
      <ArtifactPackagePath Condition="'$(_ProduceEndpoints)' == 'true'">$(TargetDir)$(_EndpointTargetFileName)</ArtifactPackagePath>
    </PropertyGroup>

    <ItemGroup>
      <Docs Include="@(_DocsFiles->'$(OutDir)/%(Identity)')" />
    </ItemGroup>

    <!-- Copy generated client assembly (.dll) -->
    <Copy SourceFiles="$(_ClientIntermediateAssemblyPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_ProduceClient)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Copy the debug information file (.pdb) of the generated client assembly -->
    <Copy SourceFiles="$(_ClientIntermediateSymbolsPath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_ProduceClient)' == 'true' and '$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Copy the artifact package (.dbx) -->
    <Copy SourceFiles="$(_EndpointIntermediatePackagePath)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <!-- Publish docs -->
    <Copy SourceFiles="@(_DocsFiles->'$(IntermediateOutputPath)/%(Identity)')"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>
  </Target>


  <!--
    TODO: Investigate if there is a more elegant solution
    The following build error occured since migrating the SDK to .NET 8.
    It occurs only when using dotnet build instead of msbuild.
    It doesn't matter if the assembly is compiled with .NET Framework or .NET Core as target framework.
    -
    Build error SQL72025: The referenced assembly <Assembly-Name-Of-The-Current-Project.dll> is corrupt or not valid.
  -->
  <Target Name="PrepareSqlBuild" BeforeTargets="SqlBuild" Condition="'$(MSBuildRuntimeType)' == 'Core'">
    <PropertyGroup>
      <IntermediateTargetFullFileName />
    </PropertyGroup>
  </Target>


  <!-- Append our own metadata to the produced dacpac file -->
  <Target Name="SignDacFile"
          AfterTargets="SqlBuild"
          DependsOnTargets="ResolveArtifactReferences;SqlBuild">

    <!-- Prepare & write input file then exec CLI -->
    <PropertyGroup>
      <_SignDacInputFile>$(IntermediateOutputPath)sign.input</_SignDacInputFile>
      <LockRetryCount Condition="'$(LockRetryCount)' == ''">10</LockRetryCount>
    </PropertyGroup>

    <ItemGroup>
      <_SignDacFileInputItem Include="DacFilePath
  $(SqlTargetPath)" />
      <_SignDacFileInputItem Include="IsEmbedded
  $(IsEmbedded)" />
      <_SignDacFileInputItem Include="LockRetryCount
  $(LockRetryCount)" />
    </ItemGroup>

    <WriteLinesToFile File="$(_SignDacInputFile)" Lines="@(_SignDacFileInputItem)" Overwrite="True" />

    <ItemGroup>
      <FileWrites Include="$(_SignDacInputFile)" />
    </ItemGroup>

    <Exec Command="$(DibixCliPath) sign &quot;$(_SignDacInputFile)&quot;" />
  </Target>


  <!-- Make resolved Dibix NuGet reference paths available for other targets -->
  <Target Name="PublishDibixReferenceAssemblies">
    <ReadLinesFromFile File="$(IntermediateOutputPath)nuget.output">
      <Output TaskParameter="Lines" ItemName="DibixReferenceAssemblyPath" />
    </ReadLinesFromFile>
  </Target>

</Project>