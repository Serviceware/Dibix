using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using Dibix.Sdk.Abstractions;
using Dibix.Sdk.CodeGeneration.CSharp;

namespace Dibix.Sdk.CodeGeneration
{
    public abstract class CodeGenerator
    {
        #region Fields
        private static readonly string Header = $@"/*------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Dibix SDK {FileVersionInfo.GetVersionInfo(typeof(CodeGenerator).Assembly.Location).FileVersion}.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------*/";
        private readonly IList<ArtifactWriterBase> _writers;
        private readonly ISchemaRegistry _schemaRegistry;
        private readonly ILogger _logger;
        #endregion

        #region Constructor
        protected CodeGenerator(CodeGenerationModel model, ISchemaRegistry schemaRegistry, ILogger logger)
        {
            _schemaRegistry = schemaRegistry;
            _logger = logger;
            _writers = new Collection<ArtifactWriterBase>();
            _writers.AddRange(SelectWriters(model));
        }
        #endregion

        #region Public Methods
        public string Generate(CodeGenerationModel model)
        {
            if (_logger.HasLoggedErrors)
                return "\"Please fix the errors first\"";
            
            StringWriter writer = new StringWriter();
            writer.WriteLine(Header);
            Write(writer, model);
            return writer.ToString().Trim();
        }
        #endregion

        #region Protected Methods
        protected virtual void Write(StringWriter writer, CodeGenerationModel model)
        {
            IList<ArtifactWriterBase> writers = _writers.Where(x => x.HasContent(model)).ToArray();
            //if (!writers.Any())
            //    return;

            // Prepare writer
            IEnumerable<CSharpAnnotation> globalAnnotations = CollectGlobalAnnotations(model)
                                                                  .Concat(writers.SelectMany(x => x.GetGlobalAnnotations(model)));
            CSharpWriter csWriter = new CSharpWriter(writer, globalAnnotations);
            CSharpStatementScope output = csWriter.Root.Output;

            CodeGenerationContext context = new CodeGenerationContext(csWriter.Root, model, _schemaRegistry, _logger);
            OnContextCreated(context);

            IList<IGrouping<string, ArtifactWriterBase>> childWriterGroups = writers.GroupBy(x => x.LayerName).ToArray();
            for (int i = 0; i < childWriterGroups.Count; i++)
            {
                IGrouping<string, ArtifactWriterBase> nestedWriterGroup = childWriterGroups[i];

                // Don't enter layer name if project has multiple areas
                if (context.Model.AreaName != null)
                    context.SetScopeName(nestedWriterGroup.Key);

                IList<ArtifactWriterBase> nestedWriters = nestedWriterGroup.ToArray();
                for (int j = 0; j < nestedWriters.Count; j++)
                {
                    ArtifactWriterBase nestedWriter = nestedWriters[j];
                    using (output.CreateRegion(nestedWriter.RegionName))
                    {
                        nestedWriter.Write(context);
                    }

                    if (j + 1 < nestedWriters.Count)
                        output.AddSeparator();
                }

                if (i + 1 < childWriterGroups.Count)
                    output.AddSeparator();
            }

            csWriter.Generate();
        }

        protected virtual IEnumerable<ArtifactWriterBase> SelectWriters(CodeGenerationModel model)
        {
            yield break;
        }

        protected virtual IEnumerable<CSharpAnnotation> CollectGlobalAnnotations(CodeGenerationModel model)
        {
            yield break;
        }

        protected virtual void OnContextCreated(CodeGenerationContext context)
        {
        }
        #endregion
    }
}