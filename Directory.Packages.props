<Project>
  <ItemGroup>
    <GlobalPackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" />
    <GlobalPackageReference Include="Nerdbank.GitVersioning" Version="3.7.115" />

    <PackageVersion Include="coverlet.collector" Version="6.0.4" />
    <PackageVersion Include="Dapper.StrongName" Version="2.1.66" />
    <PackageVersion Include="Duende.IdentityModel" Version="7.0.0" />
    <PackageVersion Include="ILRepack" Version="2.0.35" />
    <PackageVersion Include="Microsoft.AspNet.WebApi.Client" Version="6.0.0" />
    <PackageVersion Include="Microsoft.AspNet.WebApi.Core" Version="5.3.0" />
    <PackageVersion Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.8" />
    <PackageVersion Include="Microsoft.Build.Utilities.Core" Version="17.11.4" />
    <!--
      Be careful to update this package, because it might require a newer version of the compiler:
      The analyzer assembly 'Dibix.Testing.Generators.dll' references version '4.11.0.0' of the compiler, which is newer than the currently running version '4.8.0.0'. 
      Therefore, the .NET SDK version needs to be updated in the global.json, this also requires the build machines to have this version installed.
      The UseDotNet@2 task can help here, but it might also require a newer version of MSBuild, therefore requiring a VS update:
      Version 8.0.400 of the .NET SDK requires at least version 17.9.5 of MSBuild. The current available version of MSBuild is 17.8.3.51904. Change the .NET SDK specified in global.json to an older version that requires the MSBuild version currently available.
    -->
    <PackageVersion Include="Microsoft.CodeAnalysis.CSharp" Version="4.11.0" />
    <PackageVersion Include="Microsoft.CodeAnalysis.Analyzers" Version="3.11.0" />
    <PackageVersion Include="Microsoft.Data.SqlClient" Version="6.0.1" />
    <PackageVersion Include="Microsoft.Extensions.Configuration.Abstractions" Version="9.0.0" />
    <PackageVersion Include="Microsoft.Extensions.Configuration.Binder" Version="9.0.3" />
    <PackageVersion Include="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="9.0.3" />
    <PackageVersion Include="Microsoft.Extensions.Configuration.Json" Version="9.0.3" />
    <PackageVersion Include="Microsoft.Extensions.Configuration.UserSecrets" Version="9.0.3" />
    <PackageVersion Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="9.0.0" />
    <PackageVersion Include="Microsoft.Extensions.Http" Version="9.0.3" />
    <PackageVersion Include="Microsoft.Extensions.Hosting" Version="9.0.0" />
    <PackageVersion Include="Microsoft.Extensions.Hosting.WindowsServices" Version="9.0.0" />
    <PackageVersion Include="Microsoft.Extensions.Options.ConfigurationExtensions" Version="9.0.3" />
    <PackageVersion Include="Microsoft.Extensions.Options.DataAnnotations" Version="9.0.3" />
    <PackageVersion Include="Microsoft.IdentityModel.LoggingExtensions" Version="8.6.1" />
    <PackageVersion Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
    <PackageVersion Include="Microsoft.OpenApi" Version="1.6.23" />
    <PackageVersion Include="Microsoft.SqlServer.DacFx" Version="162.5.57" />
    <PackageVersion Include="Moq" Version="4.20.72" />
    <PackageVersion Include="MSTest.TestAdapter" Version="3.8.3" />
    <PackageVersion Include="MSTest.TestFramework" Version="3.8.3" />
    <PackageVersion Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageVersion Include="Newtonsoft.Json.Schema" Version="4.0.1" />
    <PackageVersion Include="System.ComponentModel.Annotations" Version="5.0.0" />
    <!--
      Be careful to update this package, because the latest and last version makes the usage obsolete,
      recommending to use Microsoft.Data.SqlClient, which is perfectly reasonable.
      However, we currently compile artifacts using only one target framework (.NETStandard).
      Therefore we can't easily switch to Microsoft.Data.SqlClient, because the consumer might not be able to migrate easily.
      If the consumer compiles for .NET Framework, there is nothing to worry about, because System.Data is still supported,
      and the .NETStandard framework simply serves the purpose of API compatibility, the NuGet package itself will not be used.
      If the consumer compiles for .NET 8, he will use Microsoft.Data.SqlClient, because of compilation symbols.
    -->
    <PackageVersion Include="System.Data.SqlClient" Version="4.8.6" />
    <PackageVersion Include="System.Diagnostics.EventLog" Version="9.0.3" />
    <PackageVersion Include="System.IO.Packaging" Version="9.0.3" />
    <PackageVersion Include="System.Reflection.Emit" Version="4.7.0" />
    <PackageVersion Include="System.Reflection.Metadata" Version="9.0.3" />
    <PackageVersion Include="Testcontainers" Version="4.3.0" />
    <PackageVersion Include="Testcontainers.MsSql" Version="4.0.0" />
  </ItemGroup>
</Project>