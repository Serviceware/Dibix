parameters:
- name: buildConfiguration
  displayName: Build configuration
  type: string
  default: Release
  values:
  - Debug
  - Release
  
variables:
- template: azure-pipelines-template/variables.yml

stages:
- stage: Initialize
  jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: azure-pipelines-template/initialize.yml

- stage: Run
  jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: azure-pipelines-template/run.yml
      parameters:
        operatingSystem: Linux
        configuration: ${{ parameters.buildConfiguration }}
        codeCoverageEngine: ${{ variables.codeCoverageEngine }}
  
  - job: macOS
    pool:
      vmImage: macOS-latest
    steps:
    - template: azure-pipelines-template/run.yml
      parameters:
        operatingSystem: macOS
        configuration: ${{ parameters.buildConfiguration }}
        codeCoverageEngine: ${{ variables.codeCoverageEngine }}
  
  - job: Windows
    pool:
      vmImage: windows-latest
    steps:
    - template: azure-pipelines-template/run.yml
      parameters:
        operatingSystem: Windows
        configuration: ${{ parameters.buildConfiguration }}
        codeCoverageEngine: ${{ variables.codeCoverageEngine }}

- stage: Finalize
  condition: succeededOrFailed()
  jobs:
  - job: Windows
    pool:
      # Use windows pool, because we are using the coverage outputs from the tests, that ran on windows.
      # Otherwise the report generator cannot resolve the original file paths.
      vmImage: windows-latest

    steps:
    - template: azure-pipelines-template/install-dotnet-sdk.yml
    - template: azure-pipelines-template/publish-coverage.yml
      parameters:
        codeCoverageEngine: ${{ variables.codeCoverageEngine }}