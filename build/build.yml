parameters:
- name: buildConfiguration
  displayName: Build configuration
  type: string
  default: Release
  values:
  - Debug
  - Release

variables:
- template: azure-pipelines-template/variables.yml

stages:
- stage: Initialize
  jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: azure-pipelines-template/initialize.yml

- stage: Run
  jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: azure-pipelines-template/run.yml
      parameters:
        operatingSystem: Linux
        runtimeIdentifier: linux-x64
        configuration: ${{ parameters.buildConfiguration }}
        codeCoverageEngine: ${{ variables.codeCoverageEngine }}

  - job: macOS
    pool:
      vmImage: macOS-latest
    steps:
    # Long term investigation for sporadically failing test 'Dibix.Http.Server.Tests.HttpParameterResolverTest.Compile_EnvironmentSource'
    # due to DNS resolution issues: 'nodename nor servname provided, or not known'
    - task: PowerShell@2
      displayName: üßê Collect DNS resolution issue diagnostics
      inputs:
        targetType: inline
        script: |
          cat /etc/hosts
          Write-Output "Dns.GetHostName(): $([System.Net.Dns]::GetHostName())"
          try { Write-Output "Dns.GetHostEntry(Dns.GetHostName()): $([System.Net.Dns]::GetHostEntry([System.Net.Dns]::GetHostName()).HostName)" } catch { Write-Output $_.Exception.Message }
          try { Write-Output "Dns.GetHostEntry(''): $([System.Net.Dns]::GetHostEntry("""").HostName)" } catch { Write-Output $_.Exception.Message }
        continueOnError: true
    - template: azure-pipelines-template/run.yml
      parameters:
        operatingSystem: macOS
        runtimeIdentifier: osx-x64
        configuration: ${{ parameters.buildConfiguration }}
        codeCoverageEngine: ${{ variables.codeCoverageEngine }}

  - job: Windows
    pool:
      vmImage: windows-latest
    steps:
    - template: azure-pipelines-template/run.yml
      parameters:
        operatingSystem: Windows
        runtimeIdentifier: win-x64
        configuration: ${{ parameters.buildConfiguration }}
        codeCoverageEngine: ${{ variables.codeCoverageEngine }}

- stage: Finalize
  jobs:
  - job: Windows
    pool:
      # Use windows pool, because we are using the coverage outputs from the tests, that ran on windows.
      # Otherwise the report generator cannot resolve the original file paths.
      vmImage: windows-latest

    steps:
    - template: azure-pipelines-template/install-dotnet-sdk.yml
    - template: azure-pipelines-template/publish-coverage.yml
      parameters:
        codeCoverageEngine: ${{ variables.codeCoverageEngine }}

  # Execution of tests has continueOnError: true to ensure we publish test results/coverage for failed tests.
  # This will make the pipeline partially succeed.
  # Unfortunately, this will still trigger a release, because pipeline triggers only evaluate failed as non successful.
  # To ensure the build is failed, we throw after all steps have executed.
- stage: Evaluate
  condition: eq(dependencies.Run.result, 'SucceededWithIssues')
  jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo '##[error]Failing build, that has partially succeeded. A previous task has failed'
        exit 1
      displayName: üíÇ Fail build if partially succeeded
