<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Define inputs and outputs so the targets know when they need to be rebuilt -->
  <Target Name="SetupSqlBuildInputs" AfterTargets="_SetupSqlBuildInputs">
    <ItemGroup>
      <!-- 
        The intermediate assembly/pdb is used as an input,
        therefore each time we run the CompileArtifacts target,
        both these inputs are newer than the dacpac, and all targets
        are forced to rebuild.
      -->
      <SqlBuildInputItem Remove="$(IntermediateTargetFullFileName)" />
      <SqlBuildInputItem Remove="$(IntermediateSymbolsFullFileName)" />

      <_SqlTargetInput Include="$(DibixSdkPath)" />
      <_SqlTargetInput Include="$(MSBuildProjectFullPath)" />
      <_SqlTargetInput Include="$(MSBuildAllProjects)" />

      <!--
        Since the SqlCodeAnalysis target does not produce any output, 
        we use the dacpac to detect if it needs to be rebuilt.
        To make this work we need to force rebuilding the dacpac aswell,
        by specifying the same inputs.
      -->
      <SqlBuildInputItem Include="@(_SqlTargetInput)" />

      <!-- SqlCodeAnalysis -->
      <SqlCodeAnalysisInput Include="@(_SqlTargetInput)" />
      <SqlCodeAnalysisInput Include="@(Build)" />
      <SqlCodeAnalysisInput Include="@(PreDeploy)" />
      <SqlCodeAnalysisInput Include="@(PostDeploy)" />
      <SqlCodeAnalysisInput Include="@(SqlReferencePath)" />
      <SqlCodeAnalysisOutput Include="@(SqlTarget)" /> <!-- dacpac -->

      <!-- CompileArtifacts -->
      <CompileArtifactsInput Include="@(_SqlTargetInput)" />
      <CompileArtifactsInput Include="@(Build)" />
      <CompileArtifactsInput Include="@(Contract)" />
      <CompileArtifactsInput Include="@(Endpoint)" />
      <CompileArtifactsInput Include="@(SqlReferencePath)" />
      <CompileArtifactsOutput Include="$(TargetPath)" />
      <CompileArtifactsOutput Include="$(ClientTargetPath)" />
    </ItemGroup>
  </Target>

  <!-- Run our own sql code analysis rules -->
  <Target Name="SqlCodeAnalysis" 
          BeforeTargets="SqlBuild"
          DependsOnTargets="SetupSqlBuildInputs"
          Inputs="@(SqlCodeAnalysisInput)"
          Outputs="@(SqlCodeAnalysisOutput)">
    <PropertyGroup>
      <SqlNamingConventionPrefix Condition="'$(SqlNamingConventionPrefix)' == ''">dbx</SqlNamingConventionPrefix>
    </PropertyGroup>

    <ItemGroup>
      <SqlCodeAnalysisScriptItem Include="@(PreDeploy)" />
      <SqlCodeAnalysisScriptItem Include="@(PostDeploy)" />
    </ItemGroup>

    <SqlCodeAnalysisTask SdkPath="$(DibixSdkPath)"
                         RuntimePath="$(DibixRuntimePath)"
                         SSDTDirectory="$(SqlServerRedistPath)"
                         NamingConventionPrefix="$(SqlNamingConventionPrefix)"
                         DatabaseSchemaProviderName="$(DSP)"
                         ModelCollation="$(ModelCollation)"
                         Source="@(Build)"
                         ScriptSource="@(SqlCodeAnalysisScriptItem)"
                         SqlReferencePath="@(SqlReferencePath)"
                         IsIDEBuild="$(BuildingInsideVisualStudio)" />
  </Target>

  <!-- Compile database accessors for stored procedures including their contracts and an API endpoint configuration -->
  <Target Name="SetupCompilationArtifacts" BeforeTargets="SetupSqlBuildInputs" Condition="$(CompileArtifacts) == 'true'">
    <ItemGroup>
      <Contract Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Contracts\\')) and %(Extension) == '.json'" />
      <Endpoint Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Endpoints\\')) and %(Extension) == '.json'" />
    </ItemGroup>
  </Target>
  <Target Name="CompileArtifacts" 
          AfterTargets="PostBuildEvent" 
          DependsOnTargets="ResolveArtifactReferences;SetupSqlBuildInputs"
          Inputs="@(CompileArtifactsInput)"
          Outputs="@(CompileArtifactsOutput)"
          Condition="$(CompileArtifacts) == 'true'">
    <PropertyGroup>
      <LangVersion>latest</LangVersion>
      <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
      <CopyOutputSymbolsToOutputDirectory>true</CopyOutputSymbolsToOutputDirectory>

      <ServerOutputName>@(IntermediateAssembly->'%(Filename)')</ServerOutputName>
      <ServerIntermediateFilePathNoExt>$(IntermediateOutputPath)$(ServerOutputName)</ServerIntermediateFilePathNoExt>
      <ServerIntermediateFilePath>$(ServerIntermediateFilePathNoExt).cs</ServerIntermediateFilePath>
      <ClientIntermediateFilePathNoExt Condition="'$(ClientOutputName)' != ''">$(IntermediateOutputPath)$(ClientOutputName)</ClientIntermediateFilePathNoExt>
      <ClientIntermediateFilePath Condition="'$(ClientOutputName)' != ''">$(ClientIntermediateFilePathNoExt).cs</ClientIntermediateFilePath>
    </PropertyGroup>

    <ItemGroup>
      <ServerCompilationReference Include="@(ArtifactReference->'%(RelativeDir)%(Filename).dll')" Condition="!$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)%(Extension)', '^master|msdb(\.dacpac)$'))" />
    </ItemGroup>

    <CodeGenerationTask SdkPath="$(DibixSdkPath)"
                        RuntimePath="$(DibixRuntimePath)"
                        SSDTDirectory="$(SqlServerRedistPath)"
                        ProjectDirectory="$(MSBuildProjectDirectory)"
                        ProductName="$(ProductName)"
                        AreaName="$(AreaName)"
                        DefaultOutputFilePath="$(ServerIntermediateFilePath)"
                        ClientOutputFilePath="$(ClientIntermediateFilePath)"
                        Source="@(Build)"
                        Contracts="@(Contract)"
                        Endpoints="@(Endpoint)"
                        References="@(ServerCompilationReference)"
                        IsIDEBuild="$(BuildingInsideVisualStudio)"
                        DatabaseSchemaProviderName="$(DSP)"
                        ModelCollation="$(ModelCollation)"
                        EmbedStatements="$(EmbedStatements)"
                        SqlReferencePath="@(SqlReferencePath)">
      <Output TaskParameter="AdditionalAssemblyReferences" ItemName="ServerCompilationReference" />
    </CodeGenerationTask>

    <PropertyGroup>
      <AssemblyProduct Condition="'$(AssemblyProduct)' == ''">$(ProductName)</AssemblyProduct>
    </PropertyGroup>

    <ItemGroup>
      <AssemblyAttribute Include="AssemblyCompany" Condition="'$(AssemblyCompany)' != ''">
        <_Parameter1>$(AssemblyCompany)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyProduct" Condition="'$(AssemblyProduct)' != ''">
        <_Parameter1>$(AssemblyProduct)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="AssemblyCopyright" Condition="'$(AssemblyCopyright)' != ''">
        <_Parameter1>$(AssemblyCopyright)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>


    <PropertyGroup>
      <ServerAssemblyInfoFile>$(ServerIntermediateFilePathNoExt)_AssemblyInfo.cs</ServerAssemblyInfoFile>
    </PropertyGroup>

    <ItemGroup>
      <ServerCompilationSource Include="$(ServerIntermediateFilePath)" />
      <ServerCompilationSource Include="$(ServerAssemblyInfoFile)" />
      <ServerCompilationReference Include="$(DibixRuntimePath)" />

      <ServerAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ServerAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(ServerOutputName)</_Parameter1>
      </ServerAssemblyAttribute>
      <ServerAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(AssemblyFileVersion)' != ''">
        <_Parameter1>$(AssemblyFileVersion)</_Parameter1>
      </ServerAssemblyAttribute>
    </ItemGroup>

    <WriteCodeFragment AssemblyAttributes="@(ServerAssemblyAttribute)" Language="C#" OutputFile="$(ServerAssemblyInfoFile)" />

    <!-- Compile main assembly -->
    <Csc DefineConstants="$(DefineConstants)"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="@(IntermediateAssembly)"
         References="@(ServerCompilationReference)"
         Sources="@(ServerCompilationSource)"
         TargetType="$(OutputType)" />

    <!-- Deploy assembly/pdb -->
    <Copy SourceFiles="@(IntermediateAssembly)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
    <Copy SourceFiles="@(_DebugSymbolsIntermediatePath)"
          DestinationFiles="@(_DebugSymbolsOutputPath)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>


    <PropertyGroup Condition="'$(ClientOutputName)' != ''">
      <ClientAssemblyInfoFile>$(ClientIntermediateFilePathNoExt)_AssemblyInfo.cs</ClientAssemblyInfoFile>
    </PropertyGroup>

    <ItemGroup Condition="'$(ClientOutputName)' != ''">
      <ClientCompilationSource Include="$(ClientIntermediateFilePath)" />
      <ClientCompilationSource Include="$(ClientAssemblyInfoFile)" />
      <ClientAssembly Include="$(IntermediateOutputPath)$(ClientOutputName).dll" />

      <ClientAssemblyAttribute Include="@(AssemblyAttribute)" />
      <ClientAssemblyAttribute Include="AssemblyTitle">
        <_Parameter1>$(ClientOutputName)</_Parameter1>
      </ClientAssemblyAttribute>
      <ClientAssemblyAttribute Include="AssemblyFileVersion" Condition="'$(ClientAssemblyFileVersion)' != ''">
        <_Parameter1>$(ClientAssemblyFileVersion)</_Parameter1>
      </ClientAssemblyAttribute>
    </ItemGroup>

    <WriteCodeFragment AssemblyAttributes="@(ClientAssemblyAttribute)" Language="C#" OutputFile="$(ClientAssemblyInfoFile)" Condition="'$(ClientOutputName)' != ''" />

    <!-- Compile contracts assembly if required -->
    <Csc Condition="'$(ClientOutputName)' != ''"
         DefineConstants="$(DefineConstants)"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="@(ClientAssembly)"
         Sources="@(ClientCompilationSource)"
         TargetType="$(OutputType)" />

    <!-- Deploy contracts assembly/pdb (if available -->
    <Copy SourceFiles="@(ClientAssembly)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(ClientOutputName)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
    <Copy SourceFiles="@(_DebugSymbolsIntermediatePath->'%(RelativeDir)$(ClientOutputName)%(Extension)')"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(ClientOutputName)' != '' and '$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>

</Project>