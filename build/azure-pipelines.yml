#pool:
  #name: Processes

#trigger:
#- main
#- rel/*

parameters:
- name: PublishPackages
  displayName: "\U0001FA82 Publish packages"
  type: boolean
  default: "false"

variables:
  # Publish packages automatically, when:
  # - Build was triggered by individual CI and commit message contains '[package]'
  # - Build was triggered manually and 'PublishPackages' was set to true
  # Note: 'Build.SourceVersionMessage' is null for manually triggered builds
  PublishPackages: "$[or(eq('${{ parameters.PublishPackages }}', true), contains(variables['Build.SourceVersionMessage'], '[package]'))]"

jobs:
- job: Initialize
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  #- powershell: (gci  env:* | sort-object name) # Print env variables

  #- script: "echo ##vso[task.setvariable variable=PublishPackages]true"
  #  displayName: "\U0001F50D Resolve 'PublishPackages' property from commmit message"
  #  condition: contains(variables['Build.SourceVersionMessage'], '[package]')

  - task: DotNetCoreCLI@2  
    displayName: "\U0001F913 Install NBGV"
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv

  - script: ./nbgv cloud
    displayName: "\U0001F58D Update pipeline instance name"

- job: BuildAndTest
  dependsOn: Initialize
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: DotNetCoreCLI@2
    displayName: "\U0001F52C Build debug"
    inputs:
      command: 'build'
      projects: |
        **/*.csproj
        !**/*.Tests.csproj

  - task: DotNetCoreCLI@2
    displayName: "\U0001F6A2 Build release"
    inputs:
      command: 'build'
      projects: |
        **/*.csproj
        !**/*.Tests.csproj
      arguments: '--configuration Release'

  - task: DotNetCoreCLI@2
    displayName: "\U0001F9EA Run unit tests"
    inputs:
      command: 'test'
      projects: |
        **/Dibix.Http.Client.Tests.csproj
        **/Dibix.Http.Server.Tests.csproj

- job: TestWin
  dependsOn: BuildAndTest
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: 'sqllocaldb start mssqllocaldb'
    displayName: "\U000023EB Start MSSQLLocalDB instance for Dibix.Dapper.Tests"

  - script: 'sqlcmd -S (localdb)\MSSQLLocalDB -Q "CREATE DATABASE [Dibix]"'
    displayName: "\U0001F5C4 Create database for Dibix.Dapper.Tests"

  - script: 'sqlcmd -S (localdb)\MSSQLLocalDB -i tests/Dibix.Dapper.Tests/Environment/Initialize.sql -d Dibix'
    displayName: "\U0001F527 Initialize database for Dibix.Dapper.Tests"

  - task: DotNetCoreCLI@2
    displayName: "\U0001F9EA Run unit tests"
    inputs:
      command: 'test'
      projects:  |
        **/Dibix.Dapper.Tests.csproj
        **/Dibix.Sdk.Tests.csproj
        **/Dibix.Sdk.VisualStudio.Tests.csproj
        **/Dibix.Tests.csproj
    env:
      # Required for Dibix.Dapper.Tests
      DefaultConnection:ConnectionString: 'Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Dibix;Integrated Security=True;'
      DefaultConnection:ProviderName: System.Data.SqlClient

- job: Packaging
  dependsOn: TestWin
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  #- task: DotNetCoreCLI@2
  #  displayName: "\U0001F4E6 Create packages"
  #  inputs:
  #    command: 'pack'
  #    packagesToPack: 'src\Dibix;src\Dibix.Dapper;src\Dibix.Http.Client;src\Dibix.Http.Server;src\Dibix.Sdk;src\Dibix.Testing'
  #    configuration: 'Release'
  #    verbosityPack: 'Normal'
  #    arguments: '/p:SonarQubeExclude=True'

  # Using custom DotNetCoreCLI task for dotnet pack, because the pack command does not accept arguments
  - template: dotnet-pack-template.yml
    parameters:
      packagesToPack:
        - Dibix
        - Dibix.Dapper
        - Dibix.Http.Client
        - Dibix.Http.Server
        - Dibix.Testing
  
  - task: DotNetCoreCLI@2
    displayName: "\U0001FA82 Publish packages"
    condition: and(succeeded(), eq(variables['PublishPackages'], true)) #, eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    inputs:
      #command: 'push'
      #packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      #nuGetFeedType: 'internal'
      #publishVstsFeed: '3faf84d3-2d7c-4a03-b5d2-4d12a0b38b6c' # Dibix

      # Using the push command is not possible with an API key, which is required for nuget.org
      # See this bug:
      # https://github.com/microsoft/azure-pipelines-tasks/issues/7160
      command: custom
      custom: nuget
      arguments: push $(Build.ArtifactStagingDirectory)/*.nupkg -s https://api.nuget.org/v3/index.json -k $(NuGetApiKey)

- job: PackagingWin
  dependsOn: Packaging
  pool:
    vmImage: 'windows-latest'
  steps:
  - template: dotnet-pack-template.yml
    parameters:
      packagesToPack:
        - Dibix.Sdk.Cli
  
  - task: DotNetCoreCLI@2
    displayName: "\U0001FA82 Publish packages"
    condition: and(succeeded(), eq(variables['PublishPackages'], true)) #, eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    inputs:
      command: custom
      custom: nuget
      arguments: push $(Build.ArtifactStagingDirectory)\*.nupkg -s https://api.nuget.org/v3/index.json -k $(NuGetApiKey)