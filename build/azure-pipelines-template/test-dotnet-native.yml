parameters:
- name: projects
  type: object
  default: { }
- name: configuration
  type: string
  values:
  - Debug
  - Release
- name: arguments
  type: string
  default:
 
steps:
- ${{ each project in parameters.projects }}:
  - task: DotNetCoreCLI@2
    displayName: 🧪 Test ${{ project }}
    continueOnError: true
    inputs:
      command: test
      projects: tests/${{ project }}
      testRunTitle: ${{ project }} ($(operatingSystem))
      publishTestResults: false
      arguments: >
        --results-directory $(Agent.TempDirectory)
        --logger trx;LogFileName=${{ project }}.trx
        --configuration ${{ parameters.configuration }}
        --no-restore
        --collect:"Code Coverage"
        ${{ parameters.arguments }}
        -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.CodeCoverage.ModulePaths.Include.ModulePath=^^.*\Dibix[^^\]*.dll
        -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.CodeCoverage.ModulePaths.Exclude.ModulePath=^^.*.Tests.dll$
  
  - task: PublishTestResults@2
    displayName: 📗 Publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: $(Agent.TempDirectory)/${{ project }}.trx
      testRunTitle: ${{ project }} ($(operatingSystem))
      buildPlatform: $(operatingSystem)
      buildConfiguration: ${{ parameters.configuration }}
      mergeTestResults: true
      failTaskOnFailedTests: false
  
  - pwsh: Get-ChildItem $(Agent.TempDirectory)/*/*.coverage | %{ Rename-Item -Path $_.FullName -NewName ${{ project }}.coverage }
    displayName: 🎨 Rename *.coverage -> ${{ project }}.coverage
  
  - task: CopyFiles@2
    displayName: 🪂 Prepare test artifacts
    inputs:
      SourceFolder: $(Agent.TempDirectory)
      TargetFolder: $(Build.ArtifactStagingDirectory)/test
      flattenFolders: true
      Contents: '*/*.coverage'
  
  - task: DeleteFiles@1
    displayName: 🧹 Cleanup previous coverage reports
    inputs:
      SourceFolder: $(Agent.TempDirectory)
      Contents: '*/${{ project }}.coverage'

- task: DotNetCoreCLI@2
  displayName: 📈 Install dotnet-coverage
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path $(Agent.TempDirectory) dotnet-coverage

- script: >
    $(Agent.TempDirectory)/dotnet-coverage
    merge
    --output $(Build.ArtifactStagingDirectory)/test/CodeCoverage.coverage
    $(Build.ArtifactStagingDirectory)/test/*.coverage
  displayName: 🔗 Merge code coverage results (*.coverage)
  
- script: >
    $(Agent.TempDirectory)/dotnet-coverage
    merge
    --output $(Build.ArtifactStagingDirectory)/test/Cobertura.xml
    --output-format cobertura
    $(Build.ArtifactStagingDirectory)/test/CodeCoverage.coverage"
  displayName: 🔗 Merge code coverage results (*.xml)
