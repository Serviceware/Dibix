trigger: none # We only want to trigger manually or based on resources
pr: none

parameters:
- name: publishNuGetPackages
  displayName: Publish NuGet packages
  type: boolean
  default: true
- name: createGitHubRelease
  displayName: Create GitHub release
  type: boolean
  default: true
- name: pushDockerImage
  displayName: Push docker image
  type: boolean
  default: true

resources:
  pipelines:
  - pipeline: CI
    source: Dibix
    trigger:
      tags:
      - auto-release

jobs:
- job: Linux
  pool:
    vmImage: ubuntu-latest
  steps:
  - template: azure-pipelines-template/nbgv.yml
  - script: |
      dockerImageTags=$(NBGV_SEMVER2)
      if [ "$(NBGV_PUBLICRELEASE)" == "True" ]; then
        isPreview="False"
        dockerImageTags+=",latest"
      else
        isPreview="True"
      fi
      if [ -n "$(NBGV_PRERELEASEVERSION)" ]; then
        isPreRelease="True"
      else
        isPreRelease="False"
      fi

      echo "##vso[task.setvariable variable=IsPreview]$isPreview"
      echo "##vso[task.setvariable variable=IsPreRelease]$isPreRelease"
      echo "##vso[task.setvariable variable=DockerImageTags]$dockerImageTags"
    displayName: ‚úçÔ∏è Initialize variables
  - script: env | sort -f
    displayName: üìñ Print environment variables

  - download: CI
    artifact: NuGet packages
    displayName: üì¨ Download 'NuGet packages' artifact

  - task: NuGetCommand@2
    displayName: üöÄ Publish packages
    inputs:
      command: push
      packagesToPush: "$(Pipeline.Workspace)/CI/NuGet packages/*.nupkg"
      nuGetFeedType: external
      publishFeedCredentials: NuGet.org
    condition: and(succeeded(), eq(${{ parameters.publishNuGetPackages }}, true))

  - download: CI
    artifact: Publish output (Linux)
    displayName: üì¨ Download 'Publish output (Linux)' artifact

  - download: CI
    artifact: Publish output (Windows)
    displayName: üì¨ Download 'Publish output (Windows)' artifact

  - download: CI
    artifact: Publish output (macOS)
    displayName: üì¨ Download 'Publish output (macOS)' artifact

  - ${{ if eq(parameters.pushDockerImage, true) }}:
    - template: azure-pipelines-template/docker-multiple.yml
      parameters:
        projects:
          - Dibix.Http.Host
          - Dibix.Worker.Host
        tags: $(DockerImageTags)

  - task: GitHubRelease@1
    displayName: üìù Create GitHub release
    inputs:
      gitHubConnection: github.com_C0nquistadore
      repositoryName: $(Build.Repository.Name)
      target: $(resources.pipeline.CI.sourceCommit)
      tagSource: userSpecifiedTag
      tag: v$(resources.pipeline.CI.runName)
      title: v$(resources.pipeline.CI.runName)
      isPreRelease: $(IsPreRelease)
      isDraft: $(IsPreview)
      assets: |
        $(Pipeline.Workspace)/CI/NuGet packages/*.nupkg
        $(Pipeline.Workspace)/CI/Publish output*/*.zip
      changeLogCompareToRelease: lastFullRelease
      changeLogCompareToReleaseTag: v$(NBGV_MAJORMINORVERSION)\.\d+$
      changeLogType: commitBased
    condition: and(succeeded(), eq(${{ parameters.createGitHubRelease }}, true))