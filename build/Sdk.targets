<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- 
      Skip compilation of default SQL CLR .NET assembly.
      The empty line in between by default contains:
      
      CoreCompile;
    -->
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;

      GenerateSerializationAssemblies;
      SqlBuild;
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>

    <!-- Skip copying the default SQL CLR .NET assembly to output -->
    <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>

    <DibixSdkPath>$(MSBuildThisFileDirectory)..\lib\net46\Dibix.Sdk.dll</DibixSdkPath>
    <DibixToolsDirectory Condition="$(DibixToolsDirectory) == ''">$(MSBuildThisFileDirectory)..\tools\net46\</DibixToolsDirectory>
    <DibixLibraryPath>$(DibixToolsDirectory)Dibix.dll</DibixLibraryPath>
    <DibixBuildToolsPath>$(DibixToolsDirectory)Dibix.MSBuild.dll</DibixBuildToolsPath>

    <ClientTargetPath Condition="'$(ClientOutputName)' != ''">$(TargetDir)$(ClientOutputName).dll</ClientTargetPath>
  </PropertyGroup>

  <ItemGroup>
    <!-- Clean target assembly, which is required to force rebuild of CompileArtifacts target -->
    <!-- This is probably not included, because we skip copying it to output -->
    <Clean Include="$(TargetPath)" />
    <Clean Include="$(ClientTargetPath)" />
  </ItemGroup>

  <UsingTask TaskName="SqlCodeAnalysisTask" AssemblyFile="$(DibixBuildToolsPath)" />
  <UsingTask TaskName="CodeGenerationTask" AssemblyFile="$(DibixBuildToolsPath)" />

  <!-- Define inputs and outputs so the targets know when they need to be rebuilt -->
  <Target Name="SetupSqlBuildInputs" AfterTargets="_SetupSqlBuildInputs">
    <ItemGroup>
      <!-- 
        The intermediate assembly/pdb is used as an input,
        therefore each time we run the CompileArtifacts target,
        both these inputs are newer than the dacpac, and all targets
        are forced to rebuild.
      -->
      <SqlBuildInputItem Remove="$(IntermediateTargetFullFileName)" />
      <SqlBuildInputItem Remove="$(IntermediateSymbolsFullFileName)" />

      <_SqlTargetInput Include="$(DibixSdkPath)" />
      <_SqlTargetInput Include="$(MSBuildProjectFullPath)" />
      <_SqlTargetInput Include="$(MSBuildAllProjects)" />

      <!--
        Since the SqlCodeAnalysis target does not produce any output, 
        we use the dacpac to detect if it needs to be rebuilt.
        To make this work we need to force rebuilding the dacpac aswell,
        by specifying the same inputs.
      -->
      <SqlBuildInputItem Include="@(_SqlTargetInput)" />

      <!-- SqlCodeAnalysis -->
      <SqlCodeAnalysisInput Include="@(_SqlTargetInput)" />
      <SqlCodeAnalysisInput Include="@(Build)" />
      <SqlCodeAnalysisInput Include="@(PreDeploy)" />
      <SqlCodeAnalysisInput Include="@(PostDeploy)" />
      <SqlCodeAnalysisInput Include="@(SqlReferencePath)" />
      <SqlCodeAnalysisOutput Include="@(SqlTarget)" /> <!-- dacpac -->

      <!-- CompileArtifacts -->
      <CompileArtifactsInput Include="@(_SqlTargetInput)" />
      <CompileArtifactsInput Include="@(Build)" />
      <CompileArtifactsInput Include="@(Contract)" />
      <CompileArtifactsInput Include="@(Endpoint)" />
      <CompileArtifactsOutput Include="$(TargetPath)" />
      <CompileArtifactsOutput Include="$(ClientTargetPath)" />
    </ItemGroup>
  </Target>

  <!-- Run our own sql code analysis rules -->
  <Target Name="SqlCodeAnalysis" 
          BeforeTargets="SqlBuild"
          DependsOnTargets="SetupSqlBuildInputs"
          Inputs="@(SqlCodeAnalysisInput)"
          Outputs="@(SqlCodeAnalysisOutput)">
    <PropertyGroup>
      <SqlNamingConventionPrefix Condition="'$(SqlNamingConventionPrefix)' == ''">dbx</SqlNamingConventionPrefix>
    </PropertyGroup>

    <ItemGroup>
      <SqlCodeAnalysisScriptItem Include="@(PreDeploy)" />
      <SqlCodeAnalysisScriptItem Include="@(PostDeploy)" />
    </ItemGroup>

    <SqlCodeAnalysisTask SdkPath="$(DibixSdkPath)"
                         SSDTDirectory="$(SqlServerRedistPath)"
                         NamingConventionPrefix="$(SqlNamingConventionPrefix)"
                         DatabaseSchemaProviderName="$(DSP)"
                         ModelCollation="$(ModelCollation)"
                         Source="@(Build)"
                         ScriptSource="@(SqlCodeAnalysisScriptItem)"
                         SqlReferencePath="@(SqlReferencePath)"
                         IsIDEBuild="$(BuildingInsideVisualStudio)" />
  </Target>

  <!-- Compile database accessors for stored procedures including their contracts and an API endpoint configuration -->
  <Target Name="SetupCompilationArtifacts" BeforeTargets="SetupSqlBuildInputs" Condition="$(CompileArtifacts) == 'true'">
    <ItemGroup>
      <Contract Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Contracts\\')) and %(Extension) == '.json'" />
      <Endpoint Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Endpoints\\')) and %(Extension) == '.json'" />
    </ItemGroup>
  </Target>
  <Target Name="CompileArtifacts" 
          AfterTargets="PostBuildEvent" 
          DependsOnTargets="SetupSqlBuildInputs"
          Inputs="@(CompileArtifactsInput)"
          Outputs="@(CompileArtifactsOutput)"
          Condition="$(CompileArtifacts) == 'true'">
    <PropertyGroup>
      <LangVersion>latest</LangVersion>
      <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
      <CopyOutputSymbolsToOutputDirectory>true</CopyOutputSymbolsToOutputDirectory>
      <ServerIntermediateFilePath>$(IntermediateOutputPath)@(IntermediateAssembly->'%(Filename)').cs</ServerIntermediateFilePath>
      <ClientIntermediateFilePath Condition="'$(ClientOutputName)' != ''">$(IntermediateOutputPath)$(ClientOutputName).cs</ClientIntermediateFilePath>
    </PropertyGroup>

    <ItemGroup>
      <ServerCompilationReference Include="@(ArtifactReference->'%(RelativeDir)%(Filename).dll')" Condition="!$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)%(Extension)', '^master|msdb(\.dacpac)$'))" />
    </ItemGroup>

    <CodeGenerationTask SdkPath="$(DibixSdkPath)"
                        SSDTDirectory="$(SqlServerRedistPath)"
                        ProjectDirectory="$(MSBuildProjectDirectory)"
                        ProductName="$(ProductName)"
                        AreaName="$(AreaName)"
                        DefaultOutputFilePath="$(ServerIntermediateFilePath)"
                        ClientOutputFilePath="$(ClientIntermediateFilePath)"
                        Sources="@(Build)"
                        Contracts="@(Contract)"
                        Endpoints="@(Endpoint)"
                        References="@(ServerCompilationReference)"
                        IsIDEBuild="$(BuildingInsideVisualStudio)"
                        EmbedStatements="$(EmbedStatements)">
      <Output TaskParameter="AdditionalAssemblyReferences" ItemName="ServerCompilationReference" />
    </CodeGenerationTask>

    <ItemGroup>
      <ServerCompilationSource Include="$(ServerIntermediateFilePath)" />
      <ClientCompilationSource Include="$(ClientIntermediateFilePath)" />
      <ServerCompilationReference Include="$(DibixLibraryPath)" />
    </ItemGroup>

    <ItemGroup Condition="'$(ClientOutputName)' != ''">
      <ClientAssembly Include="$(IntermediateOutputPath)$(ClientOutputName).dll" />
    </ItemGroup>

    <!-- Compile contracts assembly if required -->
    <Csc Condition="'$(ClientOutputName)' != ''"
         DefineConstants="$(DefineConstants)"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="@(ClientAssembly)"
         Sources="@(ClientCompilationSource)"
         TargetType="$(OutputType)" />

    <!-- Compile main assembly -->
    <Csc DefineConstants="$(DefineConstants)"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="@(IntermediateAssembly)"
         References="@(ServerCompilationReference)"
         Sources="@(ServerCompilationSource)"
         TargetType="$(OutputType)" />

    <!-- Deploy assembly/pdb -->
    <Copy SourceFiles="@(IntermediateAssembly)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
    <Copy SourceFiles="@(_DebugSymbolsIntermediatePath)"
          DestinationFiles="@(_DebugSymbolsOutputPath)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <!-- Deploy contracts assembly/pdb (if available -->
    <Copy SourceFiles="@(ClientAssembly)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(ClientOutputName)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
    <Copy SourceFiles="@(_DebugSymbolsIntermediatePath->'%(RelativeDir)$(ClientOutputName)%(Extension)')"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(ClientOutputName)' != '' and '$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>

</Project>