<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- 
      Skip compilation of default SQL CLR .NET assembly.
      The empty line in between by default contains:
      
      CoreCompile;
    -->
    <BuildDependsOn>
      BuildOnlySettings;
      BeforeBuild;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      ResolveArtifactReferences;
      GenerateSqlTargetFrameworkMoniker;
      ResolveKeySource;

      GenerateSerializationAssemblies;
      SqlBuild;
      GetTargetPath;
      PrepareForRun;
      SqlPrepareForRun;
      IncrementalClean;
      PostBuildEvent;
      AfterBuild;
    </BuildDependsOn>

    <!-- Skip copying the default SQL CLR .NET assembly to output -->
    <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>

    <DibixSdkPath>$(MSBuildThisFileDirectory)..\lib\net46\Dibix.Sdk.dll</DibixSdkPath>
    <DibixToolsDirectory Condition="$(DibixToolsDirectory) == ''">$(MSBuildThisFileDirectory)..\tools\net46\</DibixToolsDirectory>
    <DibixLibraryPath>$(DibixToolsDirectory)Dibix.dll</DibixLibraryPath>
    <DibixBuildToolsPath>$(DibixToolsDirectory)Dibix.MSBuild.dll</DibixBuildToolsPath>
  </PropertyGroup>

  <ItemGroup>
    <!-- Clean target assembly, which is required to force rebuild of CompileDatabaseAccessorTask -->
    <!-- This is probably not included, because we skip copying it to output -->
    <Clean Include="$(TargetPath)" />
  </ItemGroup>

  <UsingTask TaskName="SqlCodeAnalysisTask" AssemblyFile="$(DibixBuildToolsPath)" />
  <UsingTask TaskName="CompileDatabaseAccessorTask" AssemblyFile="$(DibixBuildToolsPath)" />
  <UsingTask TaskName="VerifyDatabaseAccessorTask" AssemblyFile="$(DibixBuildToolsPath)" />

  <!-- Define inputs and outputs so the targets know when they need to be rebuilt -->
  <Target Name="SetupSqlBuildInputs" AfterTargets="_SetupSqlBuildInputs">
    <ItemGroup>
      <!-- 
        The intermediate assembly/pdb is used as an input,
        therefore each time we run the CompileDatabaseAccessorTask,
        both these inputs are newer than the dacpac, and all targets
        are forced to rebuild.
      -->
      <SqlBuildInputItem Remove="$(IntermediateTargetFullFileName)" />
      <SqlBuildInputItem Remove="$(IntermediateSymbolsFullFileName)" />

      <_SqlTargetInput Include="$(DibixSdkPath)" />
      <_SqlTargetInput Include="$(MSBuildProjectFullPath)" />
      <_SqlTargetInput Include="$(MSBuildAllProjects)" />

      <!--
        Since the SqlCodeAnalysis target does not produce any output, 
        we use the dacpac to detect if it needs to be rebuilt.
        To make this work we need to force rebuilding the dacpac aswell,
        by specifying the same inputs.
      -->
      <SqlBuildInputItem Include="@(_SqlTargetInput)" />

      <!-- SqlCodeAnalysis -->
      <SqlCodeAnalysisInput Include="@(_SqlTargetInput)" />
      <SqlCodeAnalysisInput Include="@(Build)" />
      <SqlCodeAnalysisInput Include="@(SqlReferencePath)" />
      <SqlCodeAnalysisOutput Include="@(SqlTarget)" /> <!-- dacpac -->

      <!-- CompileDatabaseAccessor -->
      <CompileDatabaseAccessorInput Include="@(_SqlTargetInput)" />
      <CompileDatabaseAccessorInput Include="@(Build)" />
      <CompileDatabaseAccessorInput Include="@(Contract)" />
      <CompileDatabaseAccessorInput Include="@(Endpoint)" />
      <CompileDatabaseAccessorOutput Include="$(DatabaseAccessorIntermediateFilePath)" /> <!-- Source cs file -->
      <CompileDatabaseAccessorOutput Include="$(IntermediateAssembly)" />                 <!-- DLL in obj folder -->
      <CompileDatabaseAccessorOutput Include="$(TargetPath)" />                           <!-- DLL in bin folder -->
    </ItemGroup>
  </Target>

  <!-- Run our own sql code analysis rules -->
  <Target Name="SqlCodeAnalysis" 
          BeforeTargets="SqlBuild"
          DependsOnTargets="SetupSqlBuildInputs"
          Inputs="@(SqlCodeAnalysisInput)"
          Outputs="@(SqlCodeAnalysisOutput)">
    <PropertyGroup>
      <SqlNamingConventionPrefix Condition="'$(SqlNamingConventionPrefix)' == ''">dbx</SqlNamingConventionPrefix>
    </PropertyGroup>

    <SqlCodeAnalysisTask SdkPath="$(DibixSdkPath)"
                         SSDTDirectory="$(SqlServerRedistPath)"
                         NamingConventionPrefix="$(SqlNamingConventionPrefix)"
                         DatabaseSchemaProviderName="$(DSP)"
                         ModelCollation="$(ModelCollation)"
                         Source="@(Build)"
                         SqlReferencePath="@(SqlReferencePath)"
                         IsIDEBuild="$(BuildingInsideVisualStudio)" />
  </Target>

  <!-- Compile database accessors for stored procedures including their contracts and an API endpoint configuration -->
  <Target Name="SetupCompilationArtifacts" BeforeTargets="SetupSqlBuildInputs" Condition="$(ShouldCompileDatabaseAccessor) == 'true'">
    <PropertyGroup>
      <DatabaseAccessorIntermediateFilePath Condition="'$(DatabaseAccessorIntermediateFilePath)' == ''">$(GeneratedFilesIntermediatePath)Accessor.cs</DatabaseAccessorIntermediateFilePath>
    </PropertyGroup>

    <ItemGroup>
      <Contract Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Contracts\\')) and %(Extension) == '.json'" />
      <Endpoint Include="@(None)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(RelativeDir)', '^Endpoints\\')) and %(Extension) == '.json'" />
    </ItemGroup>
  </Target>
  <Target Name="CompileDatabaseAccessor" 
          AfterTargets="PostBuildEvent" 
          DependsOnTargets="SetupSqlBuildInputs"
          Inputs="@(CompileDatabaseAccessorInput)"
          Outputs="@(CompileDatabaseAccessorOutput)"
          Condition="$(ShouldCompileDatabaseAccessor) == 'true'">
    <PropertyGroup>
      <LangVersion>latest</LangVersion>
      <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
      <CopyOutputSymbolsToOutputDirectory>true</CopyOutputSymbolsToOutputDirectory>
      <DatabaseAccessorNamespace Condition="'$(DatabaseAccessorNamespace)' == ''">$(RootNamespace)</DatabaseAccessorNamespace>
    </PropertyGroup>

    <ItemGroup>
      <DatabaseAccessorSource Include="$(DatabaseAccessorIntermediateFilePath)" />
    </ItemGroup>

    <CompileDatabaseAccessorTask SdkPath="$(DibixSdkPath)"
                                 SSDTDirectory="$(SqlServerRedistPath)"
                                 ProjectDirectory="$(MSBuildProjectDirectory)"
                                 Namespace="$(DatabaseAccessorNamespace)"
                                 OutputFilePath="$(DatabaseAccessorIntermediateFilePath)"
                                 Artifacts="@(Build)"
                                 Contracts="@(Contract)"
                                 Endpoints="@(Endpoint)"
                                 MultipleAreas="$(MultipleAreas)"
                                 IsIDEBuild="$(BuildingInsideVisualStudio)"
                                 IsDML="$(IsDMLProject)">
      <Output TaskParameter="DetectedReferences" ItemName="DatabaseAccessorReference" />
    </CompileDatabaseAccessorTask>

    <ItemGroup>
      <DatabaseAccessorReference Include="$(DibixLibraryPath)" />
      <DatabaseAccessorReference Include="@(ArtifactReference->'%(RelativeDir)%(Filename).dll')" Condition="!$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)%(Extension)', '^master|msdb(\.dacpac)$'))" />
    </ItemGroup>

    <Csc DefineConstants="$(DefineConstants)"
         EmitDebugInformation="$(DebugSymbols)"
         KeyFile="$(AssemblyOriginatorKeyFile)"
         LangVersion="$(LangVersion)"
         OutputAssembly="@(IntermediateAssembly)"
         References="@(DatabaseAccessorReference)"
         Sources="@(DatabaseAccessorSource)"
         TargetType="$(OutputType)" />

    <!-- Copy the build product (.dll or .exe). -->
    <Copy SourceFiles="@(IntermediateAssembly)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <!-- Copy the debug information file (.pdb), if any -->
    <Copy SourceFiles="@(_DebugSymbolsIntermediatePath)"
          DestinationFiles="@(_DebugSymbolsOutputPath)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>

  <!-- 
    Initially used to verify if the (manually) generated code is still up-to-date.
    Since we now compile entire projects, this is currently not used anymore.
  -->
  <Target Name="VerifyDatabaseAccessor" BeforeTargets="PreBuildEvent">
    <VerifyDatabaseAccessorTask SdkPath="$(DibixSdkPath)"
                                SSDTDirectory="$(SqlServerRedistPath)"
                                ProjectDirectory="$(MSBuildProjectDirectory)"
                                Namespace="$(RootNamespace)"
                                AssemblyReferences="@(Reference->'%(HintPath)')"
                                Inputs="@(None)"
                                Condition="%(None.Generator) == 'Dibix'"
                                IsIDEBuild="$(BuildingInsideVisualStudio)" />
  </Target>

</Project>