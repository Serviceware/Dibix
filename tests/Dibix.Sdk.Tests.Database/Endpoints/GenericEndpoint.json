{
  "$schema": "../../../src/Dibix.Sdk/CodeGeneration/Schema/dibix.endpoints.schema.json",
  "GenericEndpoint": [
    //"Dibix.GenericEndpoint",
    {
      "method": "GET",
      "target": "MultiConcreteResult",
      "authorization": "none"
    },
    {
      "method": "GET",
      "target": "EmptyWithParams",
      "childRoute": "{password}/Fixed",
      "params": {
        "a": "HEADER.User-Agent",
        "b": "HEADER.Authorization.Parameter",
        "c": {
          "source": "DBX.X",
          "converter": "DBX"
        },
        "password": null,
        "ids": "QUERY.ids",
        "d": "REQUEST.Language",
        "new": true,
        "f": "Descending",
        "g": "cake",
        "h": null,
        "i": null,
        "j": null
      },
      "authorization": "none"
    },
    {
      "method": "GET",
      "target": "EmptyWithParams",
      "childRoute": "{password}/User",
      "securitySchemes": "Anonymous",
      "operationId": "EmptyWithParamsAnonymous",
      "params": {
        "a": "QUERY.a",
        "b": "QUERY.b",
        "c": null,
        "ids": "QUERY.ids",
      },
      "authorization": "none"
    },
    {
      "method": "GET",
      "target": "EmptyWithOutputParam",
      "childRoute": "Out",
      "params": {
        "a": "QUERY.a"
      },
      "authorization": "none"
    },
    {
      "method": "GET",
      "target": "SingleConrecteResultWithParams",
      "childRoute": "User/{id}/{name}",
      "authorization": "none",
      "response": {
        "404": {
          "autoDetect": {
            "errorCode": 1,
            "errorMessage": "The user '{name}' with the id '{id}' could not be found"
          }
        }
      }
    },
    {
      "method": "GET",
      "target": "SingleConrecteResultWithArrayParam",
      "childRoute": "Array",
      "params": {
        "ids": "QUERY.ids"
      },
      "authorization": "none",
      "response": {
        "404": {
          "autoDetect": false
        }
      }
    },
    {
      "method": "GET",
      "target": "FileResult",
      "childRoute": "{id}",
      "securitySchemes": [
        "Anonymous",
        "Bearer"
      ],
      "fileResponse": {
        "mediaType": "image/*",
        "cache": false
      },
      "authorization": "none"
    },
    {
      "method": "GET",
      "target": "Dibix.Sdk.Tests.CodeGeneration.CodeGenerationTaskTests.ReflectionTarget,Dibix.Sdk.Tests",
      "childRoute": "Reflection/{id}",
      "params": {
        "id": {
          "type": "int32"
        },
        "name": {
          "type": "string?",
          "location": "Header",
          "default": null
        },
        "age": {
          "type": "int32",
          "default": 18
        },
        "identifier": {
          "source": "DBX.X",
          "converter": "DBX"
        }
      },
      "authorization": "none",
      "response": {
        "type": "string"
      }
    },
    {
      "method": "PUT",
      "target": "File.FileUpload",
      "body": {
        "mediaType": "application/octet-stream"
      },
      "params": {
        "data": "BODY.$RAW",
        "mimetype": "BODY.$MEDIATYPE",
        "filename": "BODY.$FILENAME"
      },
      "authorization": "none"
    },
    {
      "method": "POST",
      "target": "EmptyWithParams",
      "operationId": "PostEmptyWithParams",
      "body": "InputContract",
      "params": {
        "ids": {
          "convertFromBody": "Dibix.GenericContractIdsInputConverter"
        }
      },
      "authorization": "none"
    },
    {
      "method": "PATCH",
      "target": "EmptyWithParamsAndComplexUdt",
      "body": "AnotherInputContract",
      "params": {
        "b": "CLAIM.Name",
        "f": "DBX.Y",
        "ids": {
          "source": "BODY.SomeIds",
          "items": {
            "id": "ITEM.$INDEX",
            "name": "ITEM.Title"
          }
        },
        "primitive": {
          "source": "BODY.SomePrimitiveIds",
          "items": {
            "id1": "ITEM.$INDEX",
            "id2": "ITEM.$SELF"
          }
        },
        "nested": {
          "source": "BODY.SomeIds.Child.Items.SubItems",
          "items": {
            "id1": "ITEM.$PARENT.$PARENT.Value",
            "id2": "ITEM.Id"
          }
        },
        "primitivenested": {
          "source": "BODY.SomeIds.Child.PrimitiveIds",
          "items": {
            "id1": "ITEM.$PARENT.Id",
            "id2": "ITEM.$SELF"
          }
        },
        "g": "BODY.Data.Name"
      },
      "securitySchemes": [
        "DibixClientId",
        "DibixBearer"
      ],
      "authorization": "none"
    },
    {
      "method": "DELETE",
      "target": "EmptyWithParams",
      "operationId": "DeleteEmptyWithParams",
      "params": {
        "a": "QUERY.a",
        "b": "QUERY.b",
        "c": null,
        "password": null,
        "ids": "QUERY.ids"
      },
      "authorization": {
        "target": "AssertAuthorized",
        "params": {
          "right": 1
        }
      }
    },
    {
      "method": "DELETE",
      "childRoute": "Alternative",
      "target": "EmptyWithParams",
      "operationId": "DeleteEmptyWithParamsAlternative",
      "params": {
        "a": "QUERY.a",
        "b": "QUERY.b",
        "c": null,
        "password": null,
        "ids": "QUERY.ids"
      },
      "authorization": {
        "name": "AssertAuthorized",
        "right": 1
      }
    },
    {
      "method": "DELETE",
      "childRoute": "AnotherAlternative",
      "target": "EmptyWithParams",
      "operationId": "DeleteEmptyWithParamsAnotherAlternative",
      "params": {
        "a": "QUERY.a",
        "b": "QUERY.b",
        "c": null,
        "password": null,
        "ids": "QUERY.ids"
      },
      "authorization": "AssertAuthorizedOne"
    },
    {
      "method": "DELETE",
      "childRoute": "MultipleAuthorizationBehaviors",
      "target": "EmptyWithParams",
      "operationId": "DeleteEmptyWithParamsAuthorization",
      "params": {
        "a": "QUERY.a",
        "b": "QUERY.b",
        "c": null,
        "password": null,
        "ids": "QUERY.ids"
      },
      "authorization": [
        "AssertAuthorizedOne",
        {
          "name": "AssertAuthorized",
          "right": 1
        }
      ]
    }
  ]
}