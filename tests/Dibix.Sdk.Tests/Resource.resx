<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConsistentlyQuotedIdentifierSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[011] Identifier quotation should be consistent and not mixed. Either use all square brackets or none: dbo.[dbx_udt]"
    line="5"
    column="13" /&gt;
  &lt;error
    message="[011] Identifier quotation should be consistent and not mixed. Either use all square brackets or none: [dbo].dbx_udt"
    line="6"
    column="13" /&gt;
  &lt;error
    message="[011] Identifier quotation should be consistent and not mixed. Either use all square brackets or none: dbo.[dbx_table]"
    line="12"
    column="7" /&gt;
  &lt;error
    message="[011] Identifier quotation should be consistent and not mixed. Either use all square brackets or none: [dbo].dbx_table"
    line="15"
    column="7" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="ImplicitAliasSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[008] Aliases must be marked with 'AS'"
    line="3"
    column="28" /&gt;
  &lt;error
    message="[008] Aliases must be marked with 'AS'"
    line="4"
    column="25" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="IndexClusteringSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[025] Please specify the clustering (CLUSTERED/NONCLUSTERED) for the index 'IX_dbx_codeanalysis_error_025_table_fail' and don't rely on the default"
    line="8"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="InsertWithoutColumnSpecificationSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[015] Missing column specification for INSERT statement"
    line="4"
    column="3" /&gt;
  &lt;error
    message="[015] Missing column specification for INSERT statement"
    line="10"
    column="4" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="KeywordCasingSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[001] Invalid casing for 'nocount' [Identifier]"
    line="3"
    column="6" /&gt;
  &lt;error
    message="[001] Invalid casing for 'sysname' [Identifier]"
    line="6"
    column="13" /&gt;
  &lt;error
    message="[001] Invalid casing for 'nvarchar' [Identifier]"
    line="7"
    column="13" /&gt;
  &lt;error
    message="[001] Invalid casing for 'max' [Identifier]"
    line="7"
    column="22" /&gt;
  &lt;error
    message="[001] Invalid casing for 'decimal' [Identifier]"
    line="8"
    column="13" /&gt;
  &lt;error
    message="[001] Invalid casing for 'cast' [Identifier]"
    line="15"
    column="25" /&gt;
  &lt;error
    message="[001] Invalid casing for 'count' [Identifier]"
    line="17"
    column="14" /&gt;
  &lt;error
    message="[001] Invalid casing for 'row_number' [Identifier]"
    line="28"
    column="9" /&gt;
  &lt;error
    message="[001] Invalid casing for 'partition' [Identifier]"
    line="28"
    column="27" /&gt;
  &lt;error
    message="[001] Invalid casing for 'set' [Set]"
    line="3"
    column="2" /&gt;
  &lt;error
    message="[001] Invalid casing for 'on' [On]"
    line="3"
    column="14" /&gt;
  &lt;error
    message="[001] Invalid casing for 'SeLeCT' [Select]"
    line="17"
    column="2" /&gt;
  &lt;error
    message="[001] Invalid casing for 'over' [Over]"
    line="28"
    column="22" /&gt;
  &lt;error
    message="[001] Invalid casing for 'by' [By]"
    line="28"
    column="37" /&gt;
  &lt;error
    message="[001] Invalid casing for 'order' [Order]"
    line="28"
    column="43" /&gt;
  &lt;error
    message="[001] Invalid casing for 'by' [By]"
    line="28"
    column="49" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="LanguageDependentConstantSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[020] Found language dependent expression: CAST(N'1990-01-01' AS DATETIME)"
    line="3"
    column="30" /&gt;
  &lt;error
    message="[020] Found language dependent expression: CONSTRAINT [DF_dbx_codeanalysis_error_020_table_value] DEFAULT ((N'1990-01-01'))"
    line="8"
    column="87" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="LooseConstraintsSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[026] Constraints should be defined within the CREATE TABLE statement: UQ_dbx_codeanalysis_error_026_table"
    line="8"
    column="60" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="MissingPrimaryKeySqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[012] Table 'dbx_codeanalysis_error_012_table' does not have a primary key"
    line="5"
    column="3" /&gt;
  &lt;error
    message="[012] User defined table type 'dbx_codeanalysis_error_012_type' does not have a primary key"
    line="10"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="NamingConventionSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[017] Primary key constraint 'PK_dbx_codeanalysis_error_017_failx' does not match naming convention 'PK_&amp;lt;tablename&amp;gt;'. Also make sure the name is all lowercase."
    line="15"
    column="17" /&gt;
  &lt;error
    message="[017] Foreign key constraint 'FK_dbx_codeanalysis_error_017_failx_id' does not match naming convention 'FK_&amp;lt;tablename&amp;gt;_*'. Also make sure the name is all lowercase."
    line="17"
    column="17" /&gt;
  &lt;error
    message="[017] Check constraint 'CK_dbx_codeanalysis_error_017_failx_abc' does not match naming convention 'CK_&amp;lt;tablename&amp;gt;_*'. Also make sure the name is all lowercase."
    line="18"
    column="17" /&gt;
  &lt;error
    message="[017] Unique constraint 'UQ_dbx_codeanalysis_error_017_failx_id' does not match naming convention 'UQ_&amp;lt;tablename&amp;gt;_*'. Also make sure the name is all lowercase."
    line="20"
    column="17" /&gt;
  &lt;error
    message="[017] Default constraint 'DF_dbx_codeanalysis_error_017_fail_idx' does not match naming convention 'DF_&amp;lt;tablename&amp;gt;_&amp;lt;columnname&amp;gt;'. Also make sure the name is all lowercase."
    line="14"
    column="23" /&gt;
  &lt;error
    message="[017] Index 'IX_dbx_codeanalysis_error_017_successx_fail' does not match naming convention 'IX_&amp;lt;tablename&amp;gt;_*'. Also make sure the name is all lowercase."
    line="24"
    column="28" /&gt;
  &lt;error
    message="[017] Unique constraint 'UQ_dbx_codeanalysis_error_017_successx_fail' does not match naming convention 'UQ_&amp;lt;tablename&amp;gt;_*'. Also make sure the name is all lowercase."
    line="27"
    column="35" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="NoCursorSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[013] Found use of CURSOR statement"
    line="3"
    column="19" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="NoReturnSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[003] The use of RETURN expressions is not allowed"
    line="3"
    column="2" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="ObsoleteDataTypeSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[016] The data type 'NTEXT' is obsolete and should not be used"
    line="3"
    column="14" /&gt;
  &lt;error
    message="[016] The data type 'IMAGE' is obsolete and should not be used"
    line="4"
    column="14" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="ParserTest" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Reflection;
using Dibix;

namespace Dibix.Sdk.Tests
{
    [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
    internal static class ParserTest
    {
        // dbx_tests_parser_invalidcolumnsforentity
        public const string dbx_tests_parser_invalidcolumnsforentityCommandText = @"SELECT COUNT(*) AS [column]
FROM (VALUES (1)) AS x(a);

WITH [x]
AS (SELECT 1 AS [i])
SELECT [i] AS [y]
FROM [x];

IF 0 = 1
    BEGIN
        SELECT 1 AS [action];
    END
ELSE
    SELECT 4 AS [action];

MERGE INTO dbo.dbx_table
 AS target
USING dbo.dbx_table AS source ON (1 = 0)
WHEN NOT MATCHED BY SOURCE THEN DELETE OUTPUT $ACTION AS [action];

SELECT 1 AS id,
       N'Cake' AS [name]
UNION ALL
SELECT 2 AS id,
       N'Cookie' AS [name];";

        // dbx_tests_parser_nestedifs
        public const string dbx_tests_parser_nestedifsCommandText = @"IF 0 = 1
    BEGIN
        IF 1 = 0
            SELECT 1.0 AS [action];
        ELSE
            SELECT 1.1 AS [action];
    END
ELSE
    IF 0 = 1
        BEGIN
            DECLARE @x AS INT = 1;
            SELECT 2 AS [action];
        END
    ELSE
        BEGIN
            SELECT 3 AS [action];
        END

IF 0 = 1
    SELECT 1;
ELSE
    IF 0 = 2
        SELECT 2;
    ELSE
        SELECT 3;";

        // dbx_tests_parser_nobeginend
        public const string dbx_tests_parser_nobeginendCommandText = @"SELECT 1;

SELECT @param1;

SELECT 2;";

        // dbx_tests_parser_typenames
        public const string dbx_tests_parser_typenamesCommandText = @"SELECT 0 AS [x];

SELECT 0 AS [x];

SELECT 0 AS [x];

SELECT 0 AS [x];

SELECT 0 AS [x];

SELECT 0 AS [x];

SELECT 0 AS [x],
       0 AS [x],
       0 AS [x];

SELECT 0 AS [x],
       0 AS [x],
       0 AS [x];";

        // dbx_tests_parser_unionreturn
        public const string dbx_tests_parser_unionreturnCommandText = @"(SELECT 1)
UNION ALL
(SELECT 2);";

        // dbx_tests_parser_xmlparam
        public const string dbx_tests_parser_xmlparamCommandText = @"";

        public static dbx_tests_parser_invalidcolumnsforentityResult dbx_tests_parser_invalidcolumnsforentity(this IDatabaseAccessorFactory databaseAccessorFactory)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                using (IMultipleResultReader reader = accessor.QueryMultiple(dbx_tests_parser_invalidcolumnsforentityCommandText))
                {
                    dbx_tests_parser_invalidcolumnsforentityResult result = new dbx_tests_parser_invalidcolumnsforentityResult();
                    result.A.ReplaceWith(reader.ReadMany&lt;int?&gt;());
                    result.B.ReplaceWith(reader.ReadMany&lt;int&gt;());
                    result.C.ReplaceWith(reader.ReadMany&lt;string&gt;());
                    result.D.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.CodeGeneration.Direction?&gt;());
                    result.E.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.CodeGeneration.Entity&gt;());
                    return result;
                }
            }
        }
        public static dbx_tests_parser_nestedifsResult dbx_tests_parser_nestedifs(this IDatabaseAccessorFactory databaseAccessorFactory)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                using (IMultipleResultReader reader = accessor.QueryMultiple(dbx_tests_parser_nestedifsCommandText))
                {
                    dbx_tests_parser_nestedifsResult result = new dbx_tests_parser_nestedifsResult();
                    result.A.ReplaceWith(reader.ReadMany&lt;int&gt;());
                    result.B.ReplaceWith(reader.ReadMany&lt;int&gt;());
                    return result;
                }
            }
        }
        public static dbx_tests_parser_nobeginendResult dbx_tests_parser_nobeginend(this IDatabaseAccessorFactory databaseAccessorFactory, Dibix.Sdk.Tests.CodeGeneration.Direction param1)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                IParametersVisitor @params = accessor.Parameters()
                                                     .SetFromTemplate(new
                                                     {
                                                         param1
                                                     })
                                                     .Build();
                using (IMultipleResultReader reader = accessor.QueryMultiple(dbx_tests_parser_nobeginendCommandText, @params))
                {
                    dbx_tests_parser_nobeginendResult result = new dbx_tests_parser_nobeginendResult();
                    result.A.ReplaceWith(reader.ReadMany&lt;int&gt;());
                    result.B = reader.ReadSingle&lt;int&gt;();
                    result.C.ReplaceWith(reader.ReadMany&lt;int&gt;());
                    return result;
                }
            }
        }
        public static dbx_tests_parser_typenamesResult dbx_tests_parser_typenames(this IDatabaseAccessorFactory databaseAccessorFactory)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                using (IMultipleResultReader reader = accessor.QueryMultiple(dbx_tests_parser_typenamesCommandText))
                {
                    dbx_tests_parser_typenamesResult result = new dbx_tests_parser_typenamesResult();
                    result.A.ReplaceWith(reader.ReadMany&lt;string&gt;());
                    result.B.ReplaceWith(reader.ReadMany&lt;int?&gt;());
                    result.C.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.CodeGeneration.Direction&gt;());
                    result.D.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.CodeGeneration.Direction?&gt;());
                    result.G.ReplaceWith(reader.ReadMany&lt;string, int?, Dibix.Sdk.Tests.CodeGeneration.Direction&gt;(ParserTestUtility.Map, "x,x"));
                    return result;
                }
            }
        }
        public static IEnumerable&lt;int&gt; dbx_tests_parser_unionreturn(this IDatabaseAccessorFactory databaseAccessorFactory)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                return accessor.QueryMany&lt;int&gt;(dbx_tests_parser_unionreturnCommandText);
            }
        }
        public static int dbx_tests_parser_xmlparam(this IDatabaseAccessorFactory databaseAccessorFactory, string x)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                IParametersVisitor @params = accessor.Parameters()
                                                     .SetFromTemplate(new
                                                     {
                                                         x
                                                     })
                                                     .Build();
                return accessor.Execute(dbx_tests_parser_xmlparamCommandText, @params);
            }
        }

        public class dbx_tests_parser_invalidcolumnsforentityResult
        {
            public ICollection&lt;int?&gt; A { get; private set; } 
            public ICollection&lt;int&gt; B { get; private set; } 
            public ICollection&lt;string&gt; C { get; private set; } 
            public ICollection&lt;Dibix.Sdk.Tests.CodeGeneration.Direction?&gt; D { get; private set; } 
            public ICollection&lt;Dibix.Sdk.Tests.CodeGeneration.Entity&gt; E { get; private set; } 

            public dbx_tests_parser_invalidcolumnsforentityResult()
            {
                this.A = new Collection&lt;int?&gt;();
                this.B = new Collection&lt;int&gt;();
                this.C = new Collection&lt;string&gt;();
                this.D = new Collection&lt;Dibix.Sdk.Tests.CodeGeneration.Direction?&gt;();
                this.E = new Collection&lt;Dibix.Sdk.Tests.CodeGeneration.Entity&gt;();
            }
        }
        public class dbx_tests_parser_nestedifsResult
        {
            public ICollection&lt;int&gt; A { get; private set; } 
            public ICollection&lt;int&gt; B { get; private set; } 

            public dbx_tests_parser_nestedifsResult()
            {
                this.A = new Collection&lt;int&gt;();
                this.B = new Collection&lt;int&gt;();
            }
        }
        public class dbx_tests_parser_nobeginendResult
        {
            public ICollection&lt;int&gt; A { get; private set; } 
            public int B { get; set; } 
            public ICollection&lt;int&gt; C { get; private set; } 

            public dbx_tests_parser_nobeginendResult()
            {
                this.A = new Collection&lt;int&gt;();
                this.C = new Collection&lt;int&gt;();
            }
        }
        public class dbx_tests_parser_typenamesResult
        {
            public ICollection&lt;string&gt; A { get; private set; } 
            public ICollection&lt;int?&gt; B { get; private set; } 
            public ICollection&lt;Dibix.Sdk.Tests.CodeGeneration.Direction&gt; C { get; private set; } 
            public ICollection&lt;Dibix.Sdk.Tests.CodeGeneration.Direction?&gt; D { get; private set; } 
            public ICollection&lt;string&gt; G { get; private set; } 

            public dbx_tests_parser_typenamesResult()
            {
                this.A = new Collection&lt;string&gt;();
                this.B = new Collection&lt;int?&gt;();
                this.C = new Collection&lt;Dibix.Sdk.Tests.CodeGeneration.Direction&gt;();
                this.D = new Collection&lt;Dibix.Sdk.Tests.CodeGeneration.Direction?&gt;();
                this.G = new Collection&lt;string&gt;();
            }
        }

        public static readonly MethodInfo dbx_tests_parser_invalidcolumnsforentityMethodInfo = new Func&lt;IDatabaseAccessorFactory, dbx_tests_parser_invalidcolumnsforentityResult&gt;(dbx_tests_parser_invalidcolumnsforentity).Method;
        public static readonly MethodInfo dbx_tests_parser_nestedifsMethodInfo = new Func&lt;IDatabaseAccessorFactory, dbx_tests_parser_nestedifsResult&gt;(dbx_tests_parser_nestedifs).Method;
        public static readonly MethodInfo dbx_tests_parser_nobeginendMethodInfo = new Func&lt;IDatabaseAccessorFactory, Dibix.Sdk.Tests.CodeGeneration.Direction, dbx_tests_parser_nobeginendResult&gt;(dbx_tests_parser_nobeginend).Method;
        public static readonly MethodInfo dbx_tests_parser_typenamesMethodInfo = new Func&lt;IDatabaseAccessorFactory, dbx_tests_parser_typenamesResult&gt;(dbx_tests_parser_typenames).Method;
        public static readonly MethodInfo dbx_tests_parser_unionreturnMethodInfo = new Func&lt;IDatabaseAccessorFactory, IEnumerable&lt;int&gt;&gt;(dbx_tests_parser_unionreturn).Method;
        public static readonly MethodInfo dbx_tests_parser_xmlparamMethodInfo = new Func&lt;IDatabaseAccessorFactory, string, int&gt;(dbx_tests_parser_xmlparam).Method;
    }
}</value>
  </data>
  <data name="PrimaryKeyDataTypeSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[023] Only TINYINT/SMALLINT/INT/BIGINT are allowed as primary key: dbx_codeanalysis_error_023_fail1.b (NVARCHAR)"
    line="7"
    column="74" /&gt;
  &lt;error
    message="[023] Only TINYINT/SMALLINT/INT/BIGINT are allowed as primary key: dbx_codeanalysis_error_023_fail2.b (NVARCHAR)"
    line="13"
    column="7" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="PrimitiveDataTypeIdentifierSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[007] Primitive data type identifiers must not be quoted: [int]"
    line="4"
    column="13" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="RedundantAliasSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[006] The alias is redundant"
    line="3"
    column="17" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="SchemaSpecificationSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="9"
    column="7" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="17"
    column="7" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="22"
    column="14" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="24"
    column="14" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="24"
    column="44" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="26"
    column="28" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="28"
    column="9" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="32"
    column="28" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="35"
    column="7" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="39"
    column="7" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="53"
    column="8" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="57"
    column="8" /&gt;
  &lt;error
    message="[002] Missing schema specification"
    line="73"
    column="15" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="SourcesTest" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Dibix;

namespace This.Is.A.Custom.Namespace
{
    [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
    internal static class Accessor
    {
        // dbx_tests_sources_includednested
        public const string dbx_tests_sources_includednestedCommandText = @"";

        // dbx_tests_sources_excludednested
        public const string dbx_tests_sources_excludednestedCommandText = @"";

        // dbx_tests_sources_externalsp
        public const string dbx_tests_sources_externalspCommandText = @"[dbo].[dbx_tests_externalsp]";

        public static int dbx_tests_sources_includednested(this IDatabaseAccessorFactory databaseAccessorFactory)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                return accessor.Execute(dbx_tests_sources_includednestedCommandText);
            }
        }
        public static int dbx_tests_sources_excludednested(this IDatabaseAccessorFactory databaseAccessorFactory)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                return accessor.Execute(dbx_tests_sources_excludednestedCommandText);
            }
        }
        public static int dbx_tests_sources_externalsp(this IDatabaseAccessorFactory databaseAccessorFactory)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                return accessor.Execute(dbx_tests_sources_externalspCommandText, System.Data.CommandType.StoredProcedure);
            }
        }

        public static readonly MethodInfo dbx_tests_sources_includednestedMethodInfo = new Func&lt;IDatabaseAccessorFactory, int&gt;(dbx_tests_sources_includednested).Method;
        public static readonly MethodInfo dbx_tests_sources_excludednestedMethodInfo = new Func&lt;IDatabaseAccessorFactory, int&gt;(dbx_tests_sources_excludednested).Method;
        public static readonly MethodInfo dbx_tests_sources_externalspMethodInfo = new Func&lt;IDatabaseAccessorFactory, int&gt;(dbx_tests_sources_externalsp).Method;
    }
}</value>
  </data>
  <data name="SurrogateKeySqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[024] Surrogate keys are only allowed, if a business key is defined: dbx_codeanalysis_error_024_fail"
    line="3"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="TemporaryTableSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[021] The use of temporary tables is not allowed: #dbx_codeanalysis_error_021"
    line="3"
    column="22" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="TopWithoutOrderBySqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[022] Missing ORDER BY for SELECT TOP statement"
    line="3"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="TruncateTableSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[019] Found use of TRUNCATE TABLE statement"
    line="3"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnaliasedTableJoinSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[010] Unaliased table reference found in multi table reference joins"
    line="7"
    column="7" /&gt;
  &lt;error
    message="[010] Unaliased table reference found in multi table reference joins"
    line="11"
    column="7" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnfilteredDataModificationSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[018] Missing where clause in UPDATE statement"
    line="5"
    column="3" /&gt;
  &lt;error
    message="[018] Missing where clause in DELETE statement"
    line="6"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnicodeConstantSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[004] Invalid ascii string literal. Please specify unicode (N'')"
    line="3"
    column="28" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnicodeDataTypeSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[005] Use unicode data types instead of ascii. Replace 'CHAR' with 'NCHAR'."
    line="1"
    column="56" /&gt;
  &lt;error
    message="[005] Use unicode data types instead of ascii. Replace 'VARCHAR' with 'NVARCHAR'."
    line="1"
    column="70" /&gt;
  &lt;error
    message="[005] Use unicode data types instead of ascii. Replace 'CHAR' with 'NCHAR'."
    line="4"
    column="13" /&gt;
  &lt;error
    message="[005] Use unicode data types instead of ascii. Replace 'VARCHAR' with 'NVARCHAR'."
    line="6"
    column="13" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnnamedConstraintSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[014] Table 'dbx_codeanalysis_error_014_fail1' has an unnamed primary key constraint"
    line="5"
    column="12" /&gt;
  &lt;error
    message="[014] Table 'dbx_codeanalysis_error_014_fail1' has an unnamed default constraint"
    line="5"
    column="24" /&gt;
  &lt;error
    message="[014] Table 'dbx_codeanalysis_error_014_fail2' has an unnamed primary key constraint"
    line="16"
    column="6" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnspecifiedDataTypeLengthSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;errors&gt;
  &lt;error
    message="[009] Data type length not specified: NVARCHAR"
    line="5"
    column="13" /&gt;
  &lt;error
    message="[009] Data type length not specified: NCHAR"
    line="6"
    column="13" /&gt;
  &lt;error
    message="[009] Data type length not specified: BINARY"
    line="7"
    column="13" /&gt;
  &lt;error
    message="[009] Data type length not specified: VARBINARY"
    line="8"
    column="13" /&gt;
  &lt;error
    message="[009] Data type length not specified: DECIMAL"
    line="9"
    column="13" /&gt;
  &lt;error
    message="[009] Data type length not specified: NUMERIC"
    line="10"
    column="13" /&gt;
  &lt;error
    message="[009] Data type length not specified: FLOAT"
    line="11"
    column="13" /&gt;
&lt;/errors&gt;</value>
  </data>
</root>