<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AliasSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="10"
    message="Multiple table sources must be aliased"
    line="7"
    column="7" /&gt;
  &lt;error
    ruleid="10"
    message="Multiple table sources must be aliased"
    line="11"
    column="7" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="AmbiguousCheckConstraintSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="35"
    message="Ambiguous check constraints: CK_dbx_codeanalysis_error_035_1_fail1, CK_dbx_codeanalysis_error_035_1_fail2"
    line="5"
    column="5" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="ConsistentlyQuotedIdentifierSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="11"
    message="Identifier quotation should be consistent and not mixed. Either use all square brackets or none: dbo.[dbx_codeanalysis_udt_generic]"
    line="5"
    column="13" /&gt;
  &lt;error
    ruleid="11"
    message="Identifier quotation should be consistent and not mixed. Either use all square brackets or none: [dbo].dbx_codeanalysis_udt_generic"
    line="6"
    column="13" /&gt;
  &lt;error
    ruleid="11"
    message="Identifier quotation should be consistent and not mixed. Either use all square brackets or none: dbo.[dbx_table]"
    line="12"
    column="7" /&gt;
  &lt;error
    ruleid="11"
    message="Identifier quotation should be consistent and not mixed. Either use all square brackets or none: [dbo].dbx_table"
    line="15"
    column="7" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="DateTimeSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="28"
    message="Use of non UTC date/time function: GETDATE"
    line="4"
    column="84" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="DomainModel" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Dibix.Sdk.Tests
{
    namespace DomainModel
    {
        public enum AccessRights : int
        {
            None = 0,
            Read = 1,
            Write = 2,
            Execute = 4,
            All = Read | Write | Execute
        }

        public enum Direction : int
        {
            Ascending,
            Descending
        }

        public sealed class GenericContract
        {
            public string Name { get; set; }
            public System.DateTime CreationTime { get; set; }
        }

        namespace Extension
        {
            public sealed class MultiMapContract
            {
                public System.Guid? X { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt; Y { get; private set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public MultiMapContract()
                {
                    this.Y = new Collection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;();
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }
    }
}</value>
  </data>
  <data name="EmptyReturnSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="3"
    message="Please specify a return code for the RETURN expression"
    line="3"
    column="2" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="Endpoints" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Dibix.Http;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
[assembly: ApiRegistration("Tests")]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // EmptyWithParams
            private const string EmptyWithParamsCommandText = "";

            // SingleConrecteResultWithParams
            private const string SingleConrecteResultWithParamsCommandText = "SELECT [id] = 1";

            public static void EmptyWithParams(this IDatabaseAccessorFactory databaseAccessorFactory, System.Guid? x, string password, Dibix.Sdk.Tests.Data.GenericParameterSet ids, bool y = true, int? z = null)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    IParametersVisitor @params = accessor.Parameters()
                                                         .SetFromTemplate(new
                                                         {
                                                             x,
                                                             ids,
                                                             y,
                                                             z
                                                         })
                                                         .SetString(nameof(password), password, true)
                                                         .Build();
                    accessor.Execute(EmptyWithParamsCommandText, @params);
                }
            }

            public static Dibix.Sdk.Tests.DomainModel.GenericContract SingleConrecteResultWithParams(this IDatabaseAccessorFactory databaseAccessorFactory, Dibix.Sdk.Tests.Data.IntParameterSet ids)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    IParametersVisitor @params = accessor.Parameters()
                                                         .SetFromTemplate(new
                                                         {
                                                             ids
                                                         })
                                                         .Build();
                    return accessor.QuerySingle&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;(SingleConrecteResultWithParamsCommandText, @params);
                }
            }
        }
        #endregion

        #region Structured types
        [StructuredType("[dbo].[dbx_codeanalysis_udt_generic]")]
        public sealed class GenericParameterSet : StructuredType&lt;GenericParameterSet, int, string&gt;
        {
            public GenericParameterSet() : base("[dbo].[dbx_codeanalysis_udt_generic]")
            {
                base.ImportSqlMetadata(() =&gt; this.Add(default, default));
            }
            public void Add(int id, string name)
            {
                base.AddValues(id, name);
            }
        }

        [StructuredType("[dbo].[dbx_codeanalysis_udt_int]")]
        public sealed class IntParameterSet : StructuredType&lt;IntParameterSet, int&gt;
        {
            public IntParameterSet() : base("[dbo].[dbx_codeanalysis_udt_int]")
            {
                base.ImportSqlMetadata(() =&gt; this.Add(default));
            }
            public void Add(int id)
            {
                base.AddValues(id);
            }
        }

        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }

        public sealed class InputContract
        {
            public System.Guid X { get; set; }
            public string Password { get; set; }
            public bool Y { get; set; }
            public int Z { get; set; }
        }
        #endregion

    }
    namespace Business
    {
        #region Endpoints
        public sealed class ApiConfiguration : HttpApiDescriptor
        {
            public override void Configure()
            {
                base.RegisterController("GenericEndpoint", x =&gt; 
                {
                    x.AddAction(ReflectionHttpActionTarget.Create(typeof(Dibix.Sdk.Tests.Data.TestAccessor), nameof(Dibix.Sdk.Tests.Data.TestAccessor.EmptyWithParams)), y =&gt;
                    {
                        y.Method = HttpApiMethod.Get;
                        y.ChildRoute = "{password}/Fixed";
                        y.ResolveParameterFromSource("x", "DBX", "X");
                        y.ResolveParameterFromConstant("y", true);
                        y.ResolveParameterFromConstant("z", 5);
                    });
                    x.AddAction(ReflectionHttpActionTarget.Create(typeof(Dibix.Sdk.Tests.Data.TestAccessor), nameof(Dibix.Sdk.Tests.Data.TestAccessor.EmptyWithParams)), y =&gt;
                    {
                        y.Method = HttpApiMethod.Get;
                        y.ChildRoute = "{password}/User";
                    });
                    x.AddAction(ReflectionHttpActionTarget.Create(typeof(Dibix.Sdk.Tests.Data.TestAccessor), nameof(Dibix.Sdk.Tests.Data.TestAccessor.SingleConrecteResultWithParams)), y =&gt;
                    {
                        y.Method = HttpApiMethod.Get;
                        y.ChildRoute = "Array";
                    });
                    x.AddAction(ReflectionHttpActionTarget.Create(typeof(Dibix.Sdk.Tests.Data.TestAccessor), nameof(Dibix.Sdk.Tests.Data.TestAccessor.EmptyWithParams)), y =&gt;
                    {
                        y.Method = HttpApiMethod.Post;
                        y.BodyContract = typeof(Dibix.Sdk.Tests.DomainModel.InputContract);
                        y.ResolveParameterFromBody("ids", "Dibix.GenericContractIdsInputConverter");
                    });
                    x.ControllerImports.Add("Dibix.GenericEndpoint");
                });
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Endpoints_OpenApi" xml:space="preserve">
    <value>openapi: 3.0.1
info:
  title: Dibix.Sdk Tests
  version: 1.0.0
paths:
  '/api/Tests/GenericEndpoint/{password}/Fixed':
    get:
      tags:
        - Tests/GenericEndpoint
      summary: Undocumented action
      operationId: EmptyWithParams1
      parameters:
        - name: password
          in: path
          required: true
          schema:
            type: string
        - name: ids
          in: query
          required: true
          style: deepObject
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Dibix.Sdk.Tests.Data.GenericParameterSet'
      responses:
        '204':
          description: NoContent
  '/api/Tests/GenericEndpoint/{password}/User':
    get:
      tags:
        - Tests/GenericEndpoint
      summary: Undocumented action
      operationId: EmptyWithParams2
      parameters:
        - name: password
          in: path
          required: true
          schema:
            type: string
        - name: x
          in: query
          schema:
            type: string
            format: uuid
            nullable: true
        - name: ids
          in: query
          required: true
          style: deepObject
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Dibix.Sdk.Tests.Data.GenericParameterSet'
        - name: y
          in: query
          schema:
            type: boolean
            default: true
        - name: z
          in: query
          schema:
            type: integer
            format: int32
            default: 
            nullable: true
      responses:
        '204':
          description: NoContent
  /api/Tests/GenericEndpoint/Array:
    get:
      tags:
        - Tests/GenericEndpoint
      summary: Undocumented action
      operationId: SingleConrecteResultWithParams
      parameters:
        - name: ids
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dibix.Sdk.Tests.DomainModel.GenericContract'
  /api/Tests/GenericEndpoint:
    post:
      tags:
        - Tests/GenericEndpoint
      summary: Undocumented action
      operationId: EmptyWithParams3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dibix.Sdk.Tests.DomainModel.InputContract'
        required: true
      responses:
        '204':
          description: NoContent
components:
  schemas:
    Dibix.Sdk.Tests.Data.GenericParameterSet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
      additionalProperties: false
    Dibix.Sdk.Tests.DomainModel.GenericContract:
      type: object
      properties:
        Name:
          type: string
        CreationTime:
          type: string
          format: date-time
      additionalProperties: false
    Dibix.Sdk.Tests.DomainModel.InputContract:
      type: object
      properties:
        X:
          type: string
          format: uuid
        Password:
          type: string
        Y:
          type: boolean
        Z:
          type: integer
          format: int32
      additionalProperties: false</value>
  </data>
  <data name="ExplicitProcedureArgumentSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="39"
    message="Procedure arguments should be named: @id = @x"
    line="13"
    column="44" /&gt;
  &lt;error
    ruleid="39"
    message="Procedure arguments should be named: @name = @name"
    line="13"
    column="48" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="External_Empty" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System.CodeDom.Compiler;
using Dibix;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // Empty
            private const string EmptyCommandText = "[dbo].[dbx_tests_syntax_empty]";

            public static void Empty(this IDatabaseAccessorFactory databaseAccessorFactory)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    accessor.Execute(EmptyCommandText, System.Data.CommandType.StoredProcedure);
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="External_Empty_WithParams" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System.CodeDom.Compiler;
using Dibix;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // EmptyWithParams
            private const string EmptyWithParamsCommandText = "[dbo].[dbx_tests_syntax_empty_params]";

            public static void EmptyWithParams(this IDatabaseAccessorFactory databaseAccessorFactory, System.Guid? x, string password, Dibix.Sdk.Tests.Data.GenericParameterSet ids, bool y = true, int? z = null)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    IParametersVisitor @params = accessor.Parameters()
                                                         .SetFromTemplate(new
                                                         {
                                                             x,
                                                             ids,
                                                             y,
                                                             z
                                                         })
                                                         .SetString(nameof(password), password, true)
                                                         .Build();
                    accessor.Execute(EmptyWithParamsCommandText, System.Data.CommandType.StoredProcedure, @params);
                }
            }
        }
        #endregion

        #region Structured types
        [StructuredType("[dbo].[dbx_codeanalysis_udt_generic]")]
        public sealed class GenericParameterSet : StructuredType&lt;GenericParameterSet, int, string&gt;
        {
            public GenericParameterSet() : base("[dbo].[dbx_codeanalysis_udt_generic]")
            {
                base.ImportSqlMetadata(() =&gt; this.Add(default, default));
            }
            public void Add(int id, string name)
            {
                base.AddValues(id, name);
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="External_Empty_WithParamsAndInputClass" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System.CodeDom.Compiler;
using Dibix;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // EmptyWithParams
            private const string EmptyWithParamsCommandText = "[dbo].[dbx_tests_syntax_empty_params_inputclass]";

            public static void EmptyWithParams(this IDatabaseAccessorFactory databaseAccessorFactory, [InputClass] EmptyWithParamsInput input)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    IParametersVisitor @params = accessor.Parameters()
                                                         .SetFromTemplate(input)
                                                         .Build();
                    accessor.Execute(EmptyWithParamsCommandText, System.Data.CommandType.StoredProcedure, @params);
                }
            }
        }
        #endregion

        #region Input types
        public sealed class EmptyWithParamsInput
        {
            public System.Guid? x { get; set; }
            public bool y { get; set; }
            public int z { get; set; }
            public Dibix.Sdk.Tests.Data.GenericParameterSet ids { get; set; }
        }
        #endregion

        #region Structured types
        [StructuredType("[dbo].[dbx_codeanalysis_udt_generic]")]
        public sealed class GenericParameterSet : StructuredType&lt;GenericParameterSet, int, string&gt;
        {
            public GenericParameterSet() : base("[dbo].[dbx_codeanalysis_udt_generic]")
            {
                base.ImportSqlMetadata(() =&gt; this.Add(default, default));
            }
            public void Add(int id, string name)
            {
                base.AddValues(id, name);
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="ImplicitAliasSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="8"
    message="Aliases must be marked with 'AS'"
    line="3"
    column="28" /&gt;
  &lt;error
    ruleid="8"
    message="Aliases must be marked with 'AS'"
    line="4"
    column="25" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="ImplicitDefaultSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="25"
    message="Please specify a nullable constraint for the column 'dbx_codeanalysis_error_025_table_fail.a' and don't rely on the default"
    line="12"
    column="5" /&gt;
  &lt;error
    ruleid="25"
    message="Please specify a nullable constraint for the column 'dbx_codeanalysis_error_025_table_fail.b' and don't rely on the default"
    line="13"
    column="5" /&gt;
  &lt;error
    ruleid="25"
    message="Please specify the clustering (CLUSTERED/NONCLUSTERED) for the index 'IX_dbx_codeanalysis_error_025_table_fail_b' and don't rely on the default"
    line="24"
    column="1" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="IndexSizeSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="32"
    message="Clustered index PK_dbx_codeanalysis_error_032_fail1 size is 901 bytes. The maximum key length is 900 bytes"
    line="18"
    column="5" /&gt;
  &lt;error
    ruleid="32"
    message="Clustered index PK_dbx_codeanalysis_error_032_fail2 size is 901 bytes. The maximum key length is 900 bytes"
    line="35"
    column="5" /&gt;
  &lt;error
    ruleid="32"
    message="Nonclustered index UQ_dbx_codeanalysis_error_032_fail2_ab size is 1701 bytes. The maximum key length is 1700 bytes"
    line="36"
    column="5" /&gt;
  &lt;error
    ruleid="32"
    message="Nonclustered index IX_dbx_codeanalysis_error_032_fail2_ac size is 1701 bytes. The maximum key length is 1700 bytes"
    line="37"
    column="5" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="InlineFunctionSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="37"
    message="Make non inline table valued function inline or replace it with a stored procedure: dbx_codeanalysis_error_037_tvf_noninline"
    line="14"
    column="1" /&gt;
  &lt;error
    ruleid="37"
    message="Scalar functions should only be used for assignments or check constraints. Otherwise replace it with an inline table-valued function: dbx_codeanalysis_error_037_scalar"
    line="40"
    column="16" /&gt;
  &lt;error
    ruleid="37"
    message="Scalar functions should only be used for assignments or check constraints. Otherwise replace it with an inline table-valued function: dbx_codeanalysis_error_037_scalar"
    line="42"
    column="18" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="Inline_FileApi" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System.CodeDom.Compiler;
using Dibix;
using Dibix.Http;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // dbx_tests_syntax_fileapi
            private const string dbx_tests_syntax_fileapiCommandText = "SELECT [type] = N'png'\r\n     , [data] = 0x0";

            public static HttpFileResponse dbx_tests_syntax_fileapi(this IDatabaseAccessorFactory databaseAccessorFactory)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    return accessor.QueryFile(dbx_tests_syntax_fileapiCommandText, @params);
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_GridResult" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        namespace Grid
        {
            [DatabaseAccessor]
            [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
            public static class TestAccessor
            {
                // GetGrid
                private const string GetGridCommandText = "SELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 1\r\nUNION ALL\r\nSELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 2\r\n\r\nSELECT 1";

                public static Dibix.Sdk.Tests.DomainModel.Grid.GetGridResult GetGrid(this IDatabaseAccessorFactory databaseAccessorFactory)
                {
                    using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                    {
                        using (IMultipleResultReader reader = accessor.QueryMultiple(GetGridCommandText))
                        {
                            Dibix.Sdk.Tests.DomainModel.Grid.GetGridResult result = new Dibix.Sdk.Tests.DomainModel.Grid.GetGridResult();
                            result.Item = reader.ReadSingle&lt;Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract, Dibix.Sdk.Tests.DomainModel.GenericContract&gt;("id");
                            result.Directions.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;());
                            return result;
                        }
                    }
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        public enum Direction : int
        {
            Ascending,
            Descending
        }

        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }

        namespace Extension
        {
            public sealed class MultiMapContract
            {
                public System.Guid? X { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt; Y { get; private set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public MultiMapContract()
                {
                    this.Y = new Collection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;();
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }

        namespace Grid
        {
            public sealed class GetGridResult
            {
                public Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract Item { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public GetGridResult()
                {
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_GridResult_MergeResult" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        namespace Grid
        {
            [DatabaseAccessor]
            [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
            public static class TestAccessor
            {
                // GetGrid
                private const string GetGridCommandText = "SELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 1\r\nUNION ALL\r\nSELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 2\r\n\r\nSELECT 1";

                public static Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract GetGrid(this IDatabaseAccessorFactory databaseAccessorFactory)
                {
                    using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                    {
                        using (IMultipleResultReader reader = accessor.QueryMultiple(GetGridCommandText))
                        {
                            Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract result = reader.ReadSingle&lt;Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract, Dibix.Sdk.Tests.DomainModel.GenericContract&gt;("id");
                            result.Directions.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;());
                            return result;
                        }
                    }
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        public enum Direction : int
        {
            Ascending,
            Descending
        }

        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }

        namespace Extension
        {
            public sealed class MultiMapContract
            {
                public System.Guid? X { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt; Y { get; private set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public MultiMapContract()
                {
                    this.Y = new Collection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;();
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_GridResult_WithCustomResultContractName" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        namespace Grid
        {
            [DatabaseAccessor]
            [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
            public static class TestAccessor
            {
                // GetGrid
                private const string GetGridCommandText = "SELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 1\r\nUNION ALL\r\nSELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 2\r\n\r\nSELECT 1";

                public static Dibix.Sdk.Tests.DomainModel.Grid.GridResult GetGrid(this IDatabaseAccessorFactory databaseAccessorFactory)
                {
                    using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                    {
                        using (IMultipleResultReader reader = accessor.QueryMultiple(GetGridCommandText))
                        {
                            Dibix.Sdk.Tests.DomainModel.Grid.GridResult result = new Dibix.Sdk.Tests.DomainModel.Grid.GridResult();
                            result.Item = reader.ReadSingle&lt;Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract, Dibix.Sdk.Tests.DomainModel.GenericContract&gt;("id");
                            result.Directions.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;());
                            return result;
                        }
                    }
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        public enum Direction : int
        {
            Ascending,
            Descending
        }

        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }

        namespace Extension
        {
            public sealed class MultiMapContract
            {
                public System.Guid? X { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt; Y { get; private set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public MultiMapContract()
                {
                    this.Y = new Collection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;();
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }

        namespace Grid
        {
            public sealed class GridResult
            {
                public Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract Item { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public GridResult()
                {
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_GridResult_WithExistingResultContract" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        namespace Grid
        {
            [DatabaseAccessor]
            [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
            public static class TestAccessor
            {
                // GetGrid
                private const string GetGridCommandText = "SELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 1\r\nUNION ALL\r\nSELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 2\r\n\r\nSELECT 1";

                public static Dibix.Sdk.Tests.DomainModel.Grid.GridResult GetGrid(this IDatabaseAccessorFactory databaseAccessorFactory)
                {
                    using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                    {
                        using (IMultipleResultReader reader = accessor.QueryMultiple(GetGridCommandText))
                        {
                            Dibix.Sdk.Tests.DomainModel.Grid.GridResult result = new Dibix.Sdk.Tests.DomainModel.Grid.GridResult();
                            result.Item = reader.ReadSingle&lt;Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract, Dibix.Sdk.Tests.DomainModel.GenericContract&gt;("id");
                            result.Directions.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;());
                            return result;
                        }
                    }
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        public enum Direction : int
        {
            Ascending,
            Descending
        }

        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }

        namespace Extension
        {
            public sealed class MultiMapContract
            {
                public System.Guid? X { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt; Y { get; private set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public MultiMapContract()
                {
                    this.Y = new Collection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;();
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }

        namespace Grid
        {
            public sealed class GridResult
            {
                public Dibix.Sdk.Tests.DomainModel.GenericContract Item { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public GridResult()
                {
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_GridResult_WithProjection" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        namespace Grid
        {
            [DatabaseAccessor]
            [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
            public static class TestAccessor
            {
                // GetGrid
                private const string GetGridCommandText = "SELECT [id] = 1\r\nUNION ALL\r\nSELECT [id] = 2\r\n\r\nSELECT [accessrights] = 1";

                public static Dibix.Sdk.Tests.DomainModel.Grid.GetGridResult GetGrid(this IDatabaseAccessorFactory databaseAccessorFactory)
                {
                    using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                    {
                        using (IMultipleResultReader reader = accessor.QueryMultiple(GetGridCommandText))
                        {
                            Dibix.Sdk.Tests.DomainModel.Grid.GetGridResult result = new Dibix.Sdk.Tests.DomainModel.Grid.GetGridResult();
                            result.Items.ReplaceWith(reader.ReadMany&lt;Dibix.Sdk.Tests.DomainModel.GenericContract, Dibix.Sdk.Tests.DomainModel.JointContract&gt;());
                            result.AccessRights = reader.ReadSingle&lt;Dibix.Sdk.Tests.DomainModel.AccessRights&gt;();
                            return result;
                        }
                    }
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        public enum AccessRights : int
        {
            None = 0,
            Read = 1,
            Write = 2,
            Execute = 4,
            All = Read | Write | Execute
        }

        public enum Direction : int
        {
            Ascending,
            Descending
        }

        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }

        public sealed class JointContract
        {
            public Dibix.Sdk.Tests.DomainModel.GenericContract A { get; set; }
            public Dibix.Sdk.Tests.DomainModel.Direction B { get; set; }
        }

        namespace Grid
        {
            public sealed class GetGridResult
            {
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.JointContract&gt; Items { get; private set; }
                public Dibix.Sdk.Tests.DomainModel.AccessRights AccessRights { get; set; }

                public GetGridResult()
                {
                    this.Items = new Collection&lt;Dibix.Sdk.Tests.DomainModel.JointContract&gt;();
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_MultiConcreteResult" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // dbx_tests_syntax_multiconcreteresult
            private const string dbx_tests_syntax_multiconcreteresultCommandText = "SELECT [id] = 1";

            public static IEnumerable&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt; dbx_tests_syntax_multiconcreteresult(this IDatabaseAccessorFactory databaseAccessorFactory)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    return accessor.QueryMany&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;(dbx_tests_syntax_multiconcreteresultCommandText);
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_SingleConcreteResult" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // dbx_tests_syntax_singleconcreteresult
            private const string dbx_tests_syntax_singleconcreteresultCommandText = "SELECT [id] = 1";

            public static Dibix.Sdk.Tests.DomainModel.GenericContract dbx_tests_syntax_singleconcreteresult(this IDatabaseAccessorFactory databaseAccessorFactory)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    return accessor.QuerySingle&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;(dbx_tests_syntax_singleconcreteresultCommandText);
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_SingleMultiMapResult" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // dbx_tests_syntax_singlemultimapresult
            private const string dbx_tests_syntax_singlemultimapresultCommandText = "SELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 1\r\nUNION ALL\r\nSELECT [x] = N'527B8008-AE6E-421F-91B2-5A0583070BCD', [id] = 2";

            public static Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract dbx_tests_syntax_singlemultimapresult(this IDatabaseAccessorFactory databaseAccessorFactory)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    return accessor.QuerySingle&lt;Dibix.Sdk.Tests.DomainModel.Extension.MultiMapContract, Dibix.Sdk.Tests.DomainModel.GenericContract&gt;(dbx_tests_syntax_singlemultimapresultCommandText, "id");
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        public enum Direction : int
        {
            Ascending,
            Descending
        }

        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }

        namespace Extension
        {
            public sealed class MultiMapContract
            {
                public System.Guid? X { get; set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt; Y { get; private set; }
                public ICollection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt; Directions { get; private set; }

                public MultiMapContract()
                {
                    this.Y = new Collection&lt;Dibix.Sdk.Tests.DomainModel.GenericContract&gt;();
                    this.Directions = new Collection&lt;Dibix.Sdk.Tests.DomainModel.Direction&gt;();
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_SingleMultiMapResult_WithProjection" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System;
using System.CodeDom.Compiler;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Dibix;
using Newtonsoft.Json;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        [DatabaseAccessor]
        [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
        public static class TestAccessor
        {
            // dbx_tests_syntax_singlemultimapresult_projection
            private const string dbx_tests_syntax_singlemultimapresult_projectionCommandText = "SELECT [id] = 1, [direction] = 0\r\nUNION ALL\r\nSELECT [id] = 1, [direction] = 1";

            public static Dibix.Sdk.Tests.DomainModel.JointContract dbx_tests_syntax_singlemultimapresult_projection(this IDatabaseAccessorFactory databaseAccessorFactory)
            {
                using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                {
                    return accessor.QuerySingle&lt;Dibix.Sdk.Tests.DomainModel.GenericContract, Dibix.Sdk.Tests.DomainModel.Direction, Dibix.Sdk.Tests.DomainModel.JointContract&gt;(dbx_tests_syntax_singlemultimapresult_projectionCommandText, "direction");
                }
            }
        }
        #endregion

    }
    namespace DomainModel
    {
        #region Contracts
        public enum Direction : int
        {
            Ascending,
            Descending
        }

        [DataContract(Namespace = "https://schemas.dibix.com/GenericContract")]
        public sealed class GenericContract
        {
            [Key]
            [DataMember]
            [JsonIgnore]
            public int Id { get; set; }
            [DataMember]
            [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
            [DataMember]
            [JsonIgnore]
            [Discriminator]
            public int? ParentId { get; set; }
            [DataMember]
            [DateTimeKind(DateTimeKind.Utc)]
            public System.DateTime CreationTime { get; set; }
        }

        public sealed class JointContract
        {
            public GenericContract A { get; set; }
            public Direction B { get; set; }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_SinglePrimitiveResult" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System.CodeDom.Compiler;
using Dibix;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        namespace Extension.Primitive
        {
            [DatabaseAccessor]
            [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
            public static class TestAccessor
            {
                // GetSinglePrimitiveResult
                private const string GetSinglePrimitiveResultCommandText = "SELECT 1";

                public static bool GetSinglePrimitiveResult(this IDatabaseAccessorFactory databaseAccessorFactory)
                {
                    using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                    {
                        return accessor.QuerySingle&lt;bool&gt;(GetSinglePrimitiveResultCommandText);
                    }
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="Inline_SinglePrimitiveResult_Async" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using System.CodeDom.Compiler;
using System.Threading.Tasks;
using Dibix;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
    namespace Data
    {
        #region Accessor
        namespace Extension.Primitive
        {
            [DatabaseAccessor]
            [GeneratedCodeAttribute("Dibix.Sdk", "1.0.0.0")]
            public static class TestAccessor
            {
                // GetSinglePrimitiveResult
                private const string GetSinglePrimitiveResultCommandText = "SELECT 1";

                public static async Task&lt;bool&gt; GetSinglePrimitiveResultAsync(this IDatabaseAccessorFactory databaseAccessorFactory)
                {
                    using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
                    {
                        return await accessor.QuerySingleAsync&lt;bool&gt;(GetSinglePrimitiveResultCommandText).ConfigureAwait(false);
                    }
                }
            }
        }
        #endregion
    }
}</value>
  </data>
  <data name="InsertWithoutColumnSpecificationSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="15"
    message="Missing column specification for INSERT statement"
    line="4"
    column="3" /&gt;
  &lt;error
    ruleid="15"
    message="Missing column specification for INSERT statement"
    line="10"
    column="4" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="IsNullSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="34"
    message="Nullable columns in expressions should be wrapped with ISNULL(column, default value): dbx_codeanalysis_error_034.b"
    line="8"
    column="60" /&gt;
  &lt;error
    ruleid="34"
    message="Nullable columns in expressions should be wrapped with ISNULL(column, default value): dbx_codeanalysis_error_034.b"
    line="9"
    column="64" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="KeywordCasingSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'nocount' [Identifier]"
    line="3"
    column="6" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'sysname' [Identifier]"
    line="6"
    column="13" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'nvarchar' [Identifier]"
    line="7"
    column="13" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'max' [Identifier]"
    line="7"
    column="22" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'decimal' [Identifier]"
    line="8"
    column="13" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'cast' [Identifier]"
    line="15"
    column="25" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'count' [Identifier]"
    line="17"
    column="14" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'row_number' [Identifier]"
    line="28"
    column="9" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'partition' [Identifier]"
    line="28"
    column="27" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'set' [Set]"
    line="3"
    column="2" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'on' [On]"
    line="3"
    column="14" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'SeLeCT' [Select]"
    line="17"
    column="2" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'over' [Over]"
    line="28"
    column="22" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'by' [By]"
    line="28"
    column="37" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'order' [Order]"
    line="28"
    column="43" /&gt;
  &lt;error
    ruleid="1"
    message="Invalid casing for 'by' [By]"
    line="28"
    column="49" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="LanguageDependentConstantSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="20"
    message="Found language dependent expression: CAST(N'1990-01-01' AS DATETIME)"
    line="3"
    column="30" /&gt;
  &lt;error
    ruleid="20"
    message="Found language dependent expression: 1990-01-01"
    line="4"
    column="25" /&gt;
  &lt;error
    ruleid="20"
    message="Found language dependent expression: CONSTRAINT [DF_dbx_codeanalysis_error_020_table_value] DEFAULT N'1990-01-01'"
    line="9"
    column="90" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="LooseConstraintsSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="26"
    message="Constraints should be defined within the CREATE TABLE statement: UQ_dbx_codeanalysis_error_026_table_b"
    line="7"
    column="58" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="MissingPrimaryKeySqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="12"
    message="Table 'dbx_codeanalysis_error_012_table' does not have a primary key"
    line="3"
    column="2" /&gt;
  &lt;error
    ruleid="12"
    message="User defined table type 'dbx_codeanalysis_udt_error_012' does not have a primary key"
    line="8"
    column="2" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="MisusedTopRowFilterSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="22"
    message="Missing ORDER BY for SELECT TOP statement"
    line="10"
    column="10" /&gt;
  &lt;error
    ruleid="22"
    message="Invalid TOP filter for single row equality statement"
    line="18"
    column="10" /&gt;
  &lt;error
    ruleid="22"
    message="Invalid TOP filter for single row equality statement"
    line="24"
    column="10" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="NamingConventionSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="17"
    message="Column names should only contain the characters 'a-z_' and have no trailing underscores: dbx_codeanalysis_error_017_fail.A"
    line="22"
    column="5" /&gt;
  &lt;error
    ruleid="17"
    message="Primary key constraint 'PK_dbx_codeanalysis_error_017_failx' does not match naming convention 'PK_&amp;lt;table&amp;gt;'. Also make sure the name is all lowercase."
    line="27"
    column="16" /&gt;
  &lt;error
    ruleid="17"
    message="Foreign key constraint 'FK_dbx_codeanalysis_error_017_failx_a' does not match naming convention 'FK_&amp;lt;table&amp;gt;_*'. Also make sure the name is all lowercase."
    line="28"
    column="16" /&gt;
  &lt;error
    ruleid="17"
    message="Unique constraint 'UQ_dbx_codeanalysis_error_017_failx_b' does not match naming convention 'UQ_&amp;lt;table&amp;gt;_*'. Also make sure the name is all lowercase."
    line="30"
    column="16" /&gt;
  &lt;error
    ruleid="17"
    message="Unique constraint 'UQ_dbx_codeanalysis_error_017_failx_d' does not match naming convention 'UQ_&amp;lt;table&amp;gt;_*'. Also make sure the name is all lowercase."
    line="34"
    column="68" /&gt;
  &lt;error
    ruleid="17"
    message="Check constraint 'CK_dbx_codeanalysis_error_017_failx_a' does not match naming convention 'CK_&amp;lt;table&amp;gt;_*'. Also make sure the name is all lowercase."
    line="29"
    column="16" /&gt;
  &lt;error
    ruleid="17"
    message="Default constraint 'DF_dbx_codeanalysis_error_017_fail_idx' does not match naming convention 'DF_&amp;lt;table&amp;gt;_&amp;lt;column&amp;gt;'. Also make sure the name is all lowercase."
    line="22"
    column="33" /&gt;
  &lt;error
    ruleid="17"
    message="Index 'IX_dbx_codeanalysis_error_017_failx_c' does not match naming convention 'IX_&amp;lt;table&amp;gt;_*'. Also make sure the name is all lowercase."
    line="31"
    column="11" /&gt;
  &lt;error
    ruleid="17"
    message="Index 'IX_dbx_codeanalysis_error_017_failx_d' does not match naming convention 'IX_&amp;lt;table&amp;gt;_*'. Also make sure the name is all lowercase."
    line="36"
    column="27" /&gt;
  &lt;error
    ruleid="17"
    message="Unique index 'UQ_dbx_codeanalysis_error_017_failx_e' does not match naming convention 'UQ_&amp;lt;table&amp;gt;_*'. Also make sure the name is all lowercase."
    line="38"
    column="34" /&gt;
  &lt;error
    ruleid="17"
    message="Type 'dbx_codeanalysis_error_017_fail_udt' does not match naming convention 'dbx*_udt_*'. Also make sure the name is all lowercase."
    line="41"
    column="19" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="NoCursorSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="13"
    message="Found use of CURSOR statement"
    line="3"
    column="19" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="NoMatchingSources_EmptyStatement" xml:space="preserve">
    <value>/*------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//----------------------------------------------------------------------------*/
using Dibix;

[assembly: ArtifactAssembly]
namespace Dibix.Sdk.Tests
{
}</value>
  </data>
  <data name="UnsupportedDataTypeSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="16"
    message="The data type 'NTEXT' is obsolete and should not be used"
    line="3"
    column="14" /&gt;
  &lt;error
    ruleid="16"
    message="The data type 'IMAGE' is obsolete and should not be used"
    line="4"
    column="14" /&gt;
  &lt;error
    ruleid="16"
    message="Please use DATETIME instead of DATETIME2"
    line="5"
    column="14" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="PrimaryKeyDataTypeSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="23"
    message="Only TINYINT/SMALLINT/INT/BIGINT are allowed as primary key: dbx_codeanalysis_error_023_fail1.b (NVARCHAR)"
    line="5"
    column="72" /&gt;
  &lt;error
    ruleid="23"
    message="Only TINYINT/SMALLINT/INT/BIGINT are allowed as primary key: dbx_codeanalysis_error_023_fail2.b (NVARCHAR)"
    line="12"
    column="5" /&gt;
  &lt;error
    ruleid="23"
    message="Only TINYINT/SMALLINT/INT/BIGINT are allowed as primary key: dbx_codeanalysis_error_023_fail3.c (NVARCHAR)"
    line="20"
    column="72" /&gt;
  &lt;error
    ruleid="23"
    message="Only TINYINT/SMALLINT/INT/BIGINT are allowed as primary key: dbx_codeanalysis_error_023_fail4.a (NVARCHAR)"
    line="30"
    column="120" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="PrimaryKeyUpdateSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="36"
    message="Primary keys should not be updated: [target].[id] = [source].[id]"
    line="7"
    column="20" /&gt;
  &lt;error
    ruleid="36"
    message="Primary keys should not be updated: [id] = 1"
    line="10"
    column="31" /&gt;
  &lt;error
    ruleid="36"
    message="Primary keys should not be updated: [id] = 1"
    line="16"
    column="21" /&gt;
  &lt;error
    ruleid="36"
    message="Primary keys should not be updated: [r].[id_current] = [r].[id_new]"
    line="20"
    column="17" /&gt;
  &lt;error
    ruleid="36"
    message="Primary keys should not be updated: [T].[id] = [S].[id]"
    line="29"
    column="14" /&gt;
  &lt;error
    ruleid="36"
    message="Primary keys should not be updated: [T].[idx] = [S].[id]"
    line="39"
    column="14" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="PrimitiveDataTypeIdentifierSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="7"
    message="Primitive data type identifiers must not be quoted: [int]"
    line="4"
    column="13" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="RedundantAliasSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="6"
    message="The alias is redundant"
    line="3"
    column="17" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="RedundantIndexSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="33"
    message="Found duplicate indexes: PK_dbx_codeanalysis_error_033_fail1, UQ_dbx_codeanalysis_error_033_fail1_a, IX_dbx_codeanalysis_error_033_fail1_a"
    line="5"
    column="5" /&gt;
  &lt;error
    ruleid="33"
    message="Found duplicate indexes: IX_dbx_codeanalysis_error_033_fail1_b1, IX_dbx_codeanalysis_error_033_fail1_b2"
    line="10"
    column="1" /&gt;
  &lt;error
    ruleid="33"
    message="Found duplicate indexes with different includes: PK_dbx_codeanalysis_error_033_fail2, IX_dbx_codeanalysis_error_033_fail2_a"
    line="19"
    column="5" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="RedundantSymbolSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="38"
    message="Unused parameter: @id"
    line="1"
    column="53" /&gt;
  &lt;error
    ruleid="38"
    message="Unused variable: @var"
    line="3"
    column="10" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="SchemaSpecificationSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="9"
    column="7" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="17"
    column="7" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="22"
    column="14" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="24"
    column="14" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="24"
    column="44" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="26"
    column="28" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="28"
    column="9" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="32"
    column="28" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="35"
    column="7" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="39"
    column="7" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="54"
    column="8" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="58"
    column="8" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="75"
    column="14" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="83"
    column="7" /&gt;
  &lt;error
    ruleid="2"
    message="Missing schema specification"
    line="84"
    column="10" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="SecurityAlgorithmSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="30"
    message="Found use of old security algorithm 'SHA1'. Please use any of these algorithms: SHA2_512"
    line="3"
    column="10" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="SurrogateKeySqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="24"
    message="Surrogate keys are only allowed, if a business key is defined: dbx_codeanalysis_error_024_fail1"
    line="1"
    column="1" /&gt;
  &lt;error
    ruleid="24"
    message="Surrogate keys are only allowed, if a business key is defined: dbx_codeanalysis_error_024_fail2"
    line="8"
    column="1" /&gt;
  &lt;error
    ruleid="24"
    message="Surrogate keys are only allowed, if a business key is defined: dbx_codeanalysis_error_024_fail3"
    line="16"
    column="1" /&gt;
  &lt;error
    ruleid="24"
    message="Business key can be used as the primary key and should replace surrogate key: dbx_codeanalysis_error_024_fail4"
    line="24"
    column="1" /&gt;
  &lt;error
    ruleid="24"
    message="IDENTITY columns are only allowed for a valid surrogate key: dbx_codeanalysis_error_024_fail5.b"
    line="35"
    column="5" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="TableConstraintSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="29"
    message="The constraint 'PK_dbx_codeanalysis_error_029_table_fail' should be defined on the table, instead of the column 'name'"
    line="11"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="TemporaryTableSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="21"
    message="The use of temporary tables is not allowed: #dbx_codeanalysis_error_021"
    line="3"
    column="22" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="TruncateTableSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="19"
    message="Found use of TRUNCATE TABLE statement"
    line="3"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnfilteredDataModificationSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="18"
    message="Missing where clause in UPDATE statement"
    line="5"
    column="3" /&gt;
  &lt;error
    ruleid="18"
    message="Missing where clause in DELETE statement"
    line="6"
    column="3" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnicodeConstantSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="4"
    message="Invalid ascii string literal. Please specify unicode (N'')"
    line="3"
    column="28" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnicodeDataTypeSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="5"
    message="Use unicode data types instead of ascii. Replace 'CHAR' with 'NCHAR'."
    line="1"
    column="56" /&gt;
  &lt;error
    ruleid="5"
    message="Use unicode data types instead of ascii. Replace 'VARCHAR' with 'NVARCHAR'."
    line="1"
    column="70" /&gt;
  &lt;error
    ruleid="5"
    message="Use unicode data types instead of ascii. Replace 'CHAR' with 'NCHAR'."
    line="4"
    column="13" /&gt;
  &lt;error
    ruleid="5"
    message="Use unicode data types instead of ascii. Replace 'VARCHAR' with 'NVARCHAR'."
    line="6"
    column="13" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnintentionalBooleanComparisonSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="31"
    message="Unintentional boolean comparison: 1 = 1"
    line="4"
    column="9" /&gt;
  &lt;error
    ruleid="31"
    message="Unintentional boolean comparison: @a = @a"
    line="9"
    column="9" /&gt;
  &lt;error
    ruleid="31"
    message="Unintentional boolean comparison: @b = @b"
    line="9"
    column="21" /&gt;
  &lt;error
    ruleid="31"
    message="Unintentional boolean comparison: 1 = 2"
    line="12"
    column="9" /&gt;
  &lt;error
    ruleid="31"
    message="Unintentional boolean comparison: 1 &amp;gt; 2"
    line="15"
    column="9" /&gt;
  &lt;error
    ruleid="31"
    message="Unintentional boolean comparison: 1 &amp;lt;&amp;gt; 2"
    line="18"
    column="9" /&gt;
  &lt;error
    ruleid="31"
    message="Unintentional boolean comparison: 1 &amp;lt; 2"
    line="21"
    column="9" /&gt;
  &lt;error
    ruleid="31"
    message="Unintentional boolean comparison: 1 IS NOT NULL"
    line="24"
    column="9" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UniqueIndexSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="27"
    message="Unique index should be replaced by a unique constraint on the table definition: UQ_dbx_codeanalysis_error_027_table_id_fail"
    line="13"
    column="1" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnnamedConstraintSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="14"
    message="Table 'dbx_codeanalysis_error_014_fail1' has an unnamed primary key constraint"
    line="3"
    column="20" /&gt;
  &lt;error
    ruleid="14"
    message="Table 'dbx_codeanalysis_error_014_fail1' has an unnamed default constraint"
    line="3"
    column="32" /&gt;
  &lt;error
    ruleid="14"
    message="Table 'dbx_codeanalysis_error_014_fail2' has an unnamed primary key constraint"
    line="14"
    column="5" /&gt;
&lt;/errors&gt;</value>
  </data>
  <data name="UnspecifiedDataTypeLengthSqlCodeAnalysisRule" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;errors&gt;
  &lt;error
    ruleid="9"
    message="Data type length not specified: NVARCHAR"
    line="5"
    column="13" /&gt;
  &lt;error
    ruleid="9"
    message="Data type length not specified: NCHAR"
    line="6"
    column="13" /&gt;
  &lt;error
    ruleid="9"
    message="Data type length not specified: BINARY"
    line="7"
    column="13" /&gt;
  &lt;error
    ruleid="9"
    message="Data type length not specified: VARBINARY"
    line="8"
    column="13" /&gt;
  &lt;error
    ruleid="9"
    message="Data type length not specified: DECIMAL"
    line="9"
    column="13" /&gt;
  &lt;error
    ruleid="9"
    message="Data type length not specified: NUMERIC"
    line="10"
    column="13" /&gt;
  &lt;error
    ruleid="9"
    message="Data type length not specified: FLOAT"
    line="11"
    column="13" /&gt;
&lt;/errors&gt;</value>
  </data>
</root>