<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(SolutionDir)\src\Dibix.Sdk\bin\Debug\net46\Dibix.Sdk.dll" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Dibix.Sdk.CodeGeneration" #><#

// Override schema version
typeof(GeneratorConfigurationBuilder).GetField("UseExtendedJsonReader", BindingFlags.NonPublic | BindingFlags.Static).SetValue(null, true);

const string json = @"{
  ""input"": {
    ""Dibix.Sdk.Tests.Database"": [
      {
        ""include"": [
          ""./**"",
          ""Tests/Sources/Excluded/Nested/dbx_tests_sources_excludednested.sql""
        ],
        ""exclude"": [
          ""CodeAnalysis"",
          ""Tables"",
          ""Types"",
          ""Tests/Parser"",
          ""Tests/Sources/Excluded"",
          ""Tests/Sources/dbx_tests_sources_externalsp""
        ]
      },
      {
        ""include"": ""Tests/Sources/dbx_tests_sources_externalsp.sql"",
        ""formatter"": ""ExecStoredProcedureSqlStatementFormatter""
      }
    ],
    ""SSISDB.dacpac"": {
      ""include"": {
        ""[catalog].[delete_project]"": ""DeleteProject""
      },
      ""formatter"": ""ExecStoredProcedureSqlStatementFormatter""
    }
  },
  ""output"": {
    ""namespace"": ""This.Is.A.Custom.Namespace"",
    ""className"": ""Accessor"",
    ""formatting"": ""Verbatim""
  }
}";

GeneratorConfiguration configuration = GeneratorConfigurationBuilder.FromTextTemplate(this.Host, (IServiceProvider)this.Host)
																    .ParseJson(json);

ICodeGenerator generator = CodeGeneratorFactory.FromTextTemplate(configuration, this.Host, (IServiceProvider)this.Host);
string output = generator.Generate();

Write(output);

#>