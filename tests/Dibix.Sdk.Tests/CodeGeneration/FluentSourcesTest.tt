<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(SolutionDir)\src\Dibix.Sdk\bin\Debug\net46\Dibix.Sdk.dll" #>
<#@ import namespace="Dibix.Sdk.CodeGeneration" #><#

GeneratorConfiguration configuration = GeneratorConfigurationBuilder.FromTextTemplate(this.Host, (IServiceProvider)this.Host)
    .Configure(cfg => cfg.AddSource("Dibix.Sdk.Tests.Database", x =>
                         {
                             x.SelectFolder(null, "CodeAnalysis", "Tables", "Types", "Tests/Parser", "Tests/Sources/Excluded", "Tests/Sources/dbx_tests_sources_externalsp")
                              .SelectFile("Tests/Sources/Excluded/Nested/dbx_tests_sources_excludednested.sql");
                         })
                         .AddSource("Dibix.Sdk.Tests.Database", x =>
                         {
                             x.SelectFile("Tests/Sources/dbx_tests_sources_externalsp.sql")
                              .SelectParser<SqlStoredProcedureParser>(y => 
							  { 
							      y.Formatter<ExecStoredProcedureSqlStatementFormatter>(); 
							  });
                         })
                         .AddDacPac("SSISDB.dacpac", x =>
                         {
                             x.SelectProcedure("[catalog].[delete_project]", "DeleteProject")
                              .SelectParser<SqlStoredProcedureParser>(y => 
							  { 
							      y.Formatter<ExecStoredProcedureSqlStatementFormatter>(); 
							  });
                         })
                         .SelectOutputWriter<DaoWriter>(x =>
                         {
                             x.Namespace("This.Is.A.Custom.Namespace")
                              .ClassName("Accessor")
                              .Formatting(CommandTextFormatting.Verbatim);
                         })
    );


ICodeGenerator generator = CodeGeneratorFactory.FromTextTemplate(configuration, this.Host, (IServiceProvider)this.Host);
string output = generator.Generate();

Write(output);

#>