<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(SolutionDir)\src\Dibix.Sdk\bin\Debug\net46\Dibix.Sdk.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Dibix.Sdk.CodeGeneration" #>
<#@ import namespace="Dibix.Sdk.CodeAnalysis.Rules" #><#

// Override naming conventions
Type namingConventionType = typeof(NamingConventionSqlCodeAnalysisRule).Assembly.GetType("Dibix.Sdk.CodeAnalysis.Rules.NamingConvention");
IDictionary<string, string> overrides = new Dictionary<string, string>
{
    { "Table",     "dbx*" }
  , { "Procedure", "dbx*" }
};
foreach (KeyValuePair<string, string> @override in overrides)
    namingConventionType.GetField(@override.Key, BindingFlags.Public | BindingFlags.Static).SetValue(null, @override.Value);

string output = SqlAccessorGeneratorFactory.FromVisualStudio(this.Host, (IServiceProvider)this.Host)
                                           .Build()
                                           .AddSource("Dibix.Sdk.Tests.Database", x => 
                                           {
                                               x.SelectFolder(null, "CodeAnalysis", "Tables", "Types", "Tests/Parser", "Tests/Sources/Excluded", "Tests/Sources/dbx_tests_sources_externalsp")
                                                .SelectFile("Tests/Sources/Excluded/Nested/dbx_tests_sources_excludednested.sql");
                                           })
                                           .AddSource("Dibix.Sdk.Tests.Database", x =>
                                           {
                                               x.SelectFile("Tests/Sources/dbx_tests_sources_externalsp.sql")
                                                .SelectParser<SqlStoredProcedureParser>(y =>
                                                {
                                                    y.Formatter<ExecStoredProcedureSqlStatementFormatter>();
                                                });
                                           })
                                           .AddDacPac("SSISDB.dacpac", x =>
                                           {
                                               x.SelectProcedure("[catalog].[delete_project]", "DeleteProject")
                                                .SelectParser<SqlStoredProcedureParser>(y =>
                                                {
                                                    y.Formatter<ExecStoredProcedureSqlStatementFormatter>();
                                                });
                                           })
                                           .SelectOutputWriter<SqlDaoWriter>(x => 
                                           {
                                               x.Namespace("This.Is.A.Custom.Namespace")
                                                .ClassName("Accessor")
                                                .Formatting(SqlQueryOutputFormatting.Verbatim);
                                           })
                                           .Generate();
Write(output);

#>