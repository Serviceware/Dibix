/*------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Dibix SDK 1.0.0.0.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------*/
using System.Data;
using Dibix;

[assembly: ArtifactAssembly]

#region Accessor
namespace Dibix.Sdk.Tests.Data
{
    [DatabaseAccessor]
    public static class TestAccessor
    {
        // EmptyWithParams
        private const string EmptyWithParamsCommandText = "[dbo].[dbx_tests_syntax_empty_params_inputclass]";

        public static void EmptyWithParams(this IDatabaseAccessorFactory databaseAccessorFactory, [InputClass] EmptyWithParamsInput input)
        {
            using (IDatabaseAccessor accessor = databaseAccessorFactory.Create())
            {
                ParametersVisitor @params = accessor.Parameters()
                                                    .SetFromTemplate(input)
                                                    .Build();
                accessor.Execute(EmptyWithParamsCommandText, CommandType.StoredProcedure, @params);
            }
        }
    }
}
#endregion

#region Input types
namespace Dibix.Sdk.Tests.Data
{
    public sealed class EmptyWithParamsInput
    {
        public System.Guid? x { get; set; }
        [Obfuscated]
        public string password { get; set; }
        public Dibix.Sdk.Tests.Data.GenericParameterSet ids { get; set; }
        public IOutParameter<bool> y { get; set; }
        public int z { get; set; }
    }
}
#endregion

#region Structured types
namespace Dibix.Sdk.Tests.Data
{
    [StructuredType("[dbo].[dbx_codeanalysis_udt_generic]")]
    public sealed class GenericParameterSet : StructuredType<GenericParameterSet, int, string?>
    {
        public GenericParameterSet() : base("[dbo].[dbx_codeanalysis_udt_generic]")
        {
            base.ImportSqlMetadata(() => Add(default, default));
        }
        public void Add(int id, string? name)
        {
            base.AddValues(id, name);
        }
    }
}
#endregion